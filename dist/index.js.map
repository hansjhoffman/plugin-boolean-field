{
  "version": 3,
  "sources": ["../output/Control.Semigroupoid/index.js", "../output/Control.Category/index.js", "../output/Data.Boolean/index.js", "../output/Data.Function/index.js", "../output/Data.Unit/foreign.js", "../output/Data.Functor/index.js", "../output/Control.Alt/index.js", "../output/Control.Apply/index.js", "../output/Control.Applicative/index.js", "../output/Data.Bounded/foreign.js", "../output/Data.Ord/foreign.js", "../output/Data.Eq/foreign.js", "../output/Data.Eq/index.js", "../output/Data.Ordering/index.js", "../output/Data.Ring/foreign.js", "../output/Data.Semiring/foreign.js", "../output/Data.Semiring/index.js", "../output/Data.Ring/index.js", "../output/Data.Ord/index.js", "../output/Data.Bounded/index.js", "../output/Data.Show/foreign.js", "../output/Data.Show/index.js", "../output/Data.Maybe/index.js", "../output/Data.Either/index.js", "../output/Control.Lazy/index.js", "../output/Data.EuclideanRing/foreign.js", "../output/Data.CommutativeRing/index.js", "../output/Data.EuclideanRing/index.js", "../output/Data.Tuple/index.js", "../output/Data.Bifunctor/index.js", "../output/Data.String.Common/foreign.js", "../output/Data.String.Common/index.js", "../output/Control.Bind/index.js", "../output/Control.Monad.Error.Class/index.js", "../output/Data.Identity/index.js", "../output/Control.Monad.Rec.Class/index.js", "../output/Data.Lazy/foreign.js", "../output/Unsafe.Coerce/foreign.js", "../output/Safe.Coerce/index.js", "../output/Data.Newtype/index.js", "../output/Data.Traversable/foreign.js", "../output/Parsing/index.js", "../output/Parsing.Combinators/index.js", "../output/Data.Array/foreign.js", "../output/Data.Array.ST/foreign.js", "../output/Data.Array/index.js", "../output/Data.Array.NonEmpty.Internal/foreign.js", "../output/Data.Enum/foreign.js", "../output/Data.Enum/index.js", "../output/Data.Function.Uncurried/foreign.js", "../output/Data.String.CodePoints/foreign.js", "../output/Data.String.CodeUnits/foreign.js", "../output/Data.String.Unsafe/foreign.js", "../output/Data.String.CodeUnits/index.js", "../output/Data.String.CodePoints/index.js", "../output/Parsing.String/index.js", "../output/Parsing.String.Basic/index.js", "../output/Main/index.js"],
  "sourcesContent": ["// Generated by purs version 0.15.9\nvar semigroupoidFn = {\n    compose: function (f) {\n        return function (g) {\n            return function (x) {\n                return f(g(x));\n            };\n        };\n    }\n};\nvar compose = function (dict) {\n    return dict.compose;\n};\nvar composeFlipped = function (dictSemigroupoid) {\n    var compose1 = compose(dictSemigroupoid);\n    return function (f) {\n        return function (g) {\n            return compose1(g)(f);\n        };\n    };\n};\nexport {\n    compose,\n    composeFlipped,\n    semigroupoidFn\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Semigroupoid from \"../Control.Semigroupoid/index.js\";\nvar identity = function (dict) {\n    return dict.identity;\n};\nvar categoryFn = {\n    identity: function (x) {\n        return x;\n    },\n    Semigroupoid0: function () {\n        return Control_Semigroupoid.semigroupoidFn;\n    }\n};\nexport {\n    identity,\n    categoryFn\n};\nexport {\n    compose\n} from \"../Control.Semigroupoid/index.js\";\n", "// Generated by purs version 0.15.9\nvar otherwise = true;\nexport {\n    otherwise\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nvar on = function (f) {\n    return function (g) {\n        return function (x) {\n            return function (y) {\n                return f(g(x))(g(y));\n            };\n        };\n    };\n};\nvar flip = function (f) {\n    return function (b) {\n        return function (a) {\n            return f(a)(b);\n        };\n    };\n};\nvar $$const = function (a) {\n    return function (v) {\n        return a;\n    };\n};\nvar applyN = function (f) {\n    var go = function ($copy_n) {\n        return function ($copy_acc) {\n            var $tco_var_n = $copy_n;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(n, acc) {\n                if (n <= 0) {\n                    $tco_done = true;\n                    return acc;\n                };\n                if (Data_Boolean.otherwise) {\n                    $tco_var_n = n - 1 | 0;\n                    $copy_acc = f(acc);\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Data.Function (line 107, column 3 - line 109, column 37): \" + [ n.constructor.name, acc.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_n, $copy_acc);\n            };\n            return $tco_result;\n        };\n    };\n    return go;\n};\nvar applyFlipped = function (x) {\n    return function (f) {\n        return f(x);\n    };\n};\nvar apply = function (f) {\n    return function (x) {\n        return f(x);\n    };\n};\nexport {\n    flip,\n    $$const as const,\n    apply,\n    applyFlipped,\n    applyN,\n    on\n};\nexport {\n    compose,\n    identity\n} from \"../Control.Category/index.js\";\n", "export const unit = undefined;\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Semigroupoid from \"../Control.Semigroupoid/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar map = function (dict) {\n    return dict.map;\n};\nvar mapFlipped = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (fa) {\n        return function (f) {\n            return map1(f)(fa);\n        };\n    };\n};\nvar $$void = function (dictFunctor) {\n    return map(dictFunctor)(Data_Function[\"const\"](Data_Unit.unit));\n};\nvar voidLeft = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (f) {\n        return function (x) {\n            return map1(Data_Function[\"const\"](x))(f);\n        };\n    };\n};\nvar voidRight = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (x) {\n        return map1(Data_Function[\"const\"](x));\n    };\n};\nvar functorProxy = {\n    map: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    }\n};\nvar functorFn = {\n    map: /* #__PURE__ */ Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)\n};\nvar functorArray = {\n    map: $foreign.arrayMap\n};\nvar flap = function (dictFunctor) {\n    var map1 = map(dictFunctor);\n    return function (ff) {\n        return function (x) {\n            return map1(function (f) {\n                return f(x);\n            })(ff);\n        };\n    };\n};\nexport {\n    map,\n    mapFlipped,\n    $$void as void,\n    voidRight,\n    voidLeft,\n    flap,\n    functorFn,\n    functorArray,\n    functorProxy\n};\n", "// Generated by purs version 0.15.9\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nvar altArray = {\n    alt: /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray),\n    Functor0: function () {\n        return Data_Functor.functorArray;\n    }\n};\nvar alt = function (dict) {\n    return dict.alt;\n};\nexport {\n    alt,\n    altArray\n};\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar applyProxy = {\n    apply: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    },\n    Functor0: function () {\n        return Data_Functor.functorProxy;\n    }\n};\nvar applyFn = {\n    apply: function (f) {\n        return function (g) {\n            return function (x) {\n                return f(x)(g(x));\n            };\n        };\n    },\n    Functor0: function () {\n        return Data_Functor.functorFn;\n    }\n};\nvar applyArray = {\n    apply: $foreign.arrayApply,\n    Functor0: function () {\n        return Data_Functor.functorArray;\n    }\n};\nvar apply = function (dict) {\n    return dict.apply;\n};\nvar applyFirst = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (a) {\n        return function (b) {\n            return apply1(map(Data_Function[\"const\"])(a))(b);\n        };\n    };\n};\nvar applySecond = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (a) {\n        return function (b) {\n            return apply1(map(Data_Function[\"const\"](identity))(a))(b);\n        };\n    };\n};\nvar lift2 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return apply1(map(f)(a))(b);\n            };\n        };\n    };\n};\nvar lift3 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return apply1(apply1(map(f)(a))(b))(c);\n                };\n            };\n        };\n    };\n};\nvar lift4 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return apply1(apply1(apply1(map(f)(a))(b))(c))(d);\n                    };\n                };\n            };\n        };\n    };\n};\nvar lift5 = function (dictApply) {\n    var apply1 = apply(dictApply);\n    var map = Data_Functor.map(dictApply.Functor0());\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return function (e) {\n                            return apply1(apply1(apply1(apply1(map(f)(a))(b))(c))(d))(e);\n                        };\n                    };\n                };\n            };\n        };\n    };\n};\nexport {\n    apply,\n    applyFirst,\n    applySecond,\n    lift2,\n    lift3,\n    lift4,\n    lift5,\n    applyFn,\n    applyArray,\n    applyProxy\n};\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar pure = function (dict) {\n    return dict.pure;\n};\nvar unless = function (dictApplicative) {\n    var pure1 = pure(dictApplicative);\n    return function (v) {\n        return function (v1) {\n            if (!v) {\n                return v1;\n            };\n            if (v) {\n                return pure1(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar when = function (dictApplicative) {\n    var pure1 = pure(dictApplicative);\n    return function (v) {\n        return function (v1) {\n            if (v) {\n                return v1;\n            };\n            if (!v) {\n                return pure1(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar liftA1 = function (dictApplicative) {\n    var apply = Control_Apply.apply(dictApplicative.Apply0());\n    var pure1 = pure(dictApplicative);\n    return function (f) {\n        return function (a) {\n            return apply(pure1(f))(a);\n        };\n    };\n};\nvar applicativeProxy = {\n    pure: function (v) {\n        return Type_Proxy[\"Proxy\"].value;\n    },\n    Apply0: function () {\n        return Control_Apply.applyProxy;\n    }\n};\nvar applicativeFn = {\n    pure: function (x) {\n        return function (v) {\n            return x;\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyFn;\n    }\n};\nvar applicativeArray = {\n    pure: function (x) {\n        return [ x ];\n    },\n    Apply0: function () {\n        return Control_Apply.applyArray;\n    }\n};\nexport {\n    pure,\n    liftA1,\n    unless,\n    when,\n    applicativeFn,\n    applicativeArray,\n    applicativeProxy\n};\nexport {\n    apply\n} from \"../Control.Apply/index.js\";\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "export const topInt = 2147483647;\nexport const bottomInt = -2147483648;\n\nexport const topChar = String.fromCharCode(65535);\nexport const bottomChar = String.fromCharCode(0);\n\nexport const topNumber = Number.POSITIVE_INFINITY;\nexport const bottomNumber = Number.NEGATIVE_INFINITY;\n", "var unsafeCompareImpl = function (lt) {\n  return function (eq) {\n    return function (gt) {\n      return function (x) {\n        return function (y) {\n          return x < y ? lt : x === y ? eq : gt;\n        };\n      };\n    };\n  };\n};\n\nexport const ordBooleanImpl = unsafeCompareImpl;\nexport const ordIntImpl = unsafeCompareImpl;\nexport const ordNumberImpl = unsafeCompareImpl;\nexport const ordStringImpl = unsafeCompareImpl;\nexport const ordCharImpl = unsafeCompareImpl;\n\nexport const ordArrayImpl = function (f) {\n  return function (xs) {\n    return function (ys) {\n      var i = 0;\n      var xlen = xs.length;\n      var ylen = ys.length;\n      while (i < xlen && i < ylen) {\n        var x = xs[i];\n        var y = ys[i];\n        var o = f(x)(y);\n        if (o !== 0) {\n          return o;\n        }\n        i++;\n      }\n      if (xlen === ylen) {\n        return 0;\n      } else if (xlen > ylen) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n  };\n};\n", "var refEq = function (r1) {\n  return function (r2) {\n    return r1 === r2;\n  };\n};\n\nexport const eqBooleanImpl = refEq;\nexport const eqIntImpl = refEq;\nexport const eqNumberImpl = refEq;\nexport const eqCharImpl = refEq;\nexport const eqStringImpl = refEq;\n\nexport const eqArrayImpl = function (f) {\n  return function (xs) {\n    return function (ys) {\n      if (xs.length !== ys.length) return false;\n      for (var i = 0; i < xs.length; i++) {\n        if (!f(xs[i])(ys[i])) return false;\n      }\n      return true;\n    };\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar eqVoid = {\n    eq: function (v) {\n        return function (v1) {\n            return true;\n        };\n    }\n};\nvar eqUnit = {\n    eq: function (v) {\n        return function (v1) {\n            return true;\n        };\n    }\n};\nvar eqString = {\n    eq: $foreign.eqStringImpl\n};\nvar eqRowNil = {\n    eqRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return true;\n            };\n        };\n    }\n};\nvar eqRecord = function (dict) {\n    return dict.eqRecord;\n};\nvar eqRec = function () {\n    return function (dictEqRecord) {\n        return {\n            eq: eqRecord(dictEqRecord)(Type_Proxy[\"Proxy\"].value)\n        };\n    };\n};\nvar eqProxy = {\n    eq: function (v) {\n        return function (v1) {\n            return true;\n        };\n    }\n};\nvar eqNumber = {\n    eq: $foreign.eqNumberImpl\n};\nvar eqInt = {\n    eq: $foreign.eqIntImpl\n};\nvar eqChar = {\n    eq: $foreign.eqCharImpl\n};\nvar eqBoolean = {\n    eq: $foreign.eqBooleanImpl\n};\nvar eq1 = function (dict) {\n    return dict.eq1;\n};\nvar eq = function (dict) {\n    return dict.eq;\n};\nvar eq2 = /* #__PURE__ */ eq(eqBoolean);\nvar eqArray = function (dictEq) {\n    return {\n        eq: $foreign.eqArrayImpl(eq(dictEq))\n    };\n};\nvar eq1Array = {\n    eq1: function (dictEq) {\n        return eq(eqArray(dictEq));\n    }\n};\nvar eqRowCons = function (dictEqRecord) {\n    var eqRecord1 = eqRecord(dictEqRecord);\n    return function () {\n        return function (dictIsSymbol) {\n            var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n            return function (dictEq) {\n                var eq3 = eq(dictEq);\n                return {\n                    eqRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var tail = eqRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var get = Record_Unsafe.unsafeGet(key);\n                                return eq3(get(ra))(get(rb)) && tail;\n                            };\n                        };\n                    }\n                };\n            };\n        };\n    };\n};\nvar notEq = function (dictEq) {\n    var eq3 = eq(dictEq);\n    return function (x) {\n        return function (y) {\n            return eq2(eq3(x)(y))(false);\n        };\n    };\n};\nvar notEq1 = function (dictEq1) {\n    var eq11 = eq1(dictEq1);\n    return function (dictEq) {\n        var eq12 = eq11(dictEq);\n        return function (x) {\n            return function (y) {\n                return eq2(eq12(x)(y))(false);\n            };\n        };\n    };\n};\nexport {\n    eq,\n    notEq,\n    eq1,\n    notEq1,\n    eqRecord,\n    eqBoolean,\n    eqInt,\n    eqNumber,\n    eqChar,\n    eqString,\n    eqUnit,\n    eqVoid,\n    eqArray,\n    eqRec,\n    eqProxy,\n    eq1Array,\n    eqRowNil,\n    eqRowCons\n};\n", "// Generated by purs version 0.15.9\nvar LT = /* #__PURE__ */ (function () {\n    function LT() {\n\n    };\n    LT.value = new LT();\n    return LT;\n})();\nvar GT = /* #__PURE__ */ (function () {\n    function GT() {\n\n    };\n    GT.value = new GT();\n    return GT;\n})();\nvar EQ = /* #__PURE__ */ (function () {\n    function EQ() {\n\n    };\n    EQ.value = new EQ();\n    return EQ;\n})();\nvar showOrdering = {\n    show: function (v) {\n        if (v instanceof LT) {\n            return \"LT\";\n        };\n        if (v instanceof GT) {\n            return \"GT\";\n        };\n        if (v instanceof EQ) {\n            return \"EQ\";\n        };\n        throw new Error(\"Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): \" + [ v.constructor.name ]);\n    }\n};\nvar semigroupOrdering = {\n    append: function (v) {\n        return function (v1) {\n            if (v instanceof LT) {\n                return LT.value;\n            };\n            if (v instanceof GT) {\n                return GT.value;\n            };\n            if (v instanceof EQ) {\n                return v1;\n            };\n            throw new Error(\"Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    }\n};\nvar invert = function (v) {\n    if (v instanceof GT) {\n        return LT.value;\n    };\n    if (v instanceof EQ) {\n        return EQ.value;\n    };\n    if (v instanceof LT) {\n        return GT.value;\n    };\n    throw new Error(\"Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): \" + [ v.constructor.name ]);\n};\nvar eqOrdering = {\n    eq: function (v) {\n        return function (v1) {\n            if (v instanceof LT && v1 instanceof LT) {\n                return true;\n            };\n            if (v instanceof GT && v1 instanceof GT) {\n                return true;\n            };\n            if (v instanceof EQ && v1 instanceof EQ) {\n                return true;\n            };\n            return false;\n        };\n    }\n};\nexport {\n    LT,\n    GT,\n    EQ,\n    invert,\n    eqOrdering,\n    semigroupOrdering,\n    showOrdering\n};\n", "export const intSub = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x - y | 0;\n  };\n};\n\nexport const numSub = function (n1) {\n  return function (n2) {\n    return n1 - n2;\n  };\n};\n", "export const intAdd = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x + y | 0;\n  };\n};\n\nexport const intMul = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x * y | 0;\n  };\n};\n\nexport const numAdd = function (n1) {\n  return function (n2) {\n    return n1 + n2;\n  };\n};\n\nexport const numMul = function (n1) {\n  return function (n2) {\n    return n1 * n2;\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar zeroRecord = function (dict) {\n    return dict.zeroRecord;\n};\nvar zero = function (dict) {\n    return dict.zero;\n};\nvar semiringUnit = {\n    add: function (v) {\n        return function (v1) {\n            return Data_Unit.unit;\n        };\n    },\n    zero: Data_Unit.unit,\n    mul: function (v) {\n        return function (v1) {\n            return Data_Unit.unit;\n        };\n    },\n    one: Data_Unit.unit\n};\nvar semiringRecordNil = {\n    addRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return {};\n            };\n        };\n    },\n    mulRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return {};\n            };\n        };\n    },\n    oneRecord: function (v) {\n        return function (v1) {\n            return {};\n        };\n    },\n    zeroRecord: function (v) {\n        return function (v1) {\n            return {};\n        };\n    }\n};\nvar semiringProxy = /* #__PURE__ */ (function () {\n    return {\n        add: function (v) {\n            return function (v1) {\n                return Type_Proxy[\"Proxy\"].value;\n            };\n        },\n        mul: function (v) {\n            return function (v1) {\n                return Type_Proxy[\"Proxy\"].value;\n            };\n        },\n        one: Type_Proxy[\"Proxy\"].value,\n        zero: Type_Proxy[\"Proxy\"].value\n    };\n})();\nvar semiringNumber = {\n    add: $foreign.numAdd,\n    zero: 0.0,\n    mul: $foreign.numMul,\n    one: 1.0\n};\nvar semiringInt = {\n    add: $foreign.intAdd,\n    zero: 0,\n    mul: $foreign.intMul,\n    one: 1\n};\nvar oneRecord = function (dict) {\n    return dict.oneRecord;\n};\nvar one = function (dict) {\n    return dict.one;\n};\nvar mulRecord = function (dict) {\n    return dict.mulRecord;\n};\nvar mul = function (dict) {\n    return dict.mul;\n};\nvar addRecord = function (dict) {\n    return dict.addRecord;\n};\nvar semiringRecord = function () {\n    return function (dictSemiringRecord) {\n        return {\n            add: addRecord(dictSemiringRecord)(Type_Proxy[\"Proxy\"].value),\n            mul: mulRecord(dictSemiringRecord)(Type_Proxy[\"Proxy\"].value),\n            one: oneRecord(dictSemiringRecord)(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value),\n            zero: zeroRecord(dictSemiringRecord)(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value)\n        };\n    };\n};\nvar add = function (dict) {\n    return dict.add;\n};\nvar semiringFn = function (dictSemiring) {\n    var add1 = add(dictSemiring);\n    var zero1 = zero(dictSemiring);\n    var mul1 = mul(dictSemiring);\n    var one1 = one(dictSemiring);\n    return {\n        add: function (f) {\n            return function (g) {\n                return function (x) {\n                    return add1(f(x))(g(x));\n                };\n            };\n        },\n        zero: function (v) {\n            return zero1;\n        },\n        mul: function (f) {\n            return function (g) {\n                return function (x) {\n                    return mul1(f(x))(g(x));\n                };\n            };\n        },\n        one: function (v) {\n            return one1;\n        }\n    };\n};\nvar semiringRecordCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function () {\n        return function (dictSemiringRecord) {\n            var addRecord1 = addRecord(dictSemiringRecord);\n            var mulRecord1 = mulRecord(dictSemiringRecord);\n            var oneRecord1 = oneRecord(dictSemiringRecord);\n            var zeroRecord1 = zeroRecord(dictSemiringRecord);\n            return function (dictSemiring) {\n                var add1 = add(dictSemiring);\n                var mul1 = mul(dictSemiring);\n                var one1 = one(dictSemiring);\n                var zero1 = zero(dictSemiring);\n                return {\n                    addRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var tail = addRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                var get = Record_Unsafe.unsafeGet(key);\n                                return insert(add1(get(ra))(get(rb)))(tail);\n                            };\n                        };\n                    },\n                    mulRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var tail = mulRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                var get = Record_Unsafe.unsafeGet(key);\n                                return insert(mul1(get(ra))(get(rb)))(tail);\n                            };\n                        };\n                    },\n                    oneRecord: function (v) {\n                        return function (v1) {\n                            var tail = oneRecord1(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value);\n                            var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            return insert(one1)(tail);\n                        };\n                    },\n                    zeroRecord: function (v) {\n                        return function (v1) {\n                            var tail = zeroRecord1(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value);\n                            var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            return insert(zero1)(tail);\n                        };\n                    }\n                };\n            };\n        };\n    };\n};\nexport {\n    add,\n    zero,\n    mul,\n    one,\n    addRecord,\n    mulRecord,\n    oneRecord,\n    zeroRecord,\n    semiringInt,\n    semiringNumber,\n    semiringFn,\n    semiringUnit,\n    semiringProxy,\n    semiringRecord,\n    semiringRecordNil,\n    semiringRecordCons\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar semiringRecord = /* #__PURE__ */ Data_Semiring.semiringRecord();\nvar subRecord = function (dict) {\n    return dict.subRecord;\n};\nvar sub = function (dict) {\n    return dict.sub;\n};\nvar ringUnit = {\n    sub: function (v) {\n        return function (v1) {\n            return Data_Unit.unit;\n        };\n    },\n    Semiring0: function () {\n        return Data_Semiring.semiringUnit;\n    }\n};\nvar ringRecordNil = {\n    subRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return {};\n            };\n        };\n    },\n    SemiringRecord0: function () {\n        return Data_Semiring.semiringRecordNil;\n    }\n};\nvar ringRecordCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    var semiringRecordCons = Data_Semiring.semiringRecordCons(dictIsSymbol)();\n    return function () {\n        return function (dictRingRecord) {\n            var subRecord1 = subRecord(dictRingRecord);\n            var semiringRecordCons1 = semiringRecordCons(dictRingRecord.SemiringRecord0());\n            return function (dictRing) {\n                var sub1 = sub(dictRing);\n                var semiringRecordCons2 = semiringRecordCons1(dictRing.Semiring0());\n                return {\n                    subRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var tail = subRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                var get = Record_Unsafe.unsafeGet(key);\n                                return insert(sub1(get(ra))(get(rb)))(tail);\n                            };\n                        };\n                    },\n                    SemiringRecord0: function () {\n                        return semiringRecordCons2;\n                    }\n                };\n            };\n        };\n    };\n};\nvar ringRecord = function () {\n    return function (dictRingRecord) {\n        var semiringRecord1 = semiringRecord(dictRingRecord.SemiringRecord0());\n        return {\n            sub: subRecord(dictRingRecord)(Type_Proxy[\"Proxy\"].value),\n            Semiring0: function () {\n                return semiringRecord1;\n            }\n        };\n    };\n};\nvar ringProxy = {\n    sub: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    },\n    Semiring0: function () {\n        return Data_Semiring.semiringProxy;\n    }\n};\nvar ringNumber = {\n    sub: $foreign.numSub,\n    Semiring0: function () {\n        return Data_Semiring.semiringNumber;\n    }\n};\nvar ringInt = {\n    sub: $foreign.intSub,\n    Semiring0: function () {\n        return Data_Semiring.semiringInt;\n    }\n};\nvar ringFn = function (dictRing) {\n    var sub1 = sub(dictRing);\n    var semiringFn = Data_Semiring.semiringFn(dictRing.Semiring0());\n    return {\n        sub: function (f) {\n            return function (g) {\n                return function (x) {\n                    return sub1(f(x))(g(x));\n                };\n            };\n        },\n        Semiring0: function () {\n            return semiringFn;\n        }\n    };\n};\nvar negate = function (dictRing) {\n    var sub1 = sub(dictRing);\n    var zero = Data_Semiring.zero(dictRing.Semiring0());\n    return function (a) {\n        return sub1(zero)(a);\n    };\n};\nexport {\n    sub,\n    negate,\n    subRecord,\n    ringInt,\n    ringNumber,\n    ringUnit,\n    ringFn,\n    ringProxy,\n    ringRecord,\n    ringRecordNil,\n    ringRecordCons\n};\nexport {\n    add,\n    mul,\n    one,\n    zero\n} from \"../Data.Semiring/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Ring from \"../Data.Ring/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar eqRec = /* #__PURE__ */ Data_Eq.eqRec();\nvar notEq = /* #__PURE__ */ Data_Eq.notEq(Data_Ordering.eqOrdering);\nvar ordVoid = {\n    compare: function (v) {\n        return function (v1) {\n            return Data_Ordering.EQ.value;\n        };\n    },\n    Eq0: function () {\n        return Data_Eq.eqVoid;\n    }\n};\nvar ordUnit = {\n    compare: function (v) {\n        return function (v1) {\n            return Data_Ordering.EQ.value;\n        };\n    },\n    Eq0: function () {\n        return Data_Eq.eqUnit;\n    }\n};\nvar ordString = /* #__PURE__ */ (function () {\n    return {\n        compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),\n        Eq0: function () {\n            return Data_Eq.eqString;\n        }\n    };\n})();\nvar ordRecordNil = {\n    compareRecord: function (v) {\n        return function (v1) {\n            return function (v2) {\n                return Data_Ordering.EQ.value;\n            };\n        };\n    },\n    EqRecord0: function () {\n        return Data_Eq.eqRowNil;\n    }\n};\nvar ordProxy = {\n    compare: function (v) {\n        return function (v1) {\n            return Data_Ordering.EQ.value;\n        };\n    },\n    Eq0: function () {\n        return Data_Eq.eqProxy;\n    }\n};\nvar ordOrdering = {\n    compare: function (v) {\n        return function (v1) {\n            if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {\n                return Data_Ordering.EQ.value;\n            };\n            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {\n                return Data_Ordering.EQ.value;\n            };\n            if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {\n                return Data_Ordering.EQ.value;\n            };\n            if (v instanceof Data_Ordering.LT) {\n                return Data_Ordering.LT.value;\n            };\n            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {\n                return Data_Ordering.GT.value;\n            };\n            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {\n                return Data_Ordering.LT.value;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return Data_Ordering.GT.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Ord (line 126, column 1 - line 133, column 20): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Eq0: function () {\n        return Data_Ordering.eqOrdering;\n    }\n};\nvar ordNumber = /* #__PURE__ */ (function () {\n    return {\n        compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),\n        Eq0: function () {\n            return Data_Eq.eqNumber;\n        }\n    };\n})();\nvar ordInt = /* #__PURE__ */ (function () {\n    return {\n        compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),\n        Eq0: function () {\n            return Data_Eq.eqInt;\n        }\n    };\n})();\nvar ordChar = /* #__PURE__ */ (function () {\n    return {\n        compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),\n        Eq0: function () {\n            return Data_Eq.eqChar;\n        }\n    };\n})();\nvar ordBoolean = /* #__PURE__ */ (function () {\n    return {\n        compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),\n        Eq0: function () {\n            return Data_Eq.eqBoolean;\n        }\n    };\n})();\nvar compareRecord = function (dict) {\n    return dict.compareRecord;\n};\nvar ordRecord = function () {\n    return function (dictOrdRecord) {\n        var eqRec1 = eqRec(dictOrdRecord.EqRecord0());\n        return {\n            compare: compareRecord(dictOrdRecord)(Type_Proxy[\"Proxy\"].value),\n            Eq0: function () {\n                return eqRec1;\n            }\n        };\n    };\n};\nvar compare1 = function (dict) {\n    return dict.compare1;\n};\nvar compare = function (dict) {\n    return dict.compare;\n};\nvar compare2 = /* #__PURE__ */ compare(ordInt);\nvar comparing = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (f) {\n        return function (x) {\n            return function (y) {\n                return compare3(f(x))(f(y));\n            };\n        };\n    };\n};\nvar greaterThan = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (a1) {\n        return function (a2) {\n            var v = compare3(a1)(a2);\n            if (v instanceof Data_Ordering.GT) {\n                return true;\n            };\n            return false;\n        };\n    };\n};\nvar greaterThanOrEq = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (a1) {\n        return function (a2) {\n            var v = compare3(a1)(a2);\n            if (v instanceof Data_Ordering.LT) {\n                return false;\n            };\n            return true;\n        };\n    };\n};\nvar lessThan = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (a1) {\n        return function (a2) {\n            var v = compare3(a1)(a2);\n            if (v instanceof Data_Ordering.LT) {\n                return true;\n            };\n            return false;\n        };\n    };\n};\nvar signum = function (dictOrd) {\n    var lessThan1 = lessThan(dictOrd);\n    var greaterThan1 = greaterThan(dictOrd);\n    return function (dictRing) {\n        var Semiring0 = dictRing.Semiring0();\n        var zero = Data_Semiring.zero(Semiring0);\n        var negate1 = Data_Ring.negate(dictRing);\n        var one = Data_Semiring.one(Semiring0);\n        return function (x) {\n            var $89 = lessThan1(x)(zero);\n            if ($89) {\n                return negate1(one);\n            };\n            var $90 = greaterThan1(x)(zero);\n            if ($90) {\n                return one;\n            };\n            return x;\n        };\n    };\n};\nvar lessThanOrEq = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (a1) {\n        return function (a2) {\n            var v = compare3(a1)(a2);\n            if (v instanceof Data_Ordering.GT) {\n                return false;\n            };\n            return true;\n        };\n    };\n};\nvar max = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (x) {\n        return function (y) {\n            var v = compare3(x)(y);\n            if (v instanceof Data_Ordering.LT) {\n                return y;\n            };\n            if (v instanceof Data_Ordering.EQ) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return x;\n            };\n            throw new Error(\"Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): \" + [ v.constructor.name ]);\n        };\n    };\n};\nvar min = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    return function (x) {\n        return function (y) {\n            var v = compare3(x)(y);\n            if (v instanceof Data_Ordering.LT) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.EQ) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return y;\n            };\n            throw new Error(\"Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): \" + [ v.constructor.name ]);\n        };\n    };\n};\nvar ordArray = function (dictOrd) {\n    var compare3 = compare(dictOrd);\n    var eqArray = Data_Eq.eqArray(dictOrd.Eq0());\n    return {\n        compare: (function () {\n            var toDelta = function (x) {\n                return function (y) {\n                    var v = compare3(x)(y);\n                    if (v instanceof Data_Ordering.EQ) {\n                        return 0;\n                    };\n                    if (v instanceof Data_Ordering.LT) {\n                        return 1;\n                    };\n                    if (v instanceof Data_Ordering.GT) {\n                        return -1 | 0;\n                    };\n                    throw new Error(\"Failed pattern match at Data.Ord (line 79, column 7 - line 82, column 17): \" + [ v.constructor.name ]);\n                };\n            };\n            return function (xs) {\n                return function (ys) {\n                    return compare2(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));\n                };\n            };\n        })(),\n        Eq0: function () {\n            return eqArray;\n        }\n    };\n};\nvar ord1Array = {\n    compare1: function (dictOrd) {\n        return compare(ordArray(dictOrd));\n    },\n    Eq10: function () {\n        return Data_Eq.eq1Array;\n    }\n};\nvar ordRecordCons = function (dictOrdRecord) {\n    var compareRecord1 = compareRecord(dictOrdRecord);\n    var eqRowCons = Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())();\n    return function () {\n        return function (dictIsSymbol) {\n            var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n            var eqRowCons1 = eqRowCons(dictIsSymbol);\n            return function (dictOrd) {\n                var compare3 = compare(dictOrd);\n                var eqRowCons2 = eqRowCons1(dictOrd.Eq0());\n                return {\n                    compareRecord: function (v) {\n                        return function (ra) {\n                            return function (rb) {\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var left = compare3(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));\n                                var $95 = notEq(left)(Data_Ordering.EQ.value);\n                                if ($95) {\n                                    return left;\n                                };\n                                return compareRecord1(Type_Proxy[\"Proxy\"].value)(ra)(rb);\n                            };\n                        };\n                    },\n                    EqRecord0: function () {\n                        return eqRowCons2;\n                    }\n                };\n            };\n        };\n    };\n};\nvar clamp = function (dictOrd) {\n    var min1 = min(dictOrd);\n    var max1 = max(dictOrd);\n    return function (low) {\n        return function (hi) {\n            return function (x) {\n                return min1(hi)(max1(low)(x));\n            };\n        };\n    };\n};\nvar between = function (dictOrd) {\n    var lessThan1 = lessThan(dictOrd);\n    var greaterThan1 = greaterThan(dictOrd);\n    return function (low) {\n        return function (hi) {\n            return function (x) {\n                if (lessThan1(x)(low)) {\n                    return false;\n                };\n                if (greaterThan1(x)(hi)) {\n                    return false;\n                };\n                return true;\n            };\n        };\n    };\n};\nvar abs = function (dictOrd) {\n    var greaterThanOrEq1 = greaterThanOrEq(dictOrd);\n    return function (dictRing) {\n        var zero = Data_Semiring.zero(dictRing.Semiring0());\n        var negate1 = Data_Ring.negate(dictRing);\n        return function (x) {\n            var $99 = greaterThanOrEq1(x)(zero);\n            if ($99) {\n                return x;\n            };\n            return negate1(x);\n        };\n    };\n};\nexport {\n    compare,\n    compare1,\n    lessThan,\n    lessThanOrEq,\n    greaterThan,\n    greaterThanOrEq,\n    comparing,\n    min,\n    max,\n    clamp,\n    between,\n    abs,\n    signum,\n    compareRecord,\n    ordBoolean,\n    ordInt,\n    ordNumber,\n    ordString,\n    ordChar,\n    ordUnit,\n    ordVoid,\n    ordProxy,\n    ordArray,\n    ordOrdering,\n    ord1Array,\n    ordRecordNil,\n    ordRecordCons,\n    ordRecord\n};\nexport {\n    EQ,\n    GT,\n    LT\n} from \"../Data.Ordering/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar ordRecord = /* #__PURE__ */ Data_Ord.ordRecord();\nvar topRecord = function (dict) {\n    return dict.topRecord;\n};\nvar top = function (dict) {\n    return dict.top;\n};\nvar boundedUnit = {\n    top: Data_Unit.unit,\n    bottom: Data_Unit.unit,\n    Ord0: function () {\n        return Data_Ord.ordUnit;\n    }\n};\nvar boundedRecordNil = {\n    topRecord: function (v) {\n        return function (v1) {\n            return {};\n        };\n    },\n    bottomRecord: function (v) {\n        return function (v1) {\n            return {};\n        };\n    },\n    OrdRecord0: function () {\n        return Data_Ord.ordRecordNil;\n    }\n};\nvar boundedProxy = /* #__PURE__ */ (function () {\n    return {\n        bottom: Type_Proxy[\"Proxy\"].value,\n        top: Type_Proxy[\"Proxy\"].value,\n        Ord0: function () {\n            return Data_Ord.ordProxy;\n        }\n    };\n})();\nvar boundedOrdering = /* #__PURE__ */ (function () {\n    return {\n        top: Data_Ordering.GT.value,\n        bottom: Data_Ordering.LT.value,\n        Ord0: function () {\n            return Data_Ord.ordOrdering;\n        }\n    };\n})();\nvar boundedNumber = {\n    top: $foreign.topNumber,\n    bottom: $foreign.bottomNumber,\n    Ord0: function () {\n        return Data_Ord.ordNumber;\n    }\n};\nvar boundedInt = {\n    top: $foreign.topInt,\n    bottom: $foreign.bottomInt,\n    Ord0: function () {\n        return Data_Ord.ordInt;\n    }\n};\nvar boundedChar = {\n    top: $foreign.topChar,\n    bottom: $foreign.bottomChar,\n    Ord0: function () {\n        return Data_Ord.ordChar;\n    }\n};\nvar boundedBoolean = {\n    top: true,\n    bottom: false,\n    Ord0: function () {\n        return Data_Ord.ordBoolean;\n    }\n};\nvar bottomRecord = function (dict) {\n    return dict.bottomRecord;\n};\nvar boundedRecord = function () {\n    return function (dictBoundedRecord) {\n        var ordRecord1 = ordRecord(dictBoundedRecord.OrdRecord0());\n        return {\n            top: topRecord(dictBoundedRecord)(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value),\n            bottom: bottomRecord(dictBoundedRecord)(Type_Proxy[\"Proxy\"].value)(Type_Proxy[\"Proxy\"].value),\n            Ord0: function () {\n                return ordRecord1;\n            }\n        };\n    };\n};\nvar bottom = function (dict) {\n    return dict.bottom;\n};\nvar boundedRecordCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function (dictBounded) {\n        var top1 = top(dictBounded);\n        var bottom1 = bottom(dictBounded);\n        var Ord0 = dictBounded.Ord0();\n        return function () {\n            return function () {\n                return function (dictBoundedRecord) {\n                    var topRecord1 = topRecord(dictBoundedRecord);\n                    var bottomRecord1 = bottomRecord(dictBoundedRecord);\n                    var ordRecordCons = Data_Ord.ordRecordCons(dictBoundedRecord.OrdRecord0())()(dictIsSymbol)(Ord0);\n                    return {\n                        topRecord: function (v) {\n                            return function (rowProxy) {\n                                var tail = topRecord1(Type_Proxy[\"Proxy\"].value)(rowProxy);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                return insert(top1)(tail);\n                            };\n                        },\n                        bottomRecord: function (v) {\n                            return function (rowProxy) {\n                                var tail = bottomRecord1(Type_Proxy[\"Proxy\"].value)(rowProxy);\n                                var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                                var insert = Record_Unsafe.unsafeSet(key);\n                                return insert(bottom1)(tail);\n                            };\n                        },\n                        OrdRecord0: function () {\n                            return ordRecordCons;\n                        }\n                    };\n                };\n            };\n        };\n    };\n};\nexport {\n    bottom,\n    top,\n    bottomRecord,\n    topRecord,\n    boundedBoolean,\n    boundedInt,\n    boundedChar,\n    boundedOrdering,\n    boundedUnit,\n    boundedNumber,\n    boundedProxy,\n    boundedRecordNil,\n    boundedRecordCons,\n    boundedRecord\n};\nexport {\n    EQ,\n    GT,\n    LT,\n    compare\n} from \"../Data.Ord/index.js\";\n", "export const showIntImpl = function (n) {\n  return n.toString();\n};\n\nexport const showNumberImpl = function (n) {\n  var str = n.toString();\n  return isNaN(str + \".0\") ? str : str + \".0\";\n};\n\nexport const showCharImpl = function (c) {\n  var code = c.charCodeAt(0);\n  if (code < 0x20 || code === 0x7F) {\n    switch (c) {\n      case \"\\x07\": return \"'\\\\a'\";\n      case \"\\b\": return \"'\\\\b'\";\n      case \"\\f\": return \"'\\\\f'\";\n      case \"\\n\": return \"'\\\\n'\";\n      case \"\\r\": return \"'\\\\r'\";\n      case \"\\t\": return \"'\\\\t'\";\n      case \"\\v\": return \"'\\\\v'\";\n    }\n    return \"'\\\\\" + code.toString(10) + \"'\";\n  }\n  return c === \"'\" || c === \"\\\\\" ? \"'\\\\\" + c + \"'\" : \"'\" + c + \"'\";\n};\n\nexport const showStringImpl = function (s) {\n  var l = s.length;\n  return \"\\\"\" + s.replace(\n    /[\\0-\\x1F\\x7F\"\\\\]/g, // eslint-disable-line no-control-regex\n    function (c, i) {\n      switch (c) {\n        case \"\\\"\":\n        case \"\\\\\":\n          return \"\\\\\" + c;\n        case \"\\x07\": return \"\\\\a\";\n        case \"\\b\": return \"\\\\b\";\n        case \"\\f\": return \"\\\\f\";\n        case \"\\n\": return \"\\\\n\";\n        case \"\\r\": return \"\\\\r\";\n        case \"\\t\": return \"\\\\t\";\n        case \"\\v\": return \"\\\\v\";\n      }\n      var k = i + 1;\n      var empty = k < l && s[k] >= \"0\" && s[k] <= \"9\" ? \"\\\\&\" : \"\";\n      return \"\\\\\" + c.charCodeAt(0).toString(10) + empty;\n    }\n  ) + \"\\\"\";\n};\n\nexport const showArrayImpl = function (f) {\n  return function (xs) {\n    var ss = [];\n    for (var i = 0, l = xs.length; i < l; i++) {\n      ss[i] = f(xs[i]);\n    }\n    return \"[\" + ss.join(\",\") + \"]\";\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Symbol from \"../Data.Symbol/index.js\";\nimport * as Data_Void from \"../Data.Void/index.js\";\nimport * as Record_Unsafe from \"../Record.Unsafe/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar showVoid = {\n    show: Data_Void.absurd\n};\nvar showUnit = {\n    show: function (v) {\n        return \"unit\";\n    }\n};\nvar showString = {\n    show: $foreign.showStringImpl\n};\nvar showRecordFieldsNil = {\n    showRecordFields: function (v) {\n        return function (v1) {\n            return \"\";\n        };\n    }\n};\nvar showRecordFields = function (dict) {\n    return dict.showRecordFields;\n};\nvar showRecord = function () {\n    return function () {\n        return function (dictShowRecordFields) {\n            var showRecordFields1 = showRecordFields(dictShowRecordFields);\n            return {\n                show: function (record) {\n                    return \"{\" + (showRecordFields1(Type_Proxy[\"Proxy\"].value)(record) + \"}\");\n                }\n            };\n        };\n    };\n};\nvar showProxy = {\n    show: function (v) {\n        return \"Proxy\";\n    }\n};\nvar showNumber = {\n    show: $foreign.showNumberImpl\n};\nvar showInt = {\n    show: $foreign.showIntImpl\n};\nvar showChar = {\n    show: $foreign.showCharImpl\n};\nvar showBoolean = {\n    show: function (v) {\n        if (v) {\n            return \"true\";\n        };\n        if (!v) {\n            return \"false\";\n        };\n        throw new Error(\"Failed pattern match at Data.Show (line 29, column 1 - line 31, column 23): \" + [ v.constructor.name ]);\n    }\n};\nvar show = function (dict) {\n    return dict.show;\n};\nvar showArray = function (dictShow) {\n    return {\n        show: $foreign.showArrayImpl(show(dictShow))\n    };\n};\nvar showRecordFieldsCons = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function (dictShowRecordFields) {\n        var showRecordFields1 = showRecordFields(dictShowRecordFields);\n        return function (dictShow) {\n            var show1 = show(dictShow);\n            return {\n                showRecordFields: function (v) {\n                    return function (record) {\n                        var tail = showRecordFields1(Type_Proxy[\"Proxy\"].value)(record);\n                        var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                        var focus = Record_Unsafe.unsafeGet(key)(record);\n                        return \" \" + (key + (\": \" + (show1(focus) + (\",\" + tail))));\n                    };\n                }\n            };\n        };\n    };\n};\nvar showRecordFieldsConsNil = function (dictIsSymbol) {\n    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);\n    return function (dictShow) {\n        var show1 = show(dictShow);\n        return {\n            showRecordFields: function (v) {\n                return function (record) {\n                    var key = reflectSymbol(Type_Proxy[\"Proxy\"].value);\n                    var focus = Record_Unsafe.unsafeGet(key)(record);\n                    return \" \" + (key + (\": \" + (show1(focus) + \" \")));\n                };\n            }\n        };\n    };\n};\nexport {\n    show,\n    showRecordFields,\n    showUnit,\n    showBoolean,\n    showInt,\n    showNumber,\n    showChar,\n    showString,\n    showArray,\n    showProxy,\n    showVoid,\n    showRecord,\n    showRecordFieldsNil,\n    showRecordFieldsConsNil,\n    showRecordFieldsCons\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Functor_Invariant from \"../Data.Functor.Invariant/index.js\";\nimport * as Data_Generic_Rep from \"../Data.Generic.Rep/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar Nothing = /* #__PURE__ */ (function () {\n    function Nothing() {\n\n    };\n    Nothing.value = new Nothing();\n    return Nothing;\n})();\nvar Just = /* #__PURE__ */ (function () {\n    function Just(value0) {\n        this.value0 = value0;\n    };\n    Just.create = function (value0) {\n        return new Just(value0);\n    };\n    return Just;\n})();\nvar showMaybe = function (dictShow) {\n    var show = Data_Show.show(dictShow);\n    return {\n        show: function (v) {\n            if (v instanceof Just) {\n                return \"(Just \" + (show(v.value0) + \")\");\n            };\n            if (v instanceof Nothing) {\n                return \"Nothing\";\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 223, column 1 - line 225, column 28): \" + [ v.constructor.name ]);\n        }\n    };\n};\nvar semigroupMaybe = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    return {\n        append: function (v) {\n            return function (v1) {\n                if (v instanceof Nothing) {\n                    return v1;\n                };\n                if (v1 instanceof Nothing) {\n                    return v;\n                };\n                if (v instanceof Just && v1 instanceof Just) {\n                    return new Just(append1(v.value0)(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 182, column 1 - line 185, column 43): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        }\n    };\n};\nvar optional = function (dictAlt) {\n    var alt = Control_Alt.alt(dictAlt);\n    var map1 = Data_Functor.map(dictAlt.Functor0());\n    return function (dictApplicative) {\n        var pure = Control_Applicative.pure(dictApplicative);\n        return function (a) {\n            return alt(map1(Just.create)(a))(pure(Nothing.value));\n        };\n    };\n};\nvar monoidMaybe = function (dictSemigroup) {\n    var semigroupMaybe1 = semigroupMaybe(dictSemigroup);\n    return {\n        mempty: Nothing.value,\n        Semigroup0: function () {\n            return semigroupMaybe1;\n        }\n    };\n};\nvar maybe$prime = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2 instanceof Nothing) {\n                return v(Data_Unit.unit);\n            };\n            if (v2 instanceof Just) {\n                return v1(v2.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 250, column 1 - line 250, column 62): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n        };\n    };\n};\nvar maybe = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2 instanceof Nothing) {\n                return v;\n            };\n            if (v2 instanceof Just) {\n                return v1(v2.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n        };\n    };\n};\nvar isNothing = /* #__PURE__ */ maybe(true)(/* #__PURE__ */ Data_Function[\"const\"](false));\nvar isJust = /* #__PURE__ */ maybe(false)(/* #__PURE__ */ Data_Function[\"const\"](true));\nvar genericMaybe = {\n    to: function (x) {\n        if (x instanceof Data_Generic_Rep.Inl) {\n            return Nothing.value;\n        };\n        if (x instanceof Data_Generic_Rep.Inr) {\n            return new Just(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52): \" + [ x.constructor.name ]);\n    },\n    from: function (x) {\n        if (x instanceof Nothing) {\n            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);\n        };\n        if (x instanceof Just) {\n            return new Data_Generic_Rep.Inr(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 227, column 1 - line 227, column 52): \" + [ x.constructor.name ]);\n    }\n};\nvar functorMaybe = {\n    map: function (v) {\n        return function (v1) {\n            if (v1 instanceof Just) {\n                return new Just(v(v1.value0));\n            };\n            return Nothing.value;\n        };\n    }\n};\nvar map = /* #__PURE__ */ Data_Functor.map(functorMaybe);\nvar invariantMaybe = {\n    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorMaybe)\n};\nvar fromMaybe$prime = function (a) {\n    return maybe$prime(a)(identity);\n};\nvar fromMaybe = function (a) {\n    return maybe(a)(identity);\n};\nvar fromJust = function () {\n    return function (v) {\n        if (v instanceof Just) {\n            return v.value0;\n        };\n        throw new Error(\"Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): \" + [ v.constructor.name ]);\n    };\n};\nvar extendMaybe = {\n    extend: function (v) {\n        return function (v1) {\n            if (v1 instanceof Nothing) {\n                return Nothing.value;\n            };\n            return new Just(v(v1));\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar eqMaybe = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    return {\n        eq: function (x) {\n            return function (y) {\n                if (x instanceof Nothing && y instanceof Nothing) {\n                    return true;\n                };\n                if (x instanceof Just && y instanceof Just) {\n                    return eq(x.value0)(y.value0);\n                };\n                return false;\n            };\n        }\n    };\n};\nvar ordMaybe = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    var eqMaybe1 = eqMaybe(dictOrd.Eq0());\n    return {\n        compare: function (x) {\n            return function (y) {\n                if (x instanceof Nothing && y instanceof Nothing) {\n                    return Data_Ordering.EQ.value;\n                };\n                if (x instanceof Nothing) {\n                    return Data_Ordering.LT.value;\n                };\n                if (y instanceof Nothing) {\n                    return Data_Ordering.GT.value;\n                };\n                if (x instanceof Just && y instanceof Just) {\n                    return compare(x.value0)(y.value0);\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 0, column 0 - line 0, column 0): \" + [ x.constructor.name, y.constructor.name ]);\n            };\n        },\n        Eq0: function () {\n            return eqMaybe1;\n        }\n    };\n};\nvar eq1Maybe = {\n    eq1: function (dictEq) {\n        return Data_Eq.eq(eqMaybe(dictEq));\n    }\n};\nvar ord1Maybe = {\n    compare1: function (dictOrd) {\n        return Data_Ord.compare(ordMaybe(dictOrd));\n    },\n    Eq10: function () {\n        return eq1Maybe;\n    }\n};\nvar boundedMaybe = function (dictBounded) {\n    var ordMaybe1 = ordMaybe(dictBounded.Ord0());\n    return {\n        top: new Just(Data_Bounded.top(dictBounded)),\n        bottom: Nothing.value,\n        Ord0: function () {\n            return ordMaybe1;\n        }\n    };\n};\nvar applyMaybe = {\n    apply: function (v) {\n        return function (v1) {\n            if (v instanceof Just) {\n                return map(v.value0)(v1);\n            };\n            if (v instanceof Nothing) {\n                return Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar apply = /* #__PURE__ */ Control_Apply.apply(applyMaybe);\nvar bindMaybe = {\n    bind: function (v) {\n        return function (v1) {\n            if (v instanceof Just) {\n                return v1(v.value0);\n            };\n            if (v instanceof Nothing) {\n                return Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Apply0: function () {\n        return applyMaybe;\n    }\n};\nvar semiringMaybe = function (dictSemiring) {\n    var add = Data_Semiring.add(dictSemiring);\n    var mul = Data_Semiring.mul(dictSemiring);\n    return {\n        zero: Nothing.value,\n        one: new Just(Data_Semiring.one(dictSemiring)),\n        add: function (v) {\n            return function (v1) {\n                if (v instanceof Nothing) {\n                    return v1;\n                };\n                if (v1 instanceof Nothing) {\n                    return v;\n                };\n                if (v instanceof Just && v1 instanceof Just) {\n                    return new Just(add(v.value0)(v1.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Maybe (line 190, column 1 - line 198, column 28): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        },\n        mul: function (x) {\n            return function (y) {\n                return apply(map(mul)(x))(y);\n            };\n        }\n    };\n};\nvar applicativeMaybe = /* #__PURE__ */ (function () {\n    return {\n        pure: Just.create,\n        Apply0: function () {\n            return applyMaybe;\n        }\n    };\n})();\nvar monadMaybe = {\n    Applicative0: function () {\n        return applicativeMaybe;\n    },\n    Bind1: function () {\n        return bindMaybe;\n    }\n};\nvar altMaybe = {\n    alt: function (v) {\n        return function (v1) {\n            if (v instanceof Nothing) {\n                return v1;\n            };\n            return v;\n        };\n    },\n    Functor0: function () {\n        return functorMaybe;\n    }\n};\nvar plusMaybe = /* #__PURE__ */ (function () {\n    return {\n        empty: Nothing.value,\n        Alt0: function () {\n            return altMaybe;\n        }\n    };\n})();\nvar alternativeMaybe = {\n    Applicative0: function () {\n        return applicativeMaybe;\n    },\n    Plus1: function () {\n        return plusMaybe;\n    }\n};\nexport {\n    Nothing,\n    Just,\n    maybe,\n    maybe$prime,\n    fromMaybe,\n    fromMaybe$prime,\n    isJust,\n    isNothing,\n    fromJust,\n    optional,\n    functorMaybe,\n    applyMaybe,\n    applicativeMaybe,\n    altMaybe,\n    plusMaybe,\n    alternativeMaybe,\n    bindMaybe,\n    monadMaybe,\n    extendMaybe,\n    invariantMaybe,\n    semigroupMaybe,\n    monoidMaybe,\n    semiringMaybe,\n    eqMaybe,\n    eq1Maybe,\n    ordMaybe,\n    ord1Maybe,\n    boundedMaybe,\n    showMaybe,\n    genericMaybe\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Functor_Invariant from \"../Data.Functor.Invariant/index.js\";\nimport * as Data_Generic_Rep from \"../Data.Generic.Rep/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar Left = /* #__PURE__ */ (function () {\n    function Left(value0) {\n        this.value0 = value0;\n    };\n    Left.create = function (value0) {\n        return new Left(value0);\n    };\n    return Left;\n})();\nvar Right = /* #__PURE__ */ (function () {\n    function Right(value0) {\n        this.value0 = value0;\n    };\n    Right.create = function (value0) {\n        return new Right(value0);\n    };\n    return Right;\n})();\nvar showEither = function (dictShow) {\n    var show = Data_Show.show(dictShow);\n    return function (dictShow1) {\n        var show1 = Data_Show.show(dictShow1);\n        return {\n            show: function (v) {\n                if (v instanceof Left) {\n                    return \"(Left \" + (show(v.value0) + \")\");\n                };\n                if (v instanceof Right) {\n                    return \"(Right \" + (show1(v.value0) + \")\");\n                };\n                throw new Error(\"Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): \" + [ v.constructor.name ]);\n            }\n        };\n    };\n};\nvar note$prime = function (f) {\n    return Data_Maybe[\"maybe$prime\"](function ($138) {\n        return Left.create(f($138));\n    })(Right.create);\n};\nvar note = function (a) {\n    return Data_Maybe.maybe(new Left(a))(Right.create);\n};\nvar genericEither = {\n    to: function (x) {\n        if (x instanceof Data_Generic_Rep.Inl) {\n            return new Left(x.value0);\n        };\n        if (x instanceof Data_Generic_Rep.Inr) {\n            return new Right(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): \" + [ x.constructor.name ]);\n    },\n    from: function (x) {\n        if (x instanceof Left) {\n            return new Data_Generic_Rep.Inl(x.value0);\n        };\n        if (x instanceof Right) {\n            return new Data_Generic_Rep.Inr(x.value0);\n        };\n        throw new Error(\"Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): \" + [ x.constructor.name ]);\n    }\n};\nvar functorEither = {\n    map: function (f) {\n        return function (m) {\n            if (m instanceof Left) {\n                return new Left(m.value0);\n            };\n            if (m instanceof Right) {\n                return new Right(f(m.value0));\n            };\n            throw new Error(\"Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): \" + [ m.constructor.name ]);\n        };\n    }\n};\nvar map = /* #__PURE__ */ Data_Functor.map(functorEither);\nvar invariantEither = {\n    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorEither)\n};\nvar fromRight$prime = function (v) {\n    return function (v1) {\n        if (v1 instanceof Right) {\n            return v1.value0;\n        };\n        return v(Data_Unit.unit);\n    };\n};\nvar fromRight = function (v) {\n    return function (v1) {\n        if (v1 instanceof Right) {\n            return v1.value0;\n        };\n        return v;\n    };\n};\nvar fromLeft$prime = function (v) {\n    return function (v1) {\n        if (v1 instanceof Left) {\n            return v1.value0;\n        };\n        return v(Data_Unit.unit);\n    };\n};\nvar fromLeft = function (v) {\n    return function (v1) {\n        if (v1 instanceof Left) {\n            return v1.value0;\n        };\n        return v;\n    };\n};\nvar extendEither = {\n    extend: function (v) {\n        return function (v1) {\n            if (v1 instanceof Left) {\n                return new Left(v1.value0);\n            };\n            return new Right(v(v1));\n        };\n    },\n    Functor0: function () {\n        return functorEither;\n    }\n};\nvar eqEither = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    return function (dictEq1) {\n        var eq1 = Data_Eq.eq(dictEq1);\n        return {\n            eq: function (x) {\n                return function (y) {\n                    if (x instanceof Left && y instanceof Left) {\n                        return eq(x.value0)(y.value0);\n                    };\n                    if (x instanceof Right && y instanceof Right) {\n                        return eq1(x.value0)(y.value0);\n                    };\n                    return false;\n                };\n            }\n        };\n    };\n};\nvar ordEither = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    var eqEither1 = eqEither(dictOrd.Eq0());\n    return function (dictOrd1) {\n        var compare1 = Data_Ord.compare(dictOrd1);\n        var eqEither2 = eqEither1(dictOrd1.Eq0());\n        return {\n            compare: function (x) {\n                return function (y) {\n                    if (x instanceof Left && y instanceof Left) {\n                        return compare(x.value0)(y.value0);\n                    };\n                    if (x instanceof Left) {\n                        return Data_Ordering.LT.value;\n                    };\n                    if (y instanceof Left) {\n                        return Data_Ordering.GT.value;\n                    };\n                    if (x instanceof Right && y instanceof Right) {\n                        return compare1(x.value0)(y.value0);\n                    };\n                    throw new Error(\"Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): \" + [ x.constructor.name, y.constructor.name ]);\n                };\n            },\n            Eq0: function () {\n                return eqEither2;\n            }\n        };\n    };\n};\nvar eq1Either = function (dictEq) {\n    var eqEither1 = eqEither(dictEq);\n    return {\n        eq1: function (dictEq1) {\n            return Data_Eq.eq(eqEither1(dictEq1));\n        }\n    };\n};\nvar ord1Either = function (dictOrd) {\n    var ordEither1 = ordEither(dictOrd);\n    var eq1Either1 = eq1Either(dictOrd.Eq0());\n    return {\n        compare1: function (dictOrd1) {\n            return Data_Ord.compare(ordEither1(dictOrd1));\n        },\n        Eq10: function () {\n            return eq1Either1;\n        }\n    };\n};\nvar either = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2 instanceof Left) {\n                return v(v2.value0);\n            };\n            if (v2 instanceof Right) {\n                return v1(v2.value0);\n            };\n            throw new Error(\"Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n        };\n    };\n};\nvar hush = /* #__PURE__ */ (function () {\n    return either(Data_Function[\"const\"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);\n})();\nvar isLeft = /* #__PURE__ */ either(/* #__PURE__ */ Data_Function[\"const\"](true))(/* #__PURE__ */ Data_Function[\"const\"](false));\nvar isRight = /* #__PURE__ */ either(/* #__PURE__ */ Data_Function[\"const\"](false))(/* #__PURE__ */ Data_Function[\"const\"](true));\nvar choose = function (dictAlt) {\n    var alt = Control_Alt.alt(dictAlt);\n    var map1 = Data_Functor.map(dictAlt.Functor0());\n    return function (a) {\n        return function (b) {\n            return alt(map1(Left.create)(a))(map1(Right.create)(b));\n        };\n    };\n};\nvar boundedEither = function (dictBounded) {\n    var bottom = Data_Bounded.bottom(dictBounded);\n    var ordEither1 = ordEither(dictBounded.Ord0());\n    return function (dictBounded1) {\n        var ordEither2 = ordEither1(dictBounded1.Ord0());\n        return {\n            top: new Right(Data_Bounded.top(dictBounded1)),\n            bottom: new Left(bottom),\n            Ord0: function () {\n                return ordEither2;\n            }\n        };\n    };\n};\nvar blush = /* #__PURE__ */ (function () {\n    return either(Data_Maybe.Just.create)(Data_Function[\"const\"](Data_Maybe.Nothing.value));\n})();\nvar applyEither = {\n    apply: function (v) {\n        return function (v1) {\n            if (v instanceof Left) {\n                return new Left(v.value0);\n            };\n            if (v instanceof Right) {\n                return map(v.value0)(v1);\n            };\n            throw new Error(\"Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    Functor0: function () {\n        return functorEither;\n    }\n};\nvar apply = /* #__PURE__ */ Control_Apply.apply(applyEither);\nvar bindEither = {\n    bind: /* #__PURE__ */ either(function (e) {\n        return function (v) {\n            return new Left(e);\n        };\n    })(function (a) {\n        return function (f) {\n            return f(a);\n        };\n    }),\n    Apply0: function () {\n        return applyEither;\n    }\n};\nvar semigroupEither = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    return {\n        append: function (x) {\n            return function (y) {\n                return apply(map(append1)(x))(y);\n            };\n        }\n    };\n};\nvar applicativeEither = /* #__PURE__ */ (function () {\n    return {\n        pure: Right.create,\n        Apply0: function () {\n            return applyEither;\n        }\n    };\n})();\nvar monadEither = {\n    Applicative0: function () {\n        return applicativeEither;\n    },\n    Bind1: function () {\n        return bindEither;\n    }\n};\nvar altEither = {\n    alt: function (v) {\n        return function (v1) {\n            if (v instanceof Left) {\n                return v1;\n            };\n            return v;\n        };\n    },\n    Functor0: function () {\n        return functorEither;\n    }\n};\nexport {\n    Left,\n    Right,\n    either,\n    choose,\n    isLeft,\n    isRight,\n    fromLeft,\n    fromLeft$prime,\n    fromRight,\n    fromRight$prime,\n    note,\n    note$prime,\n    hush,\n    blush,\n    functorEither,\n    genericEither,\n    invariantEither,\n    applyEither,\n    applicativeEither,\n    altEither,\n    bindEither,\n    monadEither,\n    extendEither,\n    showEither,\n    eqEither,\n    eq1Either,\n    ordEither,\n    ord1Either,\n    boundedEither,\n    semigroupEither\n};\n", "// Generated by purs version 0.15.9\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar $runtime_lazy = function (name, moduleName, init) {\n    var state = 0;\n    var val;\n    return function (lineNumber) {\n        if (state === 2) return val;\n        if (state === 1) throw new ReferenceError(name + \" was needed before it finished initializing (module \" + moduleName + \", line \" + lineNumber + \")\", moduleName, lineNumber);\n        state = 1;\n        val = init();\n        state = 2;\n        return val;\n    };\n};\nvar lazyUnit = {\n    defer: function (v) {\n        return Data_Unit.unit;\n    }\n};\nvar lazyFn = {\n    defer: function (f) {\n        return function (x) {\n            return f(Data_Unit.unit)(x);\n        };\n    }\n};\nvar defer = function (dict) {\n    return dict.defer;\n};\nvar fix = function (dictLazy) {\n    var defer1 = defer(dictLazy);\n    return function (f) {\n        var $lazy_go = $runtime_lazy(\"go\", \"Control.Lazy\", function () {\n            return defer1(function (v) {\n                return f($lazy_go(25));\n            });\n        });\n        var go = $lazy_go(25);\n        return go;\n    };\n};\nexport {\n    defer,\n    fix,\n    lazyFn,\n    lazyUnit\n};\n", "export const intDegree = function (x) {\n  return Math.min(Math.abs(x), 2147483647);\n};\n\n// See the Euclidean definition in\n// https://en.m.wikipedia.org/wiki/Modulo_operation.\nexport const intDiv = function (x) {\n  return function (y) {\n    if (y === 0) return 0;\n    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);\n  };\n};\n\nexport const intMod = function (x) {\n  return function (y) {\n    if (y === 0) return 0;\n    var yy = Math.abs(y);\n    return ((x % yy) + yy) % yy;\n  };\n};\n\nexport const numDiv = function (n1) {\n  return function (n2) {\n    return n1 / n2;\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as Data_Ring from \"../Data.Ring/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nvar ringRecord = /* #__PURE__ */ Data_Ring.ringRecord();\nvar commutativeRingUnit = {\n    Ring0: function () {\n        return Data_Ring.ringUnit;\n    }\n};\nvar commutativeRingRecordNil = {\n    RingRecord0: function () {\n        return Data_Ring.ringRecordNil;\n    }\n};\nvar commutativeRingRecordCons = function (dictIsSymbol) {\n    var ringRecordCons = Data_Ring.ringRecordCons(dictIsSymbol)();\n    return function () {\n        return function (dictCommutativeRingRecord) {\n            var ringRecordCons1 = ringRecordCons(dictCommutativeRingRecord.RingRecord0());\n            return function (dictCommutativeRing) {\n                var ringRecordCons2 = ringRecordCons1(dictCommutativeRing.Ring0());\n                return {\n                    RingRecord0: function () {\n                        return ringRecordCons2;\n                    }\n                };\n            };\n        };\n    };\n};\nvar commutativeRingRecord = function () {\n    return function (dictCommutativeRingRecord) {\n        var ringRecord1 = ringRecord(dictCommutativeRingRecord.RingRecord0());\n        return {\n            Ring0: function () {\n                return ringRecord1;\n            }\n        };\n    };\n};\nvar commutativeRingProxy = {\n    Ring0: function () {\n        return Data_Ring.ringProxy;\n    }\n};\nvar commutativeRingNumber = {\n    Ring0: function () {\n        return Data_Ring.ringNumber;\n    }\n};\nvar commutativeRingInt = {\n    Ring0: function () {\n        return Data_Ring.ringInt;\n    }\n};\nvar commutativeRingFn = function (dictCommutativeRing) {\n    var ringFn = Data_Ring.ringFn(dictCommutativeRing.Ring0());\n    return {\n        Ring0: function () {\n            return ringFn;\n        }\n    };\n};\nexport {\n    commutativeRingInt,\n    commutativeRingNumber,\n    commutativeRingUnit,\n    commutativeRingFn,\n    commutativeRingRecord,\n    commutativeRingProxy,\n    commutativeRingRecordNil,\n    commutativeRingRecordCons\n};\nexport {\n    add,\n    mul,\n    one,\n    zero\n} from \"../Data.Semiring/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_CommutativeRing from \"../Data.CommutativeRing/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Ring from \"../Data.Ring/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nvar mod = function (dict) {\n    return dict.mod;\n};\nvar gcd = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    return function (dictEuclideanRing) {\n        var zero = Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());\n        var mod1 = mod(dictEuclideanRing);\n        return function (a) {\n            return function (b) {\n                var $24 = eq(b)(zero);\n                if ($24) {\n                    return a;\n                };\n                return gcd(dictEq)(dictEuclideanRing)(b)(mod1(a)(b));\n            };\n        };\n    };\n};\nvar euclideanRingNumber = {\n    degree: function (v) {\n        return 1;\n    },\n    div: $foreign.numDiv,\n    mod: function (v) {\n        return function (v1) {\n            return 0.0;\n        };\n    },\n    CommutativeRing0: function () {\n        return Data_CommutativeRing.commutativeRingNumber;\n    }\n};\nvar euclideanRingInt = {\n    degree: $foreign.intDegree,\n    div: $foreign.intDiv,\n    mod: $foreign.intMod,\n    CommutativeRing0: function () {\n        return Data_CommutativeRing.commutativeRingInt;\n    }\n};\nvar div = function (dict) {\n    return dict.div;\n};\nvar lcm = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    var gcd1 = gcd(dictEq);\n    return function (dictEuclideanRing) {\n        var Semiring0 = ((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0();\n        var zero = Data_Semiring.zero(Semiring0);\n        var div1 = div(dictEuclideanRing);\n        var mul = Data_Semiring.mul(Semiring0);\n        var gcd2 = gcd1(dictEuclideanRing);\n        return function (a) {\n            return function (b) {\n                var $26 = eq(a)(zero) || eq(b)(zero);\n                if ($26) {\n                    return zero;\n                };\n                return div1(mul(a)(b))(gcd2(a)(b));\n            };\n        };\n    };\n};\nvar degree = function (dict) {\n    return dict.degree;\n};\nexport {\n    degree,\n    div,\n    mod,\n    gcd,\n    lcm,\n    euclideanRingInt,\n    euclideanRingNumber\n};\nexport {\n    sub\n} from \"../Data.Ring/index.js\";\nexport {\n    add,\n    mul,\n    one,\n    zero\n} from \"../Data.Semiring/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as Control_Lazy from \"../Control.Lazy/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Functor_Invariant from \"../Data.Functor.Invariant/index.js\";\nimport * as Data_Generic_Rep from \"../Data.Generic.Rep/index.js\";\nimport * as Data_HeytingAlgebra from \"../Data.HeytingAlgebra/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Ring from \"../Data.Ring/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Semiring from \"../Data.Semiring/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar Tuple = /* #__PURE__ */ (function () {\n    function Tuple(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    Tuple.create = function (value0) {\n        return function (value1) {\n            return new Tuple(value0, value1);\n        };\n    };\n    return Tuple;\n})();\nvar uncurry = function (f) {\n    return function (v) {\n        return f(v.value0)(v.value1);\n    };\n};\nvar swap = function (v) {\n    return new Tuple(v.value1, v.value0);\n};\nvar snd = function (v) {\n    return v.value1;\n};\nvar showTuple = function (dictShow) {\n    var show = Data_Show.show(dictShow);\n    return function (dictShow1) {\n        var show1 = Data_Show.show(dictShow1);\n        return {\n            show: function (v) {\n                return \"(Tuple \" + (show(v.value0) + (\" \" + (show1(v.value1) + \")\")));\n            }\n        };\n    };\n};\nvar semiringTuple = function (dictSemiring) {\n    var add = Data_Semiring.add(dictSemiring);\n    var one = Data_Semiring.one(dictSemiring);\n    var mul = Data_Semiring.mul(dictSemiring);\n    var zero = Data_Semiring.zero(dictSemiring);\n    return function (dictSemiring1) {\n        var add1 = Data_Semiring.add(dictSemiring1);\n        var mul1 = Data_Semiring.mul(dictSemiring1);\n        return {\n            add: function (v) {\n                return function (v1) {\n                    return new Tuple(add(v.value0)(v1.value0), add1(v.value1)(v1.value1));\n                };\n            },\n            one: new Tuple(one, Data_Semiring.one(dictSemiring1)),\n            mul: function (v) {\n                return function (v1) {\n                    return new Tuple(mul(v.value0)(v1.value0), mul1(v.value1)(v1.value1));\n                };\n            },\n            zero: new Tuple(zero, Data_Semiring.zero(dictSemiring1))\n        };\n    };\n};\nvar semigroupoidTuple = {\n    compose: function (v) {\n        return function (v1) {\n            return new Tuple(v1.value0, v.value1);\n        };\n    }\n};\nvar semigroupTuple = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    return function (dictSemigroup1) {\n        var append2 = Data_Semigroup.append(dictSemigroup1);\n        return {\n            append: function (v) {\n                return function (v1) {\n                    return new Tuple(append1(v.value0)(v1.value0), append2(v.value1)(v1.value1));\n                };\n            }\n        };\n    };\n};\nvar ringTuple = function (dictRing) {\n    var sub = Data_Ring.sub(dictRing);\n    var semiringTuple1 = semiringTuple(dictRing.Semiring0());\n    return function (dictRing1) {\n        var sub1 = Data_Ring.sub(dictRing1);\n        var semiringTuple2 = semiringTuple1(dictRing1.Semiring0());\n        return {\n            sub: function (v) {\n                return function (v1) {\n                    return new Tuple(sub(v.value0)(v1.value0), sub1(v.value1)(v1.value1));\n                };\n            },\n            Semiring0: function () {\n                return semiringTuple2;\n            }\n        };\n    };\n};\nvar monoidTuple = function (dictMonoid) {\n    var mempty = Data_Monoid.mempty(dictMonoid);\n    var semigroupTuple1 = semigroupTuple(dictMonoid.Semigroup0());\n    return function (dictMonoid1) {\n        var semigroupTuple2 = semigroupTuple1(dictMonoid1.Semigroup0());\n        return {\n            mempty: new Tuple(mempty, Data_Monoid.mempty(dictMonoid1)),\n            Semigroup0: function () {\n                return semigroupTuple2;\n            }\n        };\n    };\n};\nvar heytingAlgebraTuple = function (dictHeytingAlgebra) {\n    var tt = Data_HeytingAlgebra.tt(dictHeytingAlgebra);\n    var ff = Data_HeytingAlgebra.ff(dictHeytingAlgebra);\n    var implies = Data_HeytingAlgebra.implies(dictHeytingAlgebra);\n    var conj1 = Data_HeytingAlgebra.conj(dictHeytingAlgebra);\n    var disj = Data_HeytingAlgebra.disj(dictHeytingAlgebra);\n    var not = Data_HeytingAlgebra.not(dictHeytingAlgebra);\n    return function (dictHeytingAlgebra1) {\n        var implies1 = Data_HeytingAlgebra.implies(dictHeytingAlgebra1);\n        var conj2 = Data_HeytingAlgebra.conj(dictHeytingAlgebra1);\n        var disj1 = Data_HeytingAlgebra.disj(dictHeytingAlgebra1);\n        var not1 = Data_HeytingAlgebra.not(dictHeytingAlgebra1);\n        return {\n            tt: new Tuple(tt, Data_HeytingAlgebra.tt(dictHeytingAlgebra1)),\n            ff: new Tuple(ff, Data_HeytingAlgebra.ff(dictHeytingAlgebra1)),\n            implies: function (v) {\n                return function (v1) {\n                    return new Tuple(implies(v.value0)(v1.value0), implies1(v.value1)(v1.value1));\n                };\n            },\n            conj: function (v) {\n                return function (v1) {\n                    return new Tuple(conj1(v.value0)(v1.value0), conj2(v.value1)(v1.value1));\n                };\n            },\n            disj: function (v) {\n                return function (v1) {\n                    return new Tuple(disj(v.value0)(v1.value0), disj1(v.value1)(v1.value1));\n                };\n            },\n            not: function (v) {\n                return new Tuple(not(v.value0), not1(v.value1));\n            }\n        };\n    };\n};\nvar genericTuple = {\n    to: function (x) {\n        return new Tuple(x.value0, x.value1);\n    },\n    from: function (x) {\n        return new Data_Generic_Rep.Product(x.value0, x.value1);\n    }\n};\nvar functorTuple = {\n    map: function (f) {\n        return function (m) {\n            return new Tuple(m.value0, f(m.value1));\n        };\n    }\n};\nvar invariantTuple = {\n    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorTuple)\n};\nvar fst = function (v) {\n    return v.value0;\n};\nvar lazyTuple = function (dictLazy) {\n    var defer = Control_Lazy.defer(dictLazy);\n    return function (dictLazy1) {\n        var defer1 = Control_Lazy.defer(dictLazy1);\n        return {\n            defer: function (f) {\n                return new Tuple(defer(function (v) {\n                    return fst(f(Data_Unit.unit));\n                }), defer1(function (v) {\n                    return snd(f(Data_Unit.unit));\n                }));\n            }\n        };\n    };\n};\nvar extendTuple = {\n    extend: function (f) {\n        return function (v) {\n            return new Tuple(v.value0, f(v));\n        };\n    },\n    Functor0: function () {\n        return functorTuple;\n    }\n};\nvar eqTuple = function (dictEq) {\n    var eq = Data_Eq.eq(dictEq);\n    return function (dictEq1) {\n        var eq1 = Data_Eq.eq(dictEq1);\n        return {\n            eq: function (x) {\n                return function (y) {\n                    return eq(x.value0)(y.value0) && eq1(x.value1)(y.value1);\n                };\n            }\n        };\n    };\n};\nvar ordTuple = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    var eqTuple1 = eqTuple(dictOrd.Eq0());\n    return function (dictOrd1) {\n        var compare1 = Data_Ord.compare(dictOrd1);\n        var eqTuple2 = eqTuple1(dictOrd1.Eq0());\n        return {\n            compare: function (x) {\n                return function (y) {\n                    var v = compare(x.value0)(y.value0);\n                    if (v instanceof Data_Ordering.LT) {\n                        return Data_Ordering.LT.value;\n                    };\n                    if (v instanceof Data_Ordering.GT) {\n                        return Data_Ordering.GT.value;\n                    };\n                    return compare1(x.value1)(y.value1);\n                };\n            },\n            Eq0: function () {\n                return eqTuple2;\n            }\n        };\n    };\n};\nvar eq1Tuple = function (dictEq) {\n    var eqTuple1 = eqTuple(dictEq);\n    return {\n        eq1: function (dictEq1) {\n            return Data_Eq.eq(eqTuple1(dictEq1));\n        }\n    };\n};\nvar ord1Tuple = function (dictOrd) {\n    var ordTuple1 = ordTuple(dictOrd);\n    var eq1Tuple1 = eq1Tuple(dictOrd.Eq0());\n    return {\n        compare1: function (dictOrd1) {\n            return Data_Ord.compare(ordTuple1(dictOrd1));\n        },\n        Eq10: function () {\n            return eq1Tuple1;\n        }\n    };\n};\nvar curry = function (f) {\n    return function (a) {\n        return function (b) {\n            return f(new Tuple(a, b));\n        };\n    };\n};\nvar comonadTuple = {\n    extract: snd,\n    Extend0: function () {\n        return extendTuple;\n    }\n};\nvar commutativeRingTuple = function (dictCommutativeRing) {\n    var ringTuple1 = ringTuple(dictCommutativeRing.Ring0());\n    return function (dictCommutativeRing1) {\n        var ringTuple2 = ringTuple1(dictCommutativeRing1.Ring0());\n        return {\n            Ring0: function () {\n                return ringTuple2;\n            }\n        };\n    };\n};\nvar boundedTuple = function (dictBounded) {\n    var top = Data_Bounded.top(dictBounded);\n    var bottom = Data_Bounded.bottom(dictBounded);\n    var ordTuple1 = ordTuple(dictBounded.Ord0());\n    return function (dictBounded1) {\n        var ordTuple2 = ordTuple1(dictBounded1.Ord0());\n        return {\n            top: new Tuple(top, Data_Bounded.top(dictBounded1)),\n            bottom: new Tuple(bottom, Data_Bounded.bottom(dictBounded1)),\n            Ord0: function () {\n                return ordTuple2;\n            }\n        };\n    };\n};\nvar booleanAlgebraTuple = function (dictBooleanAlgebra) {\n    var heytingAlgebraTuple1 = heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0());\n    return function (dictBooleanAlgebra1) {\n        var heytingAlgebraTuple2 = heytingAlgebraTuple1(dictBooleanAlgebra1.HeytingAlgebra0());\n        return {\n            HeytingAlgebra0: function () {\n                return heytingAlgebraTuple2;\n            }\n        };\n    };\n};\nvar applyTuple = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    return {\n        apply: function (v) {\n            return function (v1) {\n                return new Tuple(append1(v.value0)(v1.value0), v.value1(v1.value1));\n            };\n        },\n        Functor0: function () {\n            return functorTuple;\n        }\n    };\n};\nvar bindTuple = function (dictSemigroup) {\n    var append1 = Data_Semigroup.append(dictSemigroup);\n    var applyTuple1 = applyTuple(dictSemigroup);\n    return {\n        bind: function (v) {\n            return function (f) {\n                var v1 = f(v.value1);\n                return new Tuple(append1(v.value0)(v1.value0), v1.value1);\n            };\n        },\n        Apply0: function () {\n            return applyTuple1;\n        }\n    };\n};\nvar applicativeTuple = function (dictMonoid) {\n    var applyTuple1 = applyTuple(dictMonoid.Semigroup0());\n    return {\n        pure: Tuple.create(Data_Monoid.mempty(dictMonoid)),\n        Apply0: function () {\n            return applyTuple1;\n        }\n    };\n};\nvar monadTuple = function (dictMonoid) {\n    var applicativeTuple1 = applicativeTuple(dictMonoid);\n    var bindTuple1 = bindTuple(dictMonoid.Semigroup0());\n    return {\n        Applicative0: function () {\n            return applicativeTuple1;\n        },\n        Bind1: function () {\n            return bindTuple1;\n        }\n    };\n};\nexport {\n    Tuple,\n    fst,\n    snd,\n    curry,\n    uncurry,\n    swap,\n    showTuple,\n    eqTuple,\n    eq1Tuple,\n    ordTuple,\n    ord1Tuple,\n    boundedTuple,\n    semigroupoidTuple,\n    semigroupTuple,\n    monoidTuple,\n    semiringTuple,\n    ringTuple,\n    commutativeRingTuple,\n    heytingAlgebraTuple,\n    booleanAlgebraTuple,\n    functorTuple,\n    genericTuple,\n    invariantTuple,\n    applyTuple,\n    applicativeTuple,\n    bindTuple,\n    monadTuple,\n    extendTuple,\n    comonadTuple,\n    lazyTuple\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar bimap = function (dict) {\n    return dict.bimap;\n};\nvar lmap = function (dictBifunctor) {\n    var bimap1 = bimap(dictBifunctor);\n    return function (f) {\n        return bimap1(f)(identity);\n    };\n};\nvar rmap = function (dictBifunctor) {\n    return bimap(dictBifunctor)(identity);\n};\nvar bifunctorTuple = {\n    bimap: function (f) {\n        return function (g) {\n            return function (v) {\n                return new Data_Tuple.Tuple(f(v.value0), g(v.value1));\n            };\n        };\n    }\n};\nvar bifunctorEither = {\n    bimap: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Data_Either.Left) {\n                    return new Data_Either.Left(v(v2.value0));\n                };\n                if (v2 instanceof Data_Either.Right) {\n                    return new Data_Either.Right(v1(v2.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    }\n};\nvar bifunctorConst = {\n    bimap: function (f) {\n        return function (v) {\n            return function (v1) {\n                return f(v1);\n            };\n        };\n    }\n};\nexport {\n    bimap,\n    lmap,\n    rmap,\n    bifunctorEither,\n    bifunctorTuple,\n    bifunctorConst\n};\n", "export const _localeCompare = function (lt) {\n  return function (eq) {\n    return function (gt) {\n      return function (s1) {\n        return function (s2) {\n          var result = s1.localeCompare(s2);\n          return result < 0 ? lt : result > 0 ? gt : eq;\n        };\n      };\n    };\n  };\n};\n\nexport const replace = function (s1) {\n  return function (s2) {\n    return function (s3) {\n      return s3.replace(s1, s2);\n    };\n  };\n};\n\nexport const replaceAll = function (s1) {\n  return function (s2) {\n    return function (s3) {\n      return s3.replace(new RegExp(s1.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"), \"g\"), s2); // eslint-disable-line no-useless-escape\n    };\n  };\n};\n\nexport const split = function (sep) {\n  return function (s) {\n    return s.split(sep);\n  };\n};\n\nexport const toLower = function (s) {\n  return s.toLowerCase();\n};\n\nexport const toUpper = function (s) {\n  return s.toUpperCase();\n};\n\nexport const trim = function (s) {\n  return s.trim();\n};\n\nexport const joinWith = function (s) {\n  return function (xs) {\n    return xs.join(s);\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nvar $$null = function (s) {\n    return s === \"\";\n};\nvar localeCompare = /* #__PURE__ */ (function () {\n    return $foreign[\"_localeCompare\"](Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);\n})();\nexport {\n    replace,\n    replaceAll,\n    split,\n    toLower,\n    toUpper,\n    trim,\n    joinWith\n} from \"./foreign.js\";\nexport {\n    $$null as null,\n    localeCompare\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Type_Proxy from \"../Type.Proxy/index.js\";\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar discard = function (dict) {\n    return dict.discard;\n};\nvar bindProxy = {\n    bind: function (v) {\n        return function (v1) {\n            return Type_Proxy[\"Proxy\"].value;\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyProxy;\n    }\n};\nvar bindFn = {\n    bind: function (m) {\n        return function (f) {\n            return function (x) {\n                return f(m(x))(x);\n            };\n        };\n    },\n    Apply0: function () {\n        return Control_Apply.applyFn;\n    }\n};\nvar bindArray = {\n    bind: $foreign.arrayBind,\n    Apply0: function () {\n        return Control_Apply.applyArray;\n    }\n};\nvar bind = function (dict) {\n    return dict.bind;\n};\nvar bindFlipped = function (dictBind) {\n    return Data_Function.flip(bind(dictBind));\n};\nvar composeKleisliFlipped = function (dictBind) {\n    var bindFlipped1 = bindFlipped(dictBind);\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bindFlipped1(f)(g(a));\n            };\n        };\n    };\n};\nvar composeKleisli = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bind1(f(a))(g);\n            };\n        };\n    };\n};\nvar discardProxy = {\n    discard: function (dictBind) {\n        return bind(dictBind);\n    }\n};\nvar discardUnit = {\n    discard: function (dictBind) {\n        return bind(dictBind);\n    }\n};\nvar ifM = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (cond) {\n        return function (t) {\n            return function (f) {\n                return bind1(cond)(function (cond$prime) {\n                    if (cond$prime) {\n                        return t;\n                    };\n                    return f;\n                });\n            };\n        };\n    };\n};\nvar join = function (dictBind) {\n    var bind1 = bind(dictBind);\n    return function (m) {\n        return bind1(m)(identity);\n    };\n};\nexport {\n    bind,\n    bindFlipped,\n    discard,\n    join,\n    composeKleisli,\n    composeKleisliFlipped,\n    ifM,\n    bindFn,\n    bindArray,\n    bindProxy,\n    discardUnit,\n    discardProxy\n};\nexport {\n    liftA1,\n    pure,\n    unless,\n    when\n} from \"../Control.Applicative/index.js\";\nexport {\n    apply\n} from \"../Control.Apply/index.js\";\nexport {\n    map,\n    void\n} from \"../Data.Functor/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Effect from \"../Effect/index.js\";\nimport * as Effect_Exception from \"../Effect.Exception/index.js\";\nvar discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);\nvar throwError = function (dict) {\n    return dict.throwError;\n};\nvar monadThrowMaybe = /* #__PURE__ */ (function () {\n    return {\n        throwError: Data_Function[\"const\"](Data_Maybe.Nothing.value),\n        Monad0: function () {\n            return Data_Maybe.monadMaybe;\n        }\n    };\n})();\nvar monadThrowEither = /* #__PURE__ */ (function () {\n    return {\n        throwError: Data_Either.Left.create,\n        Monad0: function () {\n            return Data_Either.monadEither;\n        }\n    };\n})();\nvar monadThrowEffect = {\n    throwError: Effect_Exception.throwException,\n    Monad0: function () {\n        return Effect.monadEffect;\n    }\n};\nvar monadErrorMaybe = {\n    catchError: function (v) {\n        return function (v1) {\n            if (v instanceof Data_Maybe.Nothing) {\n                return v1(Data_Unit.unit);\n            };\n            if (v instanceof Data_Maybe.Just) {\n                return new Data_Maybe.Just(v.value0);\n            };\n            throw new Error(\"Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    MonadThrow0: function () {\n        return monadThrowMaybe;\n    }\n};\nvar monadErrorEither = {\n    catchError: function (v) {\n        return function (v1) {\n            if (v instanceof Data_Either.Left) {\n                return v1(v.value0);\n            };\n            if (v instanceof Data_Either.Right) {\n                return new Data_Either.Right(v.value0);\n            };\n            throw new Error(\"Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    },\n    MonadThrow0: function () {\n        return monadThrowEither;\n    }\n};\nvar monadErrorEffect = {\n    catchError: /* #__PURE__ */ Data_Function.flip(Effect_Exception.catchException),\n    MonadThrow0: function () {\n        return monadThrowEffect;\n    }\n};\nvar liftMaybe = function (dictMonadThrow) {\n    var throwError1 = throwError(dictMonadThrow);\n    var pure = Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0());\n    return function (error) {\n        return Data_Maybe.maybe(throwError1(error))(pure);\n    };\n};\nvar liftEither = function (dictMonadThrow) {\n    return Data_Either.either(throwError(dictMonadThrow))(Control_Applicative.pure((dictMonadThrow.Monad0()).Applicative0()));\n};\nvar catchError = function (dict) {\n    return dict.catchError;\n};\nvar catchJust = function (dictMonadError) {\n    var throwError1 = throwError(dictMonadError.MonadThrow0());\n    var catchError1 = catchError(dictMonadError);\n    return function (p) {\n        return function (act) {\n            return function (handler) {\n                var handle = function (e) {\n                    var v = p(e);\n                    if (v instanceof Data_Maybe.Nothing) {\n                        return throwError1(e);\n                    };\n                    if (v instanceof Data_Maybe.Just) {\n                        return handler(v.value0);\n                    };\n                    throw new Error(\"Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): \" + [ v.constructor.name ]);\n                };\n                return catchError1(act)(handle);\n            };\n        };\n    };\n};\nvar $$try = function (dictMonadError) {\n    var catchError1 = catchError(dictMonadError);\n    var Monad0 = (dictMonadError.MonadThrow0()).Monad0();\n    var map = Data_Functor.map(((Monad0.Bind1()).Apply0()).Functor0());\n    var pure = Control_Applicative.pure(Monad0.Applicative0());\n    return function (a) {\n        return catchError1(map(Data_Either.Right.create)(a))(function ($52) {\n            return pure(Data_Either.Left.create($52));\n        });\n    };\n};\nvar withResource = function (dictMonadError) {\n    var MonadThrow0 = dictMonadError.MonadThrow0();\n    var Monad0 = MonadThrow0.Monad0();\n    var Bind1 = Monad0.Bind1();\n    var bind = Control_Bind.bind(Bind1);\n    var try1 = $$try(dictMonadError);\n    var discard1 = discard(Bind1);\n    var throwError1 = throwError(MonadThrow0);\n    var pure = Control_Applicative.pure(Monad0.Applicative0());\n    return function (acquire) {\n        return function (release) {\n            return function (kleisli) {\n                return bind(acquire)(function (resource) {\n                    return bind(try1(kleisli(resource)))(function (result) {\n                        return discard1(release(resource))(function () {\n                            return Data_Either.either(throwError1)(pure)(result);\n                        });\n                    });\n                });\n            };\n        };\n    };\n};\nexport {\n    catchError,\n    throwError,\n    catchJust,\n    $$try as try,\n    withResource,\n    liftMaybe,\n    liftEither,\n    monadThrowEither,\n    monadErrorEither,\n    monadThrowMaybe,\n    monadErrorMaybe,\n    monadThrowEffect,\n    monadErrorEffect\n};\n", "// Generated by purs version 0.15.9\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Functor_Invariant from \"../Data.Functor.Invariant/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nvar Identity = function (x) {\n    return x;\n};\nvar showIdentity = function (dictShow) {\n    var show = Data_Show.show(dictShow);\n    return {\n        show: function (v) {\n            return \"(Identity \" + (show(v) + \")\");\n        }\n    };\n};\nvar semiringIdentity = function (dictSemiring) {\n    return dictSemiring;\n};\nvar semigroupIdentity = function (dictSemigroup) {\n    return dictSemigroup;\n};\nvar ringIdentity = function (dictRing) {\n    return dictRing;\n};\nvar ordIdentity = function (dictOrd) {\n    return dictOrd;\n};\nvar newtypeIdentity = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar monoidIdentity = function (dictMonoid) {\n    return dictMonoid;\n};\nvar lazyIdentity = function (dictLazy) {\n    return dictLazy;\n};\nvar heytingAlgebraIdentity = function (dictHeytingAlgebra) {\n    return dictHeytingAlgebra;\n};\nvar functorIdentity = {\n    map: function (f) {\n        return function (m) {\n            return f(m);\n        };\n    }\n};\nvar invariantIdentity = {\n    imap: /* #__PURE__ */ Data_Functor_Invariant.imapF(functorIdentity)\n};\nvar extendIdentity = {\n    extend: function (f) {\n        return function (m) {\n            return f(m);\n        };\n    },\n    Functor0: function () {\n        return functorIdentity;\n    }\n};\nvar euclideanRingIdentity = function (dictEuclideanRing) {\n    return dictEuclideanRing;\n};\nvar eqIdentity = function (dictEq) {\n    return dictEq;\n};\nvar eq1Identity = {\n    eq1: function (dictEq) {\n        return Data_Eq.eq(eqIdentity(dictEq));\n    }\n};\nvar ord1Identity = {\n    compare1: function (dictOrd) {\n        return Data_Ord.compare(ordIdentity(dictOrd));\n    },\n    Eq10: function () {\n        return eq1Identity;\n    }\n};\nvar comonadIdentity = {\n    extract: function (v) {\n        return v;\n    },\n    Extend0: function () {\n        return extendIdentity;\n    }\n};\nvar commutativeRingIdentity = function (dictCommutativeRing) {\n    return dictCommutativeRing;\n};\nvar boundedIdentity = function (dictBounded) {\n    return dictBounded;\n};\nvar booleanAlgebraIdentity = function (dictBooleanAlgebra) {\n    return dictBooleanAlgebra;\n};\nvar applyIdentity = {\n    apply: function (v) {\n        return function (v1) {\n            return v(v1);\n        };\n    },\n    Functor0: function () {\n        return functorIdentity;\n    }\n};\nvar bindIdentity = {\n    bind: function (v) {\n        return function (f) {\n            return f(v);\n        };\n    },\n    Apply0: function () {\n        return applyIdentity;\n    }\n};\nvar applicativeIdentity = {\n    pure: Identity,\n    Apply0: function () {\n        return applyIdentity;\n    }\n};\nvar monadIdentity = {\n    Applicative0: function () {\n        return applicativeIdentity;\n    },\n    Bind1: function () {\n        return bindIdentity;\n    }\n};\nvar altIdentity = {\n    alt: function (x) {\n        return function (v) {\n            return x;\n        };\n    },\n    Functor0: function () {\n        return functorIdentity;\n    }\n};\nexport {\n    Identity,\n    newtypeIdentity,\n    eqIdentity,\n    ordIdentity,\n    boundedIdentity,\n    heytingAlgebraIdentity,\n    booleanAlgebraIdentity,\n    semigroupIdentity,\n    monoidIdentity,\n    semiringIdentity,\n    euclideanRingIdentity,\n    ringIdentity,\n    commutativeRingIdentity,\n    lazyIdentity,\n    showIdentity,\n    eq1Identity,\n    ord1Identity,\n    functorIdentity,\n    invariantIdentity,\n    altIdentity,\n    applyIdentity,\n    applicativeIdentity,\n    bindIdentity,\n    monadIdentity,\n    extendIdentity,\n    comonadIdentity\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Monad from \"../Control.Monad/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Identity from \"../Data.Identity/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Effect from \"../Effect/index.js\";\nimport * as Effect_Ref from \"../Effect.Ref/index.js\";\nvar bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Effect.bindEffect);\nvar map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);\nvar Loop = /* #__PURE__ */ (function () {\n    function Loop(value0) {\n        this.value0 = value0;\n    };\n    Loop.create = function (value0) {\n        return new Loop(value0);\n    };\n    return Loop;\n})();\nvar Done = /* #__PURE__ */ (function () {\n    function Done(value0) {\n        this.value0 = value0;\n    };\n    Done.create = function (value0) {\n        return new Done(value0);\n    };\n    return Done;\n})();\nvar tailRecM = function (dict) {\n    return dict.tailRecM;\n};\nvar tailRecM2 = function (dictMonadRec) {\n    var tailRecM1 = tailRecM(dictMonadRec);\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return tailRecM1(function (o) {\n                    return f(o.a)(o.b);\n                })({\n                    a: a,\n                    b: b\n                });\n            };\n        };\n    };\n};\nvar tailRecM3 = function (dictMonadRec) {\n    var tailRecM1 = tailRecM(dictMonadRec);\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return tailRecM1(function (o) {\n                        return f(o.a)(o.b)(o.c);\n                    })({\n                        a: a,\n                        b: b,\n                        c: c\n                    });\n                };\n            };\n        };\n    };\n};\nvar untilJust = function (dictMonadRec) {\n    var tailRecM1 = tailRecM(dictMonadRec);\n    var mapFlipped = Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0());\n    return function (m) {\n        return tailRecM1(function (v) {\n            return mapFlipped(m)(function (v1) {\n                if (v1 instanceof Data_Maybe.Nothing) {\n                    return new Loop(Data_Unit.unit);\n                };\n                if (v1 instanceof Data_Maybe.Just) {\n                    return new Done(v1.value0);\n                };\n                throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 179, column 43 - line 181, column 19): \" + [ v1.constructor.name ]);\n            });\n        })(Data_Unit.unit);\n    };\n};\nvar whileJust = function (dictMonoid) {\n    var append = Data_Semigroup.append(dictMonoid.Semigroup0());\n    var mempty = Data_Monoid.mempty(dictMonoid);\n    return function (dictMonadRec) {\n        var tailRecM1 = tailRecM(dictMonadRec);\n        var mapFlipped = Data_Functor.mapFlipped((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0());\n        return function (m) {\n            return tailRecM1(function (v) {\n                return mapFlipped(m)(function (v1) {\n                    if (v1 instanceof Data_Maybe.Nothing) {\n                        return new Done(v);\n                    };\n                    if (v1 instanceof Data_Maybe.Just) {\n                        return new Loop(append(v)(v1.value0));\n                    };\n                    throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 172, column 45 - line 174, column 26): \" + [ v1.constructor.name ]);\n                });\n            })(mempty);\n        };\n    };\n};\nvar tailRec = function (f) {\n    var go = function ($copy_v) {\n        var $tco_done = false;\n        var $tco_result;\n        function $tco_loop(v) {\n            if (v instanceof Loop) {\n                $copy_v = f(v.value0);\n                return;\n            };\n            if (v instanceof Done) {\n                $tco_done = true;\n                return v.value0;\n            };\n            throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 103, column 3 - line 103, column 25): \" + [ v.constructor.name ]);\n        };\n        while (!$tco_done) {\n            $tco_result = $tco_loop($copy_v);\n        };\n        return $tco_result;\n    };\n    return function ($85) {\n        return go(f($85));\n    };\n};\nvar tailRec2 = function (f) {\n    return function (a) {\n        return function (b) {\n            return tailRec(function (o) {\n                return f(o.a)(o.b);\n            })({\n                a: a,\n                b: b\n            });\n        };\n    };\n};\nvar tailRec3 = function (f) {\n    return function (a) {\n        return function (b) {\n            return function (c) {\n                return tailRec(function (o) {\n                    return f(o.a)(o.b)(o.c);\n                })({\n                    a: a,\n                    b: b,\n                    c: c\n                });\n            };\n        };\n    };\n};\nvar monadRecMaybe = {\n    tailRecM: function (f) {\n        return function (a0) {\n            var g = function (v) {\n                if (v instanceof Data_Maybe.Nothing) {\n                    return new Done(Data_Maybe.Nothing.value);\n                };\n                if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {\n                    return new Loop(f(v.value0.value0));\n                };\n                if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {\n                    return new Done(new Data_Maybe.Just(v.value0.value0));\n                };\n                throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 153, column 7 - line 153, column 31): \" + [ v.constructor.name ]);\n            };\n            return tailRec(g)(f(a0));\n        };\n    },\n    Monad0: function () {\n        return Data_Maybe.monadMaybe;\n    }\n};\nvar monadRecIdentity = {\n    tailRecM: function (f) {\n        var runIdentity = function (v) {\n            return v;\n        };\n        var $86 = tailRec(function ($88) {\n            return runIdentity(f($88));\n        });\n        return function ($87) {\n            return Data_Identity.Identity($86($87));\n        };\n    },\n    Monad0: function () {\n        return Data_Identity.monadIdentity;\n    }\n};\nvar monadRecFunction = {\n    tailRecM: function (f) {\n        return function (a0) {\n            return function (e) {\n                return tailRec(function (a) {\n                    return f(a)(e);\n                })(a0);\n            };\n        };\n    },\n    Monad0: function () {\n        return Control_Monad.monadFn;\n    }\n};\nvar monadRecEither = {\n    tailRecM: function (f) {\n        return function (a0) {\n            var g = function (v) {\n                if (v instanceof Data_Either.Left) {\n                    return new Done(new Data_Either.Left(v.value0));\n                };\n                if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {\n                    return new Loop(f(v.value0.value0));\n                };\n                if (v instanceof Data_Either.Right && v.value0 instanceof Done) {\n                    return new Done(new Data_Either.Right(v.value0.value0));\n                };\n                throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 145, column 7 - line 145, column 33): \" + [ v.constructor.name ]);\n            };\n            return tailRec(g)(f(a0));\n        };\n    },\n    Monad0: function () {\n        return Data_Either.monadEither;\n    }\n};\nvar monadRecEffect = {\n    tailRecM: function (f) {\n        return function (a) {\n            var fromDone = function (v) {\n                if (v instanceof Done) {\n                    return v.value0;\n                };\n                throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44): \" + [ v.constructor.name ]);\n            };\n            return function __do() {\n                var r = bindFlipped(Effect_Ref[\"new\"])(f(a))();\n                (function () {\n                    while (!(function __do() {\n                        var v = Effect_Ref.read(r)();\n                        if (v instanceof Loop) {\n                            var e = f(v.value0)();\n                            Effect_Ref.write(e)(r)();\n                            return false;\n                        };\n                        if (v instanceof Done) {\n                            return true;\n                        };\n                        throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28): \" + [ v.constructor.name ]);\n                    })()) {\n\n                    };\n                    return {};\n                })();\n                return map(fromDone)(Effect_Ref.read(r))();\n            };\n        };\n    },\n    Monad0: function () {\n        return Effect.monadEffect;\n    }\n};\nvar loop3 = function (a) {\n    return function (b) {\n        return function (c) {\n            return new Loop({\n                a: a,\n                b: b,\n                c: c\n            });\n        };\n    };\n};\nvar loop2 = function (a) {\n    return function (b) {\n        return new Loop({\n            a: a,\n            b: b\n        });\n    };\n};\nvar functorStep = {\n    map: function (f) {\n        return function (m) {\n            if (m instanceof Loop) {\n                return new Loop(m.value0);\n            };\n            if (m instanceof Done) {\n                return new Done(f(m.value0));\n            };\n            throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 0, column 0 - line 0, column 0): \" + [ m.constructor.name ]);\n        };\n    }\n};\nvar forever = function (dictMonadRec) {\n    var tailRecM1 = tailRecM(dictMonadRec);\n    var voidRight = Data_Functor.voidRight((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0());\n    return function (ma) {\n        return tailRecM1(function (u) {\n            return voidRight(new Loop(u))(ma);\n        })(Data_Unit.unit);\n    };\n};\nvar bifunctorStep = {\n    bimap: function (v) {\n        return function (v1) {\n            return function (v2) {\n                if (v2 instanceof Loop) {\n                    return new Loop(v(v2.value0));\n                };\n                if (v2 instanceof Done) {\n                    return new Done(v1(v2.value0));\n                };\n                throw new Error(\"Failed pattern match at Control.Monad.Rec.Class (line 33, column 1 - line 35, column 34): \" + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);\n            };\n        };\n    }\n};\nexport {\n    Loop,\n    Done,\n    tailRec,\n    tailRec2,\n    tailRec3,\n    tailRecM,\n    tailRecM2,\n    tailRecM3,\n    forever,\n    whileJust,\n    untilJust,\n    loop2,\n    loop3,\n    functorStep,\n    bifunctorStep,\n    monadRecIdentity,\n    monadRecEffect,\n    monadRecFunction,\n    monadRecEither,\n    monadRecMaybe\n};\n", "export const defer = function (thunk) {\n  var v = null;\n  return function() {\n    if (thunk === undefined) return v;\n\n    v = thunk();\n    thunk = undefined; // eslint-disable-line no-param-reassign\n    return v;\n  };\n};\n\nexport const force = function (l) {\n  return l();\n};\n", "// module Unsafe.Coerce\n\nexport const unsafeCoerce = function (x) {\n  return x;\n};\n", "// Generated by purs version 0.15.9\nimport * as Unsafe_Coerce from \"../Unsafe.Coerce/index.js\";\nvar coerce = function () {\n    return Unsafe_Coerce.unsafeCoerce;\n};\nexport {\n    coerce\n};\n", "// Generated by purs version 0.15.9\nimport * as Safe_Coerce from \"../Safe.Coerce/index.js\";\nvar coerce = /* #__PURE__ */ Safe_Coerce.coerce();\nvar wrap = function () {\n    return coerce;\n};\nvar wrap1 = /* #__PURE__ */ wrap();\nvar unwrap = function () {\n    return coerce;\n};\nvar unwrap1 = /* #__PURE__ */ unwrap();\nvar underF2 = function () {\n    return function () {\n        return function () {\n            return function () {\n                return function (v) {\n                    return coerce;\n                };\n            };\n        };\n    };\n};\nvar underF = function () {\n    return function () {\n        return function () {\n            return function () {\n                return function (v) {\n                    return coerce;\n                };\n            };\n        };\n    };\n};\nvar under2 = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar under = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar un = function () {\n    return function (v) {\n        return unwrap1;\n    };\n};\nvar traverse = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar overF2 = function () {\n    return function () {\n        return function () {\n            return function () {\n                return function (v) {\n                    return coerce;\n                };\n            };\n        };\n    };\n};\nvar overF = function () {\n    return function () {\n        return function () {\n            return function () {\n                return function (v) {\n                    return coerce;\n                };\n            };\n        };\n    };\n};\nvar over2 = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar over = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar newtypeMultiplicative = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeLast = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeFirst = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeEndo = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeDual = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeDisj = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeConj = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar newtypeAdditive = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar modify = function () {\n    return function (fn) {\n        return function (t) {\n            return wrap1(fn(unwrap1(t)));\n        };\n    };\n};\nvar collect = function () {\n    return function () {\n        return function (v) {\n            return coerce;\n        };\n    };\n};\nvar alaF = function () {\n    return function () {\n        return function () {\n            return function () {\n                return function (v) {\n                    return coerce;\n                };\n            };\n        };\n    };\n};\nvar ala = function () {\n    return function () {\n        return function () {\n            return function (v) {\n                return function (f) {\n                    return coerce(f(wrap1));\n                };\n            };\n        };\n    };\n};\nexport {\n    wrap,\n    unwrap,\n    un,\n    modify,\n    ala,\n    alaF,\n    over,\n    overF,\n    under,\n    underF,\n    over2,\n    overF2,\n    under2,\n    underF2,\n    traverse,\n    collect,\n    newtypeAdditive,\n    newtypeMultiplicative,\n    newtypeConj,\n    newtypeDisj,\n    newtypeDual,\n    newtypeEndo,\n    newtypeFirst,\n    newtypeLast\n};\n", "// jshint maxparams: 3\n\nexport const traverseArrayImpl = (function () {\n  function array1(a) {\n    return [a];\n  }\n\n  function array2(a) {\n    return function (b) {\n      return [a, b];\n    };\n  }\n\n  function array3(a) {\n    return function (b) {\n      return function (c) {\n        return [a, b, c];\n      };\n    };\n  }\n\n  function concat2(xs) {\n    return function (ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  return function (apply) {\n    return function (map) {\n      return function (pure) {\n        return function (f) {\n          return function (array) {\n            function go(bot, top) {\n              switch (top - bot) {\n              case 0: return pure([]);\n              case 1: return map(array1)(f(array[bot]));\n              case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));\n              case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));\n              default:\n                // This slightly tricky pivot selection aims to produce two\n                // even-length partitions where possible.\n                var pivot = bot + Math.floor((top - bot) / 4) * 2;\n                return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));\n              }\n            }\n            return go(0, array.length);\n          };\n        };\n      };\n    };\n  };\n})();\n", "// Generated by purs version 0.15.9\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Monad_Error_Class from \"../Control.Monad.Error.Class/index.js\";\nimport * as Control_Monad_Except_Trans from \"../Control.Monad.Except.Trans/index.js\";\nimport * as Control_Monad_Reader_Class from \"../Control.Monad.Reader.Class/index.js\";\nimport * as Control_Monad_Rec_Class from \"../Control.Monad.Rec.Class/index.js\";\nimport * as Control_Monad_State_Class from \"../Control.Monad.State.Class/index.js\";\nimport * as Control_Monad_Trans_Class from \"../Control.Monad.Trans.Class/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Lazy from \"../Data.Lazy/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Newtype from \"../Data.Newtype/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Show_Generic from \"../Data.Show.Generic/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar $runtime_lazy = function (name, moduleName, init) {\n    var state = 0;\n    var val;\n    return function (lineNumber) {\n        if (state === 2) return val;\n        if (state === 1) throw new ReferenceError(name + \" was needed before it finished initializing (module \" + moduleName + \", line \" + lineNumber + \")\", moduleName, lineNumber);\n        state = 1;\n        val = init();\n        state = 2;\n        return val;\n    };\n};\nvar compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordInt);\nvar show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);\nvar unwrap = /* #__PURE__ */ Data_Newtype.unwrap();\nvar compare1 = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);\nvar Position = function (x) {\n    return x;\n};\nvar ParseState = /* #__PURE__ */ (function () {\n    function ParseState(value0, value1, value2) {\n        this.value0 = value0;\n        this.value1 = value1;\n        this.value2 = value2;\n    };\n    ParseState.create = function (value0) {\n        return function (value1) {\n            return function (value2) {\n                return new ParseState(value0, value1, value2);\n            };\n        };\n    };\n    return ParseState;\n})();\nvar ParseError = /* #__PURE__ */ (function () {\n    function ParseError(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    ParseError.create = function (value0) {\n        return function (value1) {\n            return new ParseError(value0, value1);\n        };\n    };\n    return ParseError;\n})();\nvar ParserT = function (x) {\n    return x;\n};\nvar More = /* #__PURE__ */ (function () {\n    function More(value0) {\n        this.value0 = value0;\n    };\n    More.create = function (value0) {\n        return new More(value0);\n    };\n    return More;\n})();\nvar Lift = /* #__PURE__ */ (function () {\n    function Lift(value0) {\n        this.value0 = value0;\n    };\n    Lift.create = function (value0) {\n        return new Lift(value0);\n    };\n    return Lift;\n})();\nvar Stop = /* #__PURE__ */ (function () {\n    function Stop(value0, value1) {\n        this.value0 = value0;\n        this.value1 = value1;\n    };\n    Stop.create = function (value0) {\n        return function (value1) {\n            return new Stop(value0, value1);\n        };\n    };\n    return Stop;\n})();\nvar monadTransParserT = {\n    lift: function (dictMonad) {\n        var map = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0());\n        return function (m) {\n            return function (state1, v, lift$prime, v1, done) {\n                return lift$prime(map(function (a) {\n                    return function (v2) {\n                        return done(state1, a);\n                    };\n                })(m));\n            };\n        };\n    }\n};\nvar lift = /* #__PURE__ */ Control_Monad_Trans_Class.lift(monadTransParserT);\nvar lazyParserT = {\n    defer: function (f) {\n        var m = Data_Lazy.defer(f);\n        return function (state1, more, lift1, $$throw, done) {\n            var v = Data_Lazy.force(m);\n            return v(state1, more, lift1, $$throw, done);\n        };\n    }\n};\nvar genericPosition_ = {\n    to: function (x) {\n        return x;\n    },\n    from: function (x) {\n        return x;\n    }\n};\nvar genericShow = /* #__PURE__ */ Data_Show_Generic.genericShow(genericPosition_)(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons({\n    reflectSymbol: function () {\n        return \"column\";\n    }\n})(/* #__PURE__ */ Data_Show.showRecordFieldsCons({\n    reflectSymbol: function () {\n        return \"index\";\n    }\n})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({\n    reflectSymbol: function () {\n        return \"line\";\n    }\n})(Data_Show.showInt))(Data_Show.showInt))(Data_Show.showInt))))({\n    reflectSymbol: function () {\n        return \"Position\";\n    }\n}));\nvar showPosition = {\n    show: function (x) {\n        return genericShow(x);\n    }\n};\nvar show1 = /* #__PURE__ */ Data_Show.show(showPosition);\nvar functorParserT = {\n    map: function (f) {\n        return function (v) {\n            return function (state1, more, lift1, $$throw, done) {\n                return more(function (v1) {\n                    return v(state1, more, lift1, $$throw, function (state2, a) {\n                        return more(function (v2) {\n                            return done(state2, f(a));\n                        });\n                    });\n                });\n            };\n        };\n    }\n};\nvar eqPosition = {\n    eq: function (v) {\n        return function (v1) {\n            return v.index === v1.index;\n        };\n    }\n};\nvar eq2 = /* #__PURE__ */ Data_Eq.eq(eqPosition);\nvar ordPosition = {\n    compare: function (v) {\n        return function (v1) {\n            return compare(v.index)(v1.index);\n        };\n    },\n    Eq0: function () {\n        return eqPosition;\n    }\n};\nvar compare2 = /* #__PURE__ */ Data_Ord.compare(ordPosition);\nvar applyParserT = {\n    apply: function (v) {\n        return function (v1) {\n            return function (state1, more, lift1, $$throw, done) {\n                return more(function (v2) {\n                    return v(state1, more, lift1, $$throw, function (state2, f) {\n                        return more(function (v3) {\n                            return v1(state2, more, lift1, $$throw, function (state3, a) {\n                                return more(function (v4) {\n                                    return done(state3, f(a));\n                                });\n                            });\n                        });\n                    });\n                });\n            };\n        };\n    },\n    Functor0: function () {\n        return functorParserT;\n    }\n};\nvar lift2 = /* #__PURE__ */ Control_Apply.lift2(applyParserT);\nvar bindParserT = {\n    bind: function (v) {\n        return function (next) {\n            return function (state1, more, lift1, $$throw, done) {\n                return more(function (v1) {\n                    return v(state1, more, lift1, $$throw, function (state2, a) {\n                        return more(function (v2) {\n                            var v3 = next(a);\n                            return v3(state2, more, lift1, $$throw, done);\n                        });\n                    });\n                });\n            };\n        };\n    },\n    Apply0: function () {\n        return applyParserT;\n    }\n};\nvar bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(bindParserT);\nvar bind = /* #__PURE__ */ Control_Bind.bind(bindParserT);\nvar semigroupParserT = function (dictSemigroup) {\n    return {\n        append: lift2(Data_Semigroup.append(dictSemigroup))\n    };\n};\nvar applicativeParserT = {\n    pure: function (a) {\n        return function (state1, v, v1, v2, done) {\n            return done(state1, a);\n        };\n    },\n    Apply0: function () {\n        return applyParserT;\n    }\n};\nvar pure = /* #__PURE__ */ Control_Applicative.pure(applicativeParserT);\nvar monadParserT = {\n    Applicative0: function () {\n        return applicativeParserT;\n    },\n    Bind1: function () {\n        return bindParserT;\n    }\n};\nvar monadAskParserT = function (dictMonadAsk) {\n    return {\n        ask: lift(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),\n        Monad0: function () {\n            return monadParserT;\n        }\n    };\n};\nvar monadReaderParserT = function (dictMonadReader) {\n    var local = Control_Monad_Reader_Class.local(dictMonadReader);\n    var monadAskParserT1 = monadAskParserT(dictMonadReader.MonadAsk0());\n    return {\n        local: function (f) {\n            return function (v) {\n                return function (state1, more, lift1, $$throw, done) {\n                    return v(state1, more, (function () {\n                        var $279 = local(f);\n                        return function ($280) {\n                            return lift1($279($280));\n                        };\n                    })(), $$throw, done);\n                };\n            };\n        },\n        MonadAsk0: function () {\n            return monadAskParserT1;\n        }\n    };\n};\nvar monadRecParserT = {\n    tailRecM: function (next) {\n        return function (initArg) {\n            return function (state1, more, lift1, $$throw, done) {\n                var $lazy_loop = $runtime_lazy(\"loop\", \"Parsing\", function () {\n                    return function (state2, arg, gas) {\n                        var v = next(arg);\n                        return v(state2, more, lift1, $$throw, function (state3, step) {\n                            if (step instanceof Control_Monad_Rec_Class.Loop) {\n                                var $206 = gas === 0;\n                                if ($206) {\n                                    return more(function (v1) {\n                                        return $lazy_loop(277)(state3, step.value0, 30);\n                                    });\n                                };\n                                return $lazy_loop(279)(state3, step.value0, gas - 1 | 0);\n                            };\n                            if (step instanceof Control_Monad_Rec_Class.Done) {\n                                return done(state3, step.value0);\n                            };\n                            throw new Error(\"Failed pattern match at Parsing (line 273, column 39 - line 281, column 43): \" + [ step.constructor.name ]);\n                        });\n                    };\n                });\n                var loop = $lazy_loop(270);\n                return loop(state1, initArg, 30);\n            };\n        };\n    },\n    Monad0: function () {\n        return monadParserT;\n    }\n};\nvar monadStateParserT = function (dictMonadState) {\n    var lift1 = lift(dictMonadState.Monad0());\n    var state = Control_Monad_State_Class.state(dictMonadState);\n    return {\n        state: function (k) {\n            return lift1(state(k));\n        },\n        Monad0: function () {\n            return monadParserT;\n        }\n    };\n};\nvar monadThrowParseErrorParse = {\n    throwError: function (err) {\n        return function (state1, v, v1, $$throw, v2) {\n            return $$throw(state1, err);\n        };\n    },\n    Monad0: function () {\n        return monadParserT;\n    }\n};\nvar throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(monadThrowParseErrorParse);\nvar monadErrorParseErrorParse = {\n    catchError: function (v) {\n        return function (next) {\n            return function (state1, more, lift1, $$throw, done) {\n                return more(function (v1) {\n                    return v(state1, more, lift1, function (state2, err) {\n                        var v2 = next(err);\n                        return v2(state2, more, lift1, $$throw, done);\n                    }, done);\n                });\n            };\n        };\n    },\n    MonadThrow0: function () {\n        return monadThrowParseErrorParse;\n    }\n};\nvar catchError = /* #__PURE__ */ Control_Monad_Error_Class.catchError(monadErrorParseErrorParse);\nvar monoidParserT = function (dictMonoid) {\n    var semigroupParserT1 = semigroupParserT(dictMonoid.Semigroup0());\n    return {\n        mempty: pure(Data_Monoid.mempty(dictMonoid)),\n        Semigroup0: function () {\n            return semigroupParserT1;\n        }\n    };\n};\nvar altParserT = {\n    alt: function (v) {\n        return function (v1) {\n            return function (v2, more, lift1, $$throw, done) {\n                return more(function (v3) {\n                    return v(new ParseState(v2.value0, v2.value1, false), more, lift1, function (v4, err) {\n                        return more(function (v5) {\n                            if (v4.value2) {\n                                return $$throw(v4, err);\n                            };\n                            return v1(v2, more, lift1, $$throw, done);\n                        });\n                    }, done);\n                });\n            };\n        };\n    },\n    Functor0: function () {\n        return functorParserT;\n    }\n};\nvar stateParserT = function (k) {\n    return function (state1, v, v1, v2, done) {\n        var v3 = k(state1);\n        return done(v3.value1, v3.value0);\n    };\n};\nvar showParseError = {\n    show: function (v) {\n        return \"(ParseError \" + (show(v.value0) + (\" \" + (show1(v.value1) + \")\")));\n    }\n};\nvar runParserT$prime = function (dictMonadRec) {\n    var Monad0 = dictMonadRec.Monad0();\n    var map = Data_Functor.map(((Monad0.Bind1()).Apply0()).Functor0());\n    var pure1 = Control_Applicative.pure(Monad0.Applicative0());\n    var tailRecM = Control_Monad_Rec_Class.tailRecM(dictMonadRec);\n    return function (state1) {\n        return function (v) {\n            var go = function ($copy_step) {\n                var $tco_done = false;\n                var $tco_result;\n                function $tco_loop(step) {\n                    var v1 = step(Data_Unit.unit);\n                    if (v1 instanceof More) {\n                        $copy_step = v1.value0;\n                        return;\n                    };\n                    if (v1 instanceof Lift) {\n                        $tco_done = true;\n                        return map(Control_Monad_Rec_Class.Loop.create)(v1.value0);\n                    };\n                    if (v1 instanceof Stop) {\n                        $tco_done = true;\n                        return pure1(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value1, v1.value0)));\n                    };\n                    throw new Error(\"Failed pattern match at Parsing (line 152, column 13 - line 158, column 32): \" + [ v1.constructor.name ]);\n                };\n                while (!$tco_done) {\n                    $tco_result = $tco_loop($copy_step);\n                };\n                return $tco_result;\n            };\n            return tailRecM(go)(function (v1) {\n                return v(state1, More.create, Lift.create, function (state2, err) {\n                    return new Stop(state2, new Data_Either.Left(err));\n                }, function (state2, res) {\n                    return new Stop(state2, new Data_Either.Right(res));\n                });\n            });\n        };\n    };\n};\nvar region = function (context) {\n    return function (p) {\n        return catchError(p)(function (err) {\n            return throwError(context(err));\n        });\n    };\n};\nvar position = /* #__PURE__ */ stateParserT(function (v) {\n    return new Data_Tuple.Tuple(v.value1, v);\n});\nvar parseErrorPosition = function (v) {\n    return v.value1;\n};\nvar parseErrorMessage = function (v) {\n    return v.value0;\n};\nvar mapParserT = function (dictMonadRec) {\n    var runParserT$prime1 = runParserT$prime(dictMonadRec);\n    return function (dictFunctor) {\n        var map = Data_Functor.map(dictFunctor);\n        return function (f) {\n            return function (p) {\n                return function (state1, v, lift1, $$throw, done) {\n                    return lift1(map(function (v1) {\n                        return function (v2) {\n                            if (v1.value0 instanceof Data_Either.Left) {\n                                return $$throw(v1.value1, v1.value0.value0);\n                            };\n                            if (v1.value0 instanceof Data_Either.Right) {\n                                return done(v1.value1, v1.value0.value0);\n                            };\n                            throw new Error(\"Failed pattern match at Parsing (line 192, column 13 - line 196, column 37): \" + [ v1.value0.constructor.name ]);\n                        };\n                    })(f(runParserT$prime1(state1)(p))));\n                };\n            };\n        };\n    };\n};\nvar initialPos = {\n    index: 0,\n    line: 1,\n    column: 1\n};\nvar runParserT = function (dictMonadRec) {\n    var map = Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0());\n    var runParserT$prime1 = runParserT$prime(dictMonadRec);\n    return function (s) {\n        return function (p) {\n            var initialState = new ParseState(s, initialPos, false);\n            return map(Data_Tuple.fst)(runParserT$prime1(initialState)(p));\n        };\n    };\n};\nvar runParserT1 = /* #__PURE__ */ runParserT(Control_Monad_Rec_Class.monadRecIdentity);\nvar runParser = function (s) {\n    var $281 = runParserT1(s);\n    return function ($282) {\n        return unwrap($281($282));\n    };\n};\nvar hoistParserT = function (f) {\n    return function (v) {\n        return function (state1, more, lift1, $$throw, done) {\n            return v(state1, more, function ($283) {\n                return lift1(f($283));\n            }, $$throw, done);\n        };\n    };\n};\nvar getParserT = function (state1, v, v1, v2, done) {\n    return done(state1, state1);\n};\nvar failWithPosition = function (message) {\n    return function (pos) {\n        return throwError(new ParseError(message, pos));\n    };\n};\nvar fail = function (message) {\n    return bindFlipped(failWithPosition(message))(position);\n};\nvar liftEither = function (dictMonad) {\n    return function (f) {\n        if (f instanceof Data_Either.Left) {\n            return fail(f.value0);\n        };\n        if (f instanceof Data_Either.Right) {\n            return pure(f.value0);\n        };\n        throw new Error(\"Failed pattern match at Parsing (line 515, column 16 - line 517, column 20): \" + [ f.constructor.name ]);\n    };\n};\nvar liftExceptT = function (dictMonad) {\n    var lift1 = lift(dictMonad);\n    return function (f) {\n        return bind(lift1(Control_Monad_Except_Trans.runExceptT(f)))(function (v) {\n            if (v instanceof Data_Either.Left) {\n                return fail(v.value0);\n            };\n            if (v instanceof Data_Either.Right) {\n                return pure(v.value0);\n            };\n            throw new Error(\"Failed pattern match at Parsing (line 529, column 41 - line 531, column 20): \" + [ v.constructor.name ]);\n        });\n    };\n};\nvar liftMaybe = function (dictMonad) {\n    return function (message) {\n        return function (f) {\n            if (f instanceof Data_Maybe.Nothing) {\n                return fail(message(Data_Unit.unit));\n            };\n            if (f instanceof Data_Maybe.Just) {\n                return pure(f.value0);\n            };\n            throw new Error(\"Failed pattern match at Parsing (line 501, column 23 - line 503, column 19): \" + [ f.constructor.name ]);\n        };\n    };\n};\nvar plusParserT = {\n    empty: /* #__PURE__ */ fail(\"No alternative\"),\n    Alt0: function () {\n        return altParserT;\n    }\n};\nvar alternativeParserT = {\n    Applicative0: function () {\n        return applicativeParserT;\n    },\n    Plus1: function () {\n        return plusParserT;\n    }\n};\nvar monadPlusParserT = {\n    Monad0: function () {\n        return monadParserT;\n    },\n    Alternative1: function () {\n        return alternativeParserT;\n    }\n};\nvar eqParseError = {\n    eq: function (x) {\n        return function (y) {\n            return x.value0 === y.value0 && eq2(x.value1)(y.value1);\n        };\n    }\n};\nvar ordParseError = {\n    compare: function (x) {\n        return function (y) {\n            var v = compare1(x.value0)(y.value0);\n            if (v instanceof Data_Ordering.LT) {\n                return Data_Ordering.LT.value;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return Data_Ordering.GT.value;\n            };\n            return compare2(x.value1)(y.value1);\n        };\n    },\n    Eq0: function () {\n        return eqParseError;\n    }\n};\nvar consume = /* #__PURE__ */ stateParserT(function (v) {\n    return new Data_Tuple.Tuple(Data_Unit.unit, new ParseState(v.value0, v.value1, true));\n});\nexport {\n    runParser,\n    ParserT,\n    runParserT,\n    runParserT$prime,\n    ParseError,\n    parseErrorMessage,\n    parseErrorPosition,\n    Position,\n    initialPos,\n    consume,\n    position,\n    fail,\n    failWithPosition,\n    region,\n    liftMaybe,\n    liftEither,\n    liftExceptT,\n    ParseState,\n    stateParserT,\n    getParserT,\n    hoistParserT,\n    mapParserT,\n    showParseError,\n    eqParseError,\n    ordParseError,\n    lazyParserT,\n    semigroupParserT,\n    monoidParserT,\n    functorParserT,\n    applyParserT,\n    applicativeParserT,\n    bindParserT,\n    monadParserT,\n    monadRecParserT,\n    monadStateParserT,\n    monadAskParserT,\n    monadReaderParserT,\n    monadThrowParseErrorParse,\n    monadErrorParseErrorParse,\n    altParserT,\n    plusParserT,\n    alternativeParserT,\n    monadPlusParserT,\n    monadTransParserT,\n    genericPosition_,\n    showPosition,\n    eqPosition,\n    ordPosition\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Lazy from \"../Control.Lazy/index.js\";\nimport * as Control_Monad_Error_Class from \"../Control.Monad.Error.Class/index.js\";\nimport * as Control_Monad_Rec_Class from \"../Control.Monad.Rec.Class/index.js\";\nimport * as Control_Plus from \"../Control.Plus/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_List from \"../Data.List/index.js\";\nimport * as Data_List_Lazy from \"../Data.List.Lazy/index.js\";\nimport * as Data_List_NonEmpty from \"../Data.List.NonEmpty/index.js\";\nimport * as Data_List_Types from \"../Data.List.Types/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unfoldable from \"../Data.Unfoldable/index.js\";\nimport * as Data_Unfoldable1 from \"../Data.Unfoldable1/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Parsing from \"../Parsing/index.js\";\nvar alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);\nvar defer = /* #__PURE__ */ Control_Lazy.defer(Parsing.lazyParserT);\nvar voidLeft = /* #__PURE__ */ Data_Functor.voidLeft(Parsing.functorParserT);\nvar pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);\nvar applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);\nvar tailRecM = /* #__PURE__ */ Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT);\nvar bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);\nvar mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Parsing.functorParserT);\nvar map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);\nvar manyRec = /* #__PURE__ */ Data_List.manyRec(Parsing.monadRecParserT)(Parsing.alternativeParserT);\nvar $$void = /* #__PURE__ */ Data_Functor[\"void\"](Parsing.functorParserT);\nvar catchError = /* #__PURE__ */ Control_Monad_Error_Class.catchError(Parsing.monadErrorParseErrorParse);\nvar throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Parsing.monadThrowParseErrorParse);\nvar show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);\nvar apply = /* #__PURE__ */ Control_Apply.apply(Parsing.applyParserT);\nvar applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);\nvar empty = /* #__PURE__ */ Control_Plus.empty(Parsing.plusParserT);\nvar foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_List_Types.foldableList);\nvar withLazyErrorMessage = function (p) {\n    return function (msg) {\n        return alt(p)(defer(function (v) {\n            return Parsing.fail(\"Expected \" + msg(Data_Unit.unit));\n        }));\n    };\n};\nvar withErrorMessage = function (p) {\n    return function (msg) {\n        return alt(p)(Parsing.fail(\"Expected \" + msg));\n    };\n};\nvar tryRethrow = function (v) {\n    return function (v1, more, lift, $$throw, done) {\n        return v(v1, more, lift, function (v2, v3) {\n            return $$throw(new Parsing.ParseState(v2.value0, v2.value1, v1.value2), new Parsing.ParseError(v3.value0, v1.value1));\n        }, done);\n    };\n};\nvar $$try = function (v) {\n    return function (v1, more, lift, $$throw, done) {\n        return v(v1, more, lift, function (v2, err) {\n            return $$throw(new Parsing.ParseState(v2.value0, v2.value1, v1.value2), err);\n        }, done);\n    };\n};\nvar skipMany1 = function (p) {\n    var go = function (v) {\n        return alt(voidLeft(p)(new Control_Monad_Rec_Class.Loop(Data_Unit.unit)))(pure(new Control_Monad_Rec_Class.Done(Data_Unit.unit)));\n    };\n    return applySecond(p)(tailRecM(go)(Data_Unit.unit));\n};\nvar skipMany = function (p) {\n    return alt(skipMany1(p))(pure(Data_Unit.unit));\n};\nvar sepEndBy1 = function (p) {\n    return function (sep) {\n        var go = function (acc) {\n            var done = defer(function (v) {\n                return pure(new Control_Monad_Rec_Class.Done(Data_List.reverse(acc)));\n            });\n            var nextOne = bind(sep)(function () {\n                return alt(mapFlipped(p)(function (a) {\n                    return new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(a, acc));\n                }))(done);\n            });\n            return alt(nextOne)(done);\n        };\n        return bind(p)(function (a) {\n            return alt(map(Data_List_NonEmpty[\"cons$prime\"](a))(tailRecM(go)(Data_List_Types.Nil.value)))(pure(Data_List_NonEmpty.singleton(a)));\n        });\n    };\n};\nvar sepEndBy = function (p) {\n    return function (sep) {\n        return alt(map(Data_List_NonEmpty.toList)(sepEndBy1(p)(sep)))(pure(Data_List_Types.Nil.value));\n    };\n};\nvar sepBy1 = function (p) {\n    return function (sep) {\n        return bind(p)(function (a) {\n            return bind(manyRec(applySecond(sep)(p)))(function (as) {\n                return pure(Data_List_NonEmpty[\"cons$prime\"](a)(as));\n            });\n        });\n    };\n};\nvar sepBy = function (p) {\n    return function (sep) {\n        return alt(map(Data_List_NonEmpty.toList)(sepBy1(p)(sep)))(pure(Data_List_Types.Nil.value));\n    };\n};\nvar optional = function (p) {\n    return alt($$void(p))(pure(Data_Unit.unit));\n};\nvar option = function (a) {\n    return function (p) {\n        return alt(p)(pure(a));\n    };\n};\nvar optionMaybe = function (p) {\n    return option(Data_Maybe.Nothing.value)(map(Data_Maybe.Just.create)(p));\n};\nvar notFollowedBy = function (p) {\n    return $$try(alt(applySecond($$try(p))(Parsing.fail(\"Negated parser succeeded\")))(pure(Data_Unit.unit)));\n};\nvar manyTill_ = function (p) {\n    return function (end) {\n        var go = function (xs) {\n            return alt(bind(end)(function (t) {\n                return pure(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(Data_List.reverse(xs), t)));\n            }))(bind(p)(function (x) {\n                return pure(new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(x, xs)));\n            }));\n        };\n        return tailRecM(go)(Data_List_Types.Nil.value);\n    };\n};\nvar manyTill = function (p) {\n    return function (end) {\n        var go = function (acc) {\n            return alt(mapFlipped(end)(function (v) {\n                return new Control_Monad_Rec_Class.Done(Data_List.reverse(acc));\n            }))(mapFlipped(p)(function (x) {\n                return new Control_Monad_Rec_Class.Loop(new Data_List_Types.Cons(x, acc));\n            }));\n        };\n        return tailRecM(go)(Data_List_Types.Nil.value);\n    };\n};\nvar manyIndex = function (from) {\n    return function (to) {\n        return function (p) {\n            var go = function (v) {\n                var $72 = v.value0 >= to;\n                if ($72) {\n                    return pure(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v.value0, Data_List.reverse(v.value1))));\n                };\n                return catchError(bind(p(v.value0))(function (x) {\n                    return pure(new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v.value0 + 1 | 0, new Data_List_Types.Cons(x, v.value1))));\n                }))(function (e) {\n                    var $73 = v.value0 >= from;\n                    if ($73) {\n                        return pure(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v.value0, Data_List.reverse(v.value1))));\n                    };\n                    return throwError(new Parsing.ParseError(Parsing.parseErrorMessage(e) + (\" (at least \" + (show(from) + (\", but only parsed \" + (show(v.value0) + \")\")))), Parsing.parseErrorPosition(e)));\n                });\n            };\n            var $76 = from > to || from < 0;\n            if ($76) {\n                return pure(new Data_Tuple.Tuple(0, Data_List_Types.Nil.value));\n            };\n            return tailRecM(go)(new Data_Tuple.Tuple(0, Data_List_Types.Nil.value));\n        };\n    };\n};\nvar many1Till_ = function (p) {\n    return function (end) {\n        return bind(p)(function (x) {\n            return bind(manyTill_(p)(end))(function (v) {\n                return pure(new Data_Tuple.Tuple(Data_List_NonEmpty[\"cons$prime\"](x)(v.value0), v.value1));\n            });\n        });\n    };\n};\nvar many1Till = function (p) {\n    return function (end) {\n        return apply(map(Data_List_NonEmpty[\"cons$prime\"])(p))(manyTill(p)(end));\n    };\n};\nvar many1 = function (p) {\n    return apply(map(Data_List_NonEmpty[\"cons$prime\"])(p))(manyRec(p));\n};\nvar many = manyRec;\nvar lookAhead = function (v) {\n    return function (state1, more, lift, $$throw, done) {\n        return v(state1, more, lift, function (v1, err) {\n            return $$throw(state1, err);\n        }, function (v1, res) {\n            return done(state1, res);\n        });\n    };\n};\nvar endBy1 = function (p) {\n    return function (sep) {\n        return many1(applyFirst(p)(sep));\n    };\n};\nvar endBy = function (p) {\n    return function (sep) {\n        return manyRec(applyFirst(p)(sep));\n    };\n};\nvar choice = function (dictFoldable) {\n    var go = function (p1) {\n        return function (v) {\n            if (v instanceof Data_Maybe.Nothing) {\n                return new Data_Maybe.Just(p1);\n            };\n            if (v instanceof Data_Maybe.Just) {\n                return new Data_Maybe.Just(alt(p1)(v.value0));\n            };\n            throw new Error(\"Failed pattern match at Parsing.Combinators (line 358, column 11 - line 360, column 32): \" + [ v.constructor.name ]);\n        };\n    };\n    var $95 = Data_Maybe.fromMaybe(empty);\n    var $96 = Data_Foldable.foldr(dictFoldable)(go)(Data_Maybe.Nothing.value);\n    return function ($97) {\n        return $95($96($97));\n    };\n};\nvar chainr1 = function (p) {\n    return function (f) {\n        var apply1 = function (y) {\n            return function (v) {\n                return v.value1(v.value0)(y);\n            };\n        };\n        var go = function (v) {\n            return alt(bind(f)(function (op) {\n                return bind(p)(function (a) {\n                    return pure(new Control_Monad_Rec_Class.Loop({\n                        last: a,\n                        init: new Data_List_Types.Cons(new Data_Tuple.Tuple(v.last, op), v.init)\n                    }));\n                });\n            }))(defer(function (v1) {\n                return pure(new Control_Monad_Rec_Class.Done(foldl(apply1)(v.last)(v.init)));\n            }));\n        };\n        return bind(p)(function (a) {\n            return tailRecM(go)({\n                last: a,\n                init: Data_List_Types.Nil.value\n            });\n        });\n    };\n};\nvar chainr = function (p) {\n    return function (f) {\n        return function (a) {\n            return alt(chainr1(p)(f))(pure(a));\n        };\n    };\n};\nvar chainl1 = function (p) {\n    return function (f) {\n        var go = function (a) {\n            return alt(bind(f)(function (op) {\n                return bind(p)(function (a$prime) {\n                    return pure(new Control_Monad_Rec_Class.Loop(op(a)(a$prime)));\n                });\n            }))(pure(new Control_Monad_Rec_Class.Done(a)));\n        };\n        return bind(p)(function (a) {\n            return tailRecM(go)(a);\n        });\n    };\n};\nvar chainl = function (p) {\n    return function (f) {\n        return function (a) {\n            return alt(chainl1(p)(f))(pure(a));\n        };\n    };\n};\nvar between = function (open) {\n    return function (close) {\n        return function (p) {\n            return applyFirst(applySecond(open)(p))(close);\n        };\n    };\n};\nvar asErrorMessage = /* #__PURE__ */ Data_Function.flip(withErrorMessage);\nvar advance = function (p) {\n    return bind(Parsing.position)(function (v) {\n        return bind(p)(function (x) {\n            return bind(Parsing.position)(function (v1) {\n                var $92 = v1.index > v.index;\n                if ($92) {\n                    return pure(x);\n                };\n                return Parsing.fail(\"Expected progress\");\n            });\n        });\n    });\n};\nexport {\n    $$try as try,\n    tryRethrow,\n    lookAhead,\n    choice,\n    between,\n    notFollowedBy,\n    option,\n    optionMaybe,\n    optional,\n    many,\n    many1,\n    manyTill,\n    manyTill_,\n    many1Till,\n    many1Till_,\n    manyIndex,\n    skipMany,\n    skipMany1,\n    sepBy,\n    sepBy1,\n    sepEndBy,\n    sepEndBy1,\n    endBy,\n    endBy1,\n    chainl,\n    chainl1,\n    chainr,\n    chainr1,\n    advance,\n    withErrorMessage,\n    withLazyErrorMessage,\n    asErrorMessage\n};\nexport {\n    alt,\n    empty\n} from \"../Control.Plus/index.js\";\nexport {\n    replicateM\n} from \"../Data.List.Lazy/index.js\";\nexport {\n    replicateA\n} from \"../Data.Unfoldable/index.js\";\nexport {\n    replicate1A\n} from \"../Data.Unfoldable1/index.js\";\n", "//------------------------------------------------------------------------------\n// Array creation --------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const range = function (start) {\n  return function (end) {\n    var step = start > end ? -1 : 1;\n    var result = new Array(step * (end - start) + 1);\n    var i = start, n = 0;\n    while (i !== end) {\n      result[n++] = i;\n      i += step;\n    }\n    result[n] = i;\n    return result;\n  };\n};\n\nvar replicateFill = function (count) {\n  return function (value) {\n    if (count < 1) {\n      return [];\n    }\n    var result = new Array(count);\n    return result.fill(value);\n  };\n};\n\nvar replicatePolyfill = function (count) {\n  return function (value) {\n    var result = [];\n    var n = 0;\n    for (var i = 0; i < count; i++) {\n      result[n++] = value;\n    }\n    return result;\n  };\n};\n\n// In browsers that have Array.prototype.fill we use it, as it's faster.\nexport const replicate = typeof Array.prototype.fill === \"function\" ? replicateFill : replicatePolyfill;\n\nexport const fromFoldableImpl = (function () {\n  function Cons(head, tail) {\n    this.head = head;\n    this.tail = tail;\n  }\n  var emptyList = {};\n\n  function curryCons(head) {\n    return function (tail) {\n      return new Cons(head, tail);\n    };\n  }\n\n  function listToArray(list) {\n    var result = [];\n    var count = 0;\n    var xs = list;\n    while (xs !== emptyList) {\n      result[count++] = xs.head;\n      xs = xs.tail;\n    }\n    return result;\n  }\n\n  return function (foldr) {\n    return function (xs) {\n      return listToArray(foldr(curryCons)(emptyList)(xs));\n    };\n  };\n})();\n\n//------------------------------------------------------------------------------\n// Array size ------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const length = function (xs) {\n  return xs.length;\n};\n\n//------------------------------------------------------------------------------\n// Non-indexed reads -----------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const unconsImpl = function (empty) {\n  return function (next) {\n    return function (xs) {\n      return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));\n    };\n  };\n};\n\n//------------------------------------------------------------------------------\n// Indexed operations ----------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const indexImpl = function (just) {\n  return function (nothing) {\n    return function (xs) {\n      return function (i) {\n        return i < 0 || i >= xs.length ? nothing :  just(xs[i]);\n      };\n    };\n  };\n};\n\nexport const findMapImpl = function (nothing) {\n  return function (isJust) {\n    return function (f) {\n      return function (xs) {\n        for (var i = 0; i < xs.length; i++) {\n          var result = f(xs[i]);\n          if (isJust(result)) return result;\n        }\n        return nothing;\n      };\n    };\n  };\n};\n\nexport const findIndexImpl = function (just) {\n  return function (nothing) {\n    return function (f) {\n      return function (xs) {\n        for (var i = 0, l = xs.length; i < l; i++) {\n          if (f(xs[i])) return just(i);\n        }\n        return nothing;\n      };\n    };\n  };\n};\n\nexport const findLastIndexImpl = function (just) {\n  return function (nothing) {\n    return function (f) {\n      return function (xs) {\n        for (var i = xs.length - 1; i >= 0; i--) {\n          if (f(xs[i])) return just(i);\n        }\n        return nothing;\n      };\n    };\n  };\n};\n\nexport const _insertAt = function (just) {\n  return function (nothing) {\n    return function (i) {\n      return function (a) {\n        return function (l) {\n          if (i < 0 || i > l.length) return nothing;\n          var l1 = l.slice();\n          l1.splice(i, 0, a);\n          return just(l1);\n        };\n      };\n    };\n  };\n};\n\nexport const _deleteAt = function (just) {\n  return function (nothing) {\n    return function (i) {\n      return function (l) {\n        if (i < 0 || i >= l.length) return nothing;\n        var l1 = l.slice();\n        l1.splice(i, 1);\n        return just(l1);\n      };\n    };\n  };\n};\n\nexport const _updateAt = function (just) {\n  return function (nothing) {\n    return function (i) {\n      return function (a) {\n        return function (l) {\n          if (i < 0 || i >= l.length) return nothing;\n          var l1 = l.slice();\n          l1[i] = a;\n          return just(l1);\n        };\n      };\n    };\n  };\n};\n\n//------------------------------------------------------------------------------\n// Transformations -------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const reverse = function (l) {\n  return l.slice().reverse();\n};\n\nexport const concat = function (xss) {\n  if (xss.length <= 10000) {\n    // This method is faster, but it crashes on big arrays.\n    // So we use it when can and fallback to simple variant otherwise.\n    return Array.prototype.concat.apply([], xss);\n  }\n\n  var result = [];\n  for (var i = 0, l = xss.length; i < l; i++) {\n    var xs = xss[i];\n    for (var j = 0, m = xs.length; j < m; j++) {\n      result.push(xs[j]);\n    }\n  }\n  return result;\n};\n\nexport const filter = function (f) {\n  return function (xs) {\n    return xs.filter(f);\n  };\n};\n\nexport const partition = function (f) {\n  return function (xs) {\n    var yes = [];\n    var no  = [];\n    for (var i = 0; i < xs.length; i++) {\n      var x = xs[i];\n      if (f(x))\n        yes.push(x);\n      else\n        no.push(x);\n    }\n    return { yes: yes, no: no };\n  };\n};\n\nexport const scanl = function (f) {\n  return function (b) {\n    return function (xs) {\n      var len = xs.length;\n      var acc = b;\n      var out = new Array(len);\n      for (var i = 0; i < len; i++) {\n        acc = f(acc)(xs[i]);\n        out[i] = acc;\n      }\n      return out;\n    };\n  };\n};\n\nexport const scanr = function (f) {\n  return function (b) {\n    return function (xs) {\n      var len = xs.length;\n      var acc = b;\n      var out = new Array(len);\n      for (var i = len - 1; i >= 0; i--) {\n        acc = f(xs[i])(acc);\n        out[i] = acc;\n      }\n      return out;\n    };\n  };\n};\n\n//------------------------------------------------------------------------------\n// Sorting ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const sortByImpl = (function () {\n  function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {\n    var mid;\n    var i;\n    var j;\n    var k;\n    var x;\n    var y;\n    var c;\n\n    mid = from + ((to - from) >> 1);\n    if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);\n    if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);\n\n    i = from;\n    j = mid;\n    k = from;\n    while (i < mid && j < to) {\n      x = xs2[i];\n      y = xs2[j];\n      c = fromOrdering(compare(x)(y));\n      if (c > 0) {\n        xs1[k++] = y;\n        ++j;\n      }\n      else {\n        xs1[k++] = x;\n        ++i;\n      }\n    }\n    while (i < mid) {\n      xs1[k++] = xs2[i++];\n    }\n    while (j < to) {\n      xs1[k++] = xs2[j++];\n    }\n  }\n\n  return function (compare) {\n    return function (fromOrdering) {\n      return function (xs) {\n        var out;\n\n        if (xs.length < 2) return xs;\n\n        out = xs.slice(0);\n        mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);\n\n        return out;\n      };\n    };\n  };\n})();\n\n//------------------------------------------------------------------------------\n// Subarrays -------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const slice = function (s) {\n  return function (e) {\n    return function (l) {\n      return l.slice(s, e);\n    };\n  };\n};\n\n//------------------------------------------------------------------------------\n// Zipping ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const zipWith = function (f) {\n  return function (xs) {\n    return function (ys) {\n      var l = xs.length < ys.length ? xs.length : ys.length;\n      var result = new Array(l);\n      for (var i = 0; i < l; i++) {\n        result[i] = f(xs[i])(ys[i]);\n      }\n      return result;\n    };\n  };\n};\n\n//------------------------------------------------------------------------------\n// Folding ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const any = function (p) {\n  return function (xs) {\n    var len = xs.length;\n    for (var i = 0; i < len; i++) {\n      if (p(xs[i])) return true;\n    }\n    return false;\n  };\n};\n\nexport const all = function (p) {\n  return function (xs) {\n    var len = xs.length;\n    for (var i = 0; i < len; i++) {\n      if (!p(xs[i])) return false;\n    }\n    return true;\n  };\n};\n\n//------------------------------------------------------------------------------\n// Partial ---------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nexport const unsafeIndexImpl = function (xs) {\n  return function (n) {\n    return xs[n];\n  };\n};\n", "function newSTArray () {\n  return [];\n}\nexport { newSTArray as new };\n\nexport const peekImpl = function (just) {\n  return function (nothing) {\n    return function (i) {\n      return function (xs) {\n        return function () {\n          return i >= 0 && i < xs.length ? just(xs[i]) : nothing;\n        };\n      };\n    };\n  };\n};\n\nexport const poke = function (i) {\n  return function (a) {\n    return function (xs) {\n      return function () {\n        var ret = i >= 0 && i < xs.length;\n        if (ret) xs[i] = a;\n        return ret;\n      };\n    };\n  };\n};\n\nexport const length = function (xs) {\n  return function () {\n    return xs.length;\n  };\n};\n\nexport const popImpl = function (just) {\n  return function (nothing) {\n    return function (xs) {\n      return function () {\n        return xs.length > 0 ? just(xs.pop()) : nothing;\n      };\n    };\n  };\n};\n\nexport const pushAll = function (as) {\n  return function (xs) {\n    return function () {\n      return xs.push.apply(xs, as);\n    };\n  };\n};\n\nexport const shiftImpl = function (just) {\n  return function (nothing) {\n    return function (xs) {\n      return function () {\n        return xs.length > 0 ? just(xs.shift()) : nothing;\n      };\n    };\n  };\n};\n\nexport const unshiftAll = function (as) {\n  return function (xs) {\n    return function () {\n      return xs.unshift.apply(xs, as);\n    };\n  };\n};\n\nexport const splice = function (i) {\n  return function (howMany) {\n    return function (bs) {\n      return function (xs) {\n        return function () {\n          return xs.splice.apply(xs, [i, howMany].concat(bs));\n        };\n      };\n    };\n  };\n};\n\nexport const unsafeFreeze = function (xs) {\n  return function () {\n    return xs;\n  };\n};\n\nexport const unsafeThaw = function (xs) {\n  return function () {\n    return xs;\n  };\n};\n\nfunction copyImpl(xs) {\n  return function () {\n    return xs.slice();\n  };\n}\n\nexport const freeze = copyImpl;\n\nexport const thaw = copyImpl;\n\nexport const sortByImpl = (function () {\n  function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {\n    var mid;\n    var i;\n    var j;\n    var k;\n    var x;\n    var y;\n    var c;\n\n    mid = from + ((to - from) >> 1);\n    if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);\n    if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);\n\n    i = from;\n    j = mid;\n    k = from;\n    while (i < mid && j < to) {\n      x = xs2[i];\n      y = xs2[j];\n      c = fromOrdering(compare(x)(y));\n      if (c > 0) {\n        xs1[k++] = y;\n        ++j;\n      }\n      else {\n        xs1[k++] = x;\n        ++i;\n      }\n    }\n    while (i < mid) {\n      xs1[k++] = xs2[i++];\n    }\n    while (j < to) {\n      xs1[k++] = xs2[j++];\n    }\n  }\n\n  return function (compare) {\n    return function (fromOrdering) {\n      return function (xs) {\n        return function () {\n          if (xs.length < 2) return xs;\n\n          mergeFromTo(compare, fromOrdering, xs, xs.slice(0), 0, xs.length);\n\n          return xs;\n        };\n      };\n    };\n  };\n})();\n\nexport const toAssocArray = function (xs) {\n  return function () {\n    var n = xs.length;\n    var as = new Array(n);\n    for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };\n    return as;\n  };\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Control_Lazy from \"../Control.Lazy/index.js\";\nimport * as Control_Monad_Rec_Class from \"../Control.Monad.Rec.Class/index.js\";\nimport * as Control_Monad_ST_Internal from \"../Control.Monad.ST.Internal/index.js\";\nimport * as Data_Array_ST from \"../Data.Array.ST/index.js\";\nimport * as Data_Array_ST_Iterator from \"../Data.Array.ST.Iterator/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_FunctorWithIndex from \"../Data.FunctorWithIndex/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Semigroup from \"../Data.Semigroup/index.js\";\nimport * as Data_Traversable from \"../Data.Traversable/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unfoldable from \"../Data.Unfoldable/index.js\";\nvar sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray);\nvar traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Control_Monad_ST_Internal.applicativeST);\nvar map = /* #__PURE__ */ Data_Functor.map(Control_Monad_ST_Internal.functorST);\nvar when = /* #__PURE__ */ Control_Applicative.when(Control_Monad_ST_Internal.applicativeST);\nvar $$void = /* #__PURE__ */ Data_Functor[\"void\"](Control_Monad_ST_Internal.functorST);\nvar intercalate1 = /* #__PURE__ */ Data_Foldable.intercalate(Data_Foldable.foldableArray);\nvar apply = /* #__PURE__ */ Control_Apply.apply(Data_Maybe.applyMaybe);\nvar map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);\nvar map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);\nvar fromJust = /* #__PURE__ */ Data_Maybe.fromJust();\nvar notEq = /* #__PURE__ */ Data_Eq.notEq(Data_Ordering.eqOrdering);\nvar eq1 = /* #__PURE__ */ Data_Eq.eq(Data_Ordering.eqOrdering);\nvar foldMap1 = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray);\nvar fold1 = /* #__PURE__ */ Data_Foldable.fold(Data_Foldable.foldableArray);\nvar append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);\nvar traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);\nvar zipWithA = function (dictApplicative) {\n    var sequence1 = sequence(dictApplicative);\n    return function (f) {\n        return function (xs) {\n            return function (ys) {\n                return sequence1($foreign.zipWith(f)(xs)(ys));\n            };\n        };\n    };\n};\nvar zip = /* #__PURE__ */ (function () {\n    return $foreign.zipWith(Data_Tuple.Tuple.create);\n})();\nvar updateAtIndices = function (dictFoldable) {\n    var traverse_1 = traverse_(dictFoldable);\n    return function (us) {\n        return function (xs) {\n            return Data_Array_ST.withArray(function (res) {\n                return traverse_1(function (v) {\n                    return Data_Array_ST.poke(v.value0)(v.value1)(res);\n                })(us);\n            })(xs)();\n        };\n    };\n};\nvar updateAt = /* #__PURE__ */ (function () {\n    return $foreign[\"_updateAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar unsafeIndex = function () {\n    return $foreign.unsafeIndexImpl;\n};\nvar unsafeIndex1 = /* #__PURE__ */ unsafeIndex();\nvar uncons = /* #__PURE__ */ (function () {\n    return $foreign.unconsImpl(Data_Function[\"const\"](Data_Maybe.Nothing.value))(function (x) {\n        return function (xs) {\n            return new Data_Maybe.Just({\n                head: x,\n                tail: xs\n            });\n        };\n    });\n})();\nvar toUnfoldable = function (dictUnfoldable) {\n    var unfoldr = Data_Unfoldable.unfoldr(dictUnfoldable);\n    return function (xs) {\n        var len = $foreign.length(xs);\n        var f = function (i) {\n            if (i < len) {\n                return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex1(xs)(i), i + 1 | 0));\n            };\n            if (Data_Boolean.otherwise) {\n                return Data_Maybe.Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.Array (line 158, column 3 - line 160, column 26): \" + [ i.constructor.name ]);\n        };\n        return unfoldr(f)(0);\n    };\n};\nvar take = function (n) {\n    return function (xs) {\n        var $149 = n < 1;\n        if ($149) {\n            return [  ];\n        };\n        return $foreign.slice(0)(n)(xs);\n    };\n};\nvar tail = /* #__PURE__ */ (function () {\n    return $foreign.unconsImpl(Data_Function[\"const\"](Data_Maybe.Nothing.value))(function (v) {\n        return function (xs) {\n            return new Data_Maybe.Just(xs);\n        };\n    });\n})();\nvar splitAt = function (v) {\n    return function (v1) {\n        if (v <= 0) {\n            return {\n                before: [  ],\n                after: v1\n            };\n        };\n        return {\n            before: $foreign.slice(0)(v)(v1),\n            after: $foreign.slice(v)($foreign.length(v1))(v1)\n        };\n    };\n};\nvar sortBy = function (comp) {\n    return $foreign.sortByImpl(comp)(function (v) {\n        if (v instanceof Data_Ordering.GT) {\n            return 1;\n        };\n        if (v instanceof Data_Ordering.EQ) {\n            return 0;\n        };\n        if (v instanceof Data_Ordering.LT) {\n            return -1 | 0;\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 870, column 31 - line 873, column 11): \" + [ v.constructor.name ]);\n    });\n};\nvar sortWith = function (dictOrd) {\n    var comparing = Data_Ord.comparing(dictOrd);\n    return function (f) {\n        return sortBy(comparing(f));\n    };\n};\nvar sortWith1 = /* #__PURE__ */ sortWith(Data_Ord.ordInt);\nvar sort = function (dictOrd) {\n    var compare = Data_Ord.compare(dictOrd);\n    return function (xs) {\n        return sortBy(compare)(xs);\n    };\n};\nvar snoc = function (xs) {\n    return function (x) {\n        return Data_Array_ST.withArray(Data_Array_ST.push(x))(xs)();\n    };\n};\nvar singleton = function (a) {\n    return [ a ];\n};\nvar $$null = function (xs) {\n    return $foreign.length(xs) === 0;\n};\nvar nubByEq = function (eq2) {\n    return function (xs) {\n        return (function __do() {\n            var arr = Data_Array_ST[\"new\"]();\n            Control_Monad_ST_Internal.foreach(xs)(function (x) {\n                return function __do() {\n                    var e = map((function () {\n                        var $183 = $foreign.any(function (v) {\n                            return eq2(v)(x);\n                        });\n                        return function ($184) {\n                            return !$183($184);\n                        };\n                    })())(Data_Array_ST.unsafeFreeze(arr))();\n                    return when(e)($$void(Data_Array_ST.push(x)(arr)))();\n                };\n            })();\n            return Data_Array_ST.unsafeFreeze(arr)();\n        })();\n    };\n};\nvar nubEq = function (dictEq) {\n    return nubByEq(Data_Eq.eq(dictEq));\n};\nvar modifyAtIndices = function (dictFoldable) {\n    var traverse_1 = traverse_(dictFoldable);\n    return function (is) {\n        return function (f) {\n            return function (xs) {\n                return Data_Array_ST.withArray(function (res) {\n                    return traverse_1(function (i) {\n                        return Data_Array_ST.modify(i)(f)(res);\n                    })(is);\n                })(xs)();\n            };\n        };\n    };\n};\nvar mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray);\nvar intersperse = function (a) {\n    return function (arr) {\n        var v = $foreign.length(arr);\n        if (v < 2) {\n            return arr;\n        };\n        if (Data_Boolean.otherwise) {\n            return Data_Array_ST.run((function () {\n                var unsafeGetElem = function (idx) {\n                    return unsafeIndex1(arr)(idx);\n                };\n                return function __do() {\n                    var out = Data_Array_ST[\"new\"]();\n                    Data_Array_ST.push(unsafeGetElem(0))(out)();\n                    Control_Monad_ST_Internal[\"for\"](1)(v)(function (idx) {\n                        return function __do() {\n                            Data_Array_ST.push(a)(out)();\n                            return $$void(Data_Array_ST.push(unsafeGetElem(idx))(out))();\n                        };\n                    })();\n                    return out;\n                };\n            })());\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 613, column 21 - line 622, column 19): \" + [ v.constructor.name ]);\n    };\n};\nvar intercalate = function (dictMonoid) {\n    return intercalate1(dictMonoid);\n};\nvar insertAt = /* #__PURE__ */ (function () {\n    return $foreign[\"_insertAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar init = function (xs) {\n    if ($$null(xs)) {\n        return Data_Maybe.Nothing.value;\n    };\n    if (Data_Boolean.otherwise) {\n        return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1 | 0)(xs));\n    };\n    throw new Error(\"Failed pattern match at Data.Array (line 340, column 1 - line 340, column 45): \" + [ xs.constructor.name ]);\n};\nvar index = /* #__PURE__ */ (function () {\n    return $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar last = function (xs) {\n    return index(xs)($foreign.length(xs) - 1 | 0);\n};\nvar unsnoc = function (xs) {\n    return apply(map1(function (v) {\n        return function (v1) {\n            return {\n                init: v,\n                last: v1\n            };\n        };\n    })(init(xs)))(last(xs));\n};\nvar modifyAt = function (i) {\n    return function (f) {\n        return function (xs) {\n            var go = function (x) {\n                return updateAt(i)(f(x))(xs);\n            };\n            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));\n        };\n    };\n};\nvar span = function (p) {\n    return function (arr) {\n        var go = function ($copy_i) {\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(i) {\n                var v = index(arr)(i);\n                if (v instanceof Data_Maybe.Just) {\n                    var $156 = p(v.value0);\n                    if ($156) {\n                        $copy_i = i + 1 | 0;\n                        return;\n                    };\n                    $tco_done = true;\n                    return new Data_Maybe.Just(i);\n                };\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return Data_Maybe.Nothing.value;\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 1005, column 5 - line 1007, column 25): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($copy_i);\n            };\n            return $tco_result;\n        };\n        var breakIndex = go(0);\n        if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {\n            return {\n                init: [  ],\n                rest: arr\n            };\n        };\n        if (breakIndex instanceof Data_Maybe.Just) {\n            return {\n                init: $foreign.slice(0)(breakIndex.value0)(arr),\n                rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)\n            };\n        };\n        if (breakIndex instanceof Data_Maybe.Nothing) {\n            return {\n                init: arr,\n                rest: [  ]\n            };\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 992, column 3 - line 998, column 30): \" + [ breakIndex.constructor.name ]);\n    };\n};\nvar takeWhile = function (p) {\n    return function (xs) {\n        return (span(p)(xs)).init;\n    };\n};\nvar unzip = function (xs) {\n    return (function __do() {\n        var fsts = Data_Array_ST[\"new\"]();\n        var snds = Data_Array_ST[\"new\"]();\n        var iter = Data_Array_ST_Iterator.iterator(function (v) {\n            return index(xs)(v);\n        })();\n        Data_Array_ST_Iterator.iterate(iter)(function (v) {\n            return function __do() {\n                $$void(Data_Array_ST.push(v.value0)(fsts))();\n                return $$void(Data_Array_ST.push(v.value1)(snds))();\n            };\n        })();\n        var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();\n        var snds$prime = Data_Array_ST.unsafeFreeze(snds)();\n        return new Data_Tuple.Tuple(fsts$prime, snds$prime);\n    })();\n};\nvar head = function (xs) {\n    return index(xs)(0);\n};\nvar nubBy = function (comp) {\n    return function (xs) {\n        var indexedAndSorted = sortBy(function (x) {\n            return function (y) {\n                return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));\n            };\n        })(mapWithIndex(Data_Tuple.Tuple.create)(xs));\n        var v = head(indexedAndSorted);\n        if (v instanceof Data_Maybe.Nothing) {\n            return [  ];\n        };\n        if (v instanceof Data_Maybe.Just) {\n            return map2(Data_Tuple.snd)(sortWith1(Data_Tuple.fst)((function __do() {\n                var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();\n                Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {\n                    return function __do() {\n                        var lst = map((function () {\n                            var $185 = function ($187) {\n                                return fromJust(last($187));\n                            };\n                            return function ($186) {\n                                return Data_Tuple.snd($185($186));\n                            };\n                        })())(Data_Array_ST.unsafeFreeze(result))();\n                        return when(notEq(comp(lst)(v1.value1))(Data_Ordering.EQ.value))($$void(Data_Array_ST.push(v1)(result)))();\n                    };\n                })();\n                return Data_Array_ST.unsafeFreeze(result)();\n            })()));\n        };\n        throw new Error(\"Failed pattern match at Data.Array (line 1085, column 17 - line 1093, column 29): \" + [ v.constructor.name ]);\n    };\n};\nvar nub = function (dictOrd) {\n    return nubBy(Data_Ord.compare(dictOrd));\n};\nvar groupBy = function (op) {\n    return function (xs) {\n        return (function __do() {\n            var result = Data_Array_ST[\"new\"]();\n            var iter = Data_Array_ST_Iterator.iterator(function (v) {\n                return index(xs)(v);\n            })();\n            Data_Array_ST_Iterator.iterate(iter)(function (x) {\n                return $$void(function __do() {\n                    var sub1 = Data_Array_ST[\"new\"]();\n                    Data_Array_ST.push(x)(sub1)();\n                    Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub1)();\n                    var grp = Data_Array_ST.unsafeFreeze(sub1)();\n                    return Data_Array_ST.push(grp)(result)();\n                });\n            })();\n            return Data_Array_ST.unsafeFreeze(result)();\n        })();\n    };\n};\nvar groupAllBy = function (cmp) {\n    var $188 = groupBy(function (x) {\n        return function (y) {\n            return eq1(cmp(x)(y))(Data_Ordering.EQ.value);\n        };\n    });\n    var $189 = sortBy(cmp);\n    return function ($190) {\n        return $188($189($190));\n    };\n};\nvar groupAll = function (dictOrd) {\n    return groupAllBy(Data_Ord.compare(dictOrd));\n};\nvar group = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (xs) {\n        return groupBy(eq2)(xs);\n    };\n};\nvar fromFoldable = function (dictFoldable) {\n    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));\n};\nvar foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);\nvar foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);\nvar transpose = function (xs) {\n    var buildNext = function (idx) {\n        return Data_Function.flip(foldl)(Data_Maybe.Nothing.value)(function (acc) {\n            return function (nextArr) {\n                return Data_Maybe.maybe(acc)(function (el) {\n                    return new Data_Maybe.Just(Data_Maybe.maybe([ el ])(Data_Function.flip(snoc)(el))(acc));\n                })(index(nextArr)(idx));\n            };\n        })(xs);\n    };\n    var go = function ($copy_idx) {\n        return function ($copy_allArrays) {\n            var $tco_var_idx = $copy_idx;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(idx, allArrays) {\n                var v = buildNext(idx);\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return allArrays;\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    $tco_var_idx = idx + 1 | 0;\n                    $copy_allArrays = snoc(allArrays)(v.value0);\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 816, column 22 - line 818, column 52): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_idx, $copy_allArrays);\n            };\n            return $tco_result;\n        };\n    };\n    return go(0)([  ]);\n};\nvar foldRecM = function (dictMonadRec) {\n    var Monad0 = dictMonadRec.Monad0();\n    var pure1 = Control_Applicative.pure(Monad0.Applicative0());\n    var bind1 = Control_Bind.bind(Monad0.Bind1());\n    var tailRecM2 = Control_Monad_Rec_Class.tailRecM2(dictMonadRec);\n    return function (f) {\n        return function (b) {\n            return function (array) {\n                var go = function (res) {\n                    return function (i) {\n                        if (i >= $foreign.length(array)) {\n                            return pure1(new Control_Monad_Rec_Class.Done(res));\n                        };\n                        if (Data_Boolean.otherwise) {\n                            return bind1(f(res)(unsafeIndex1(array)(i)))(function (res$prime) {\n                                return pure1(new Control_Monad_Rec_Class.Loop({\n                                    a: res$prime,\n                                    b: i + 1 | 0\n                                }));\n                            });\n                        };\n                        throw new Error(\"Failed pattern match at Data.Array (line 1304, column 3 - line 1308, column 42): \" + [ res.constructor.name, i.constructor.name ]);\n                    };\n                };\n                return tailRecM2(go)(b)(0);\n            };\n        };\n    };\n};\nvar foldMap = function (dictMonoid) {\n    return foldMap1(dictMonoid);\n};\nvar foldM = function (dictMonad) {\n    var pure1 = Control_Applicative.pure(dictMonad.Applicative0());\n    var bind1 = Control_Bind.bind(dictMonad.Bind1());\n    return function (f) {\n        return function (b) {\n            return $foreign.unconsImpl(function (v) {\n                return pure1(b);\n            })(function (a) {\n                return function (as) {\n                    return bind1(f(b)(a))(function (b$prime) {\n                        return foldM(dictMonad)(f)(b$prime)(as);\n                    });\n                };\n            });\n        };\n    };\n};\nvar fold = function (dictMonoid) {\n    return fold1(dictMonoid);\n};\nvar findMap = /* #__PURE__ */ (function () {\n    return $foreign.findMapImpl(Data_Maybe.Nothing.value)(Data_Maybe.isJust);\n})();\nvar findLastIndex = /* #__PURE__ */ (function () {\n    return $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar insertBy = function (cmp) {\n    return function (x) {\n        return function (ys) {\n            var i = Data_Maybe.maybe(0)(function (v) {\n                return v + 1 | 0;\n            })(findLastIndex(function (y) {\n                return eq1(cmp(x)(y))(Data_Ordering.GT.value);\n            })(ys));\n            return fromJust(insertAt(i)(x)(ys));\n        };\n    };\n};\nvar insert = function (dictOrd) {\n    return insertBy(Data_Ord.compare(dictOrd));\n};\nvar findIndex = /* #__PURE__ */ (function () {\n    return $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar intersectBy = function (eq2) {\n    return function (xs) {\n        return function (ys) {\n            return $foreign.filter(function (x) {\n                return Data_Maybe.isJust(findIndex(eq2(x))(ys));\n            })(xs);\n        };\n    };\n};\nvar intersect = function (dictEq) {\n    return intersectBy(Data_Eq.eq(dictEq));\n};\nvar find = function (f) {\n    return function (xs) {\n        return map1(unsafeIndex1(xs))(findIndex(f)(xs));\n    };\n};\nvar elemLastIndex = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (x) {\n        return findLastIndex(function (v) {\n            return eq2(v)(x);\n        });\n    };\n};\nvar elemIndex = function (dictEq) {\n    var eq2 = Data_Eq.eq(dictEq);\n    return function (x) {\n        return findIndex(function (v) {\n            return eq2(v)(x);\n        });\n    };\n};\nvar notElem = function (dictEq) {\n    var elemIndex1 = elemIndex(dictEq);\n    return function (a) {\n        return function (arr) {\n            return Data_Maybe.isNothing(elemIndex1(a)(arr));\n        };\n    };\n};\nvar elem = function (dictEq) {\n    var elemIndex1 = elemIndex(dictEq);\n    return function (a) {\n        return function (arr) {\n            return Data_Maybe.isJust(elemIndex1(a)(arr));\n        };\n    };\n};\nvar dropWhile = function (p) {\n    return function (xs) {\n        return (span(p)(xs)).rest;\n    };\n};\nvar dropEnd = function (n) {\n    return function (xs) {\n        return take($foreign.length(xs) - n | 0)(xs);\n    };\n};\nvar drop = function (n) {\n    return function (xs) {\n        var $173 = n < 1;\n        if ($173) {\n            return xs;\n        };\n        return $foreign.slice(n)($foreign.length(xs))(xs);\n    };\n};\nvar takeEnd = function (n) {\n    return function (xs) {\n        return drop($foreign.length(xs) - n | 0)(xs);\n    };\n};\nvar deleteAt = /* #__PURE__ */ (function () {\n    return $foreign[\"_deleteAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar deleteBy = function (v) {\n    return function (v1) {\n        return function (v2) {\n            if (v2.length === 0) {\n                return [  ];\n            };\n            return Data_Maybe.maybe(v2)(function (i) {\n                return fromJust(deleteAt(i)(v2));\n            })(findIndex(v(v1))(v2));\n        };\n    };\n};\nvar unionBy = function (eq2) {\n    return function (xs) {\n        return function (ys) {\n            return append(xs)(foldl(Data_Function.flip(deleteBy(eq2)))(nubByEq(eq2)(ys))(xs));\n        };\n    };\n};\nvar union = function (dictEq) {\n    return unionBy(Data_Eq.eq(dictEq));\n};\nvar $$delete = function (dictEq) {\n    return deleteBy(Data_Eq.eq(dictEq));\n};\nvar difference = function (dictEq) {\n    return foldr($$delete(dictEq));\n};\nvar cons = function (x) {\n    return function (xs) {\n        return append([ x ])(xs);\n    };\n};\nvar some = function (dictAlternative) {\n    var apply1 = Control_Apply.apply((dictAlternative.Applicative0()).Apply0());\n    var map3 = Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0());\n    return function (dictLazy) {\n        var defer = Control_Lazy.defer(dictLazy);\n        return function (v) {\n            return apply1(map3(cons)(v))(defer(function (v1) {\n                return many(dictAlternative)(dictLazy)(v);\n            }));\n        };\n    };\n};\nvar many = function (dictAlternative) {\n    var alt = Control_Alt.alt((dictAlternative.Plus1()).Alt0());\n    var pure1 = Control_Applicative.pure(dictAlternative.Applicative0());\n    return function (dictLazy) {\n        return function (v) {\n            return alt(some(dictAlternative)(dictLazy)(v))(pure1([  ]));\n        };\n    };\n};\nvar concatMap = /* #__PURE__ */ Data_Function.flip(/* #__PURE__ */ Control_Bind.bind(Control_Bind.bindArray));\nvar mapMaybe = function (f) {\n    return concatMap((function () {\n        var $191 = Data_Maybe.maybe([  ])(singleton);\n        return function ($192) {\n            return $191(f($192));\n        };\n    })());\n};\nvar filterA = function (dictApplicative) {\n    var traverse1 = traverse(dictApplicative);\n    var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());\n    return function (p) {\n        var $193 = map3(mapMaybe(function (v) {\n            if (v.value1) {\n                return new Data_Maybe.Just(v.value0);\n            };\n            return Data_Maybe.Nothing.value;\n        }));\n        var $194 = traverse1(function (x) {\n            return map3(Data_Tuple.Tuple.create(x))(p(x));\n        });\n        return function ($195) {\n            return $193($194($195));\n        };\n    };\n};\nvar catMaybes = /* #__PURE__ */ mapMaybe(/* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn));\nvar alterAt = function (i) {\n    return function (f) {\n        return function (xs) {\n            var go = function (x) {\n                var v = f(x);\n                if (v instanceof Data_Maybe.Nothing) {\n                    return deleteAt(i)(xs);\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    return updateAt(i)(v.value0)(xs);\n                };\n                throw new Error(\"Failed pattern match at Data.Array (line 591, column 10 - line 593, column 32): \" + [ v.constructor.name ]);\n            };\n            return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));\n        };\n    };\n};\nexport {\n    range,\n    replicate,\n    length,\n    reverse,\n    concat,\n    filter,\n    partition,\n    scanl,\n    scanr,\n    slice,\n    zipWith,\n    any,\n    all\n} from \"./foreign.js\";\nexport {\n    fromFoldable,\n    toUnfoldable,\n    singleton,\n    some,\n    many,\n    $$null as null,\n    cons,\n    snoc,\n    insert,\n    insertBy,\n    head,\n    last,\n    tail,\n    init,\n    uncons,\n    unsnoc,\n    index,\n    elem,\n    notElem,\n    elemIndex,\n    elemLastIndex,\n    find,\n    findMap,\n    findIndex,\n    findLastIndex,\n    insertAt,\n    deleteAt,\n    updateAt,\n    updateAtIndices,\n    modifyAt,\n    modifyAtIndices,\n    alterAt,\n    intersperse,\n    concatMap,\n    splitAt,\n    filterA,\n    mapMaybe,\n    catMaybes,\n    mapWithIndex,\n    foldl,\n    foldr,\n    foldMap,\n    fold,\n    intercalate,\n    transpose,\n    sort,\n    sortBy,\n    sortWith,\n    take,\n    takeEnd,\n    takeWhile,\n    drop,\n    dropEnd,\n    dropWhile,\n    span,\n    group,\n    groupAll,\n    groupBy,\n    groupAllBy,\n    nub,\n    nubEq,\n    nubBy,\n    nubByEq,\n    union,\n    unionBy,\n    $$delete as delete,\n    deleteBy,\n    difference,\n    intersect,\n    intersectBy,\n    zipWithA,\n    zip,\n    unzip,\n    foldM,\n    foldRecM,\n    unsafeIndex\n};\n", "export const foldr1Impl = function (f) {\n  return function (xs) {\n    var acc = xs[xs.length - 1];\n    for (var i = xs.length - 2; i >= 0; i--) {\n      acc = f(xs[i])(acc);\n    }\n    return acc;\n  };\n};\n\nexport const foldl1Impl = function (f) {\n  return function (xs) {\n    var acc = xs[0];\n    var len = xs.length;\n    for (var i = 1; i < len; i++) {\n      acc = f(acc)(xs[i]);\n    }\n    return acc;\n  };\n};\n\nexport const traverse1Impl = function () {\n  function Cont(fn) {\n    this.fn = fn;\n  }\n\n  var emptyList = {};\n\n  var ConsCell = function (head, tail) {\n    this.head = head;\n    this.tail = tail;\n  };\n\n  function finalCell(head) {\n    return new ConsCell(head, emptyList);\n  }\n\n  function consList(x) {\n    return function (xs) {\n      return new ConsCell(x, xs);\n    };\n  }\n\n  function listToArray(list) {\n    var arr = [];\n    var xs = list;\n    while (xs !== emptyList) {\n      arr.push(xs.head);\n      xs = xs.tail;\n    }\n    return arr;\n  }\n\n  return function (apply) {\n    return function (map) {\n      return function (f) {\n        var buildFrom = function (x, ys) {\n          return apply(map(consList)(f(x)))(ys);\n        };\n\n        var go = function (acc, currentLen, xs) {\n          if (currentLen === 0) {\n            return acc;\n          } else {\n            var last = xs[currentLen - 1];\n            return new Cont(function () {\n              var built = go(buildFrom(last, acc), currentLen - 1, xs);\n              return built;\n            });\n          }\n        };\n\n        return function (array) {\n          var acc = map(finalCell)(f(array[array.length - 1]));\n          var result = go(acc, array.length - 1, array);\n          while (result instanceof Cont) {\n            result = result.fn();\n          }\n\n          return map(listToArray)(result);\n        };\n      };\n    };\n  };\n}();\n", "export function toCharCode(c) {\n  return c.charCodeAt(0);\n}\n\nexport function fromCharCode(c) {\n  return String.fromCharCode(c);\n}\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Control_Alternative from \"../Control.Alternative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Ordering from \"../Data.Ordering/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unfoldable from \"../Data.Unfoldable/index.js\";\nimport * as Data_Unfoldable1 from \"../Data.Unfoldable1/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nvar apply = /* #__PURE__ */ Control_Apply.apply(Control_Apply.applyFn);\nvar show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);\nvar map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);\nvar top = /* #__PURE__ */ Data_Bounded.top(Data_Bounded.boundedInt);\nvar bottom = /* #__PURE__ */ Data_Bounded.bottom(Data_Bounded.boundedInt);\nvar bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);\nvar voidLeft = /* #__PURE__ */ Data_Functor.voidLeft(Data_Maybe.functorMaybe);\nvar guard = /* #__PURE__ */ Control_Alternative.guard(Data_Maybe.alternativeMaybe);\nvar fromJust = /* #__PURE__ */ Data_Maybe.fromJust();\nvar bottom1 = /* #__PURE__ */ Data_Bounded.bottom(Data_Bounded.boundedChar);\nvar top1 = /* #__PURE__ */ Data_Bounded.top(Data_Bounded.boundedChar);\nvar Cardinality = function (x) {\n    return x;\n};\nvar toEnum = function (dict) {\n    return dict.toEnum;\n};\nvar succ = function (dict) {\n    return dict.succ;\n};\nvar upFromIncluding = function (dictEnum) {\n    var succ1 = succ(dictEnum);\n    return function (dictUnfoldable1) {\n        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(apply(Data_Tuple.Tuple.create)(succ1));\n    };\n};\nvar showCardinality = {\n    show: function (v) {\n        return \"(Cardinality \" + (show(v) + \")\");\n    }\n};\nvar pred = function (dict) {\n    return dict.pred;\n};\nvar ordCardinality = Data_Ord.ordInt;\nvar newtypeCardinality = {\n    Coercible0: function () {\n        return undefined;\n    }\n};\nvar fromEnum = function (dict) {\n    return dict.fromEnum;\n};\nvar toEnumWithDefaults = function (dictBoundedEnum) {\n    var toEnum1 = toEnum(dictBoundedEnum);\n    var fromEnum1 = fromEnum(dictBoundedEnum);\n    var bottom2 = Data_Bounded.bottom(dictBoundedEnum.Bounded0());\n    return function (low) {\n        return function (high) {\n            return function (x) {\n                var v = toEnum1(x);\n                if (v instanceof Data_Maybe.Just) {\n                    return v.value0;\n                };\n                if (v instanceof Data_Maybe.Nothing) {\n                    var $140 = x < fromEnum1(bottom2);\n                    if ($140) {\n                        return low;\n                    };\n                    return high;\n                };\n                throw new Error(\"Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): \" + [ v.constructor.name ]);\n            };\n        };\n    };\n};\nvar eqCardinality = Data_Eq.eqInt;\nvar enumUnit = /* #__PURE__ */ (function () {\n    return {\n        succ: Data_Function[\"const\"](Data_Maybe.Nothing.value),\n        pred: Data_Function[\"const\"](Data_Maybe.Nothing.value),\n        Ord0: function () {\n            return Data_Ord.ordUnit;\n        }\n    };\n})();\nvar enumTuple = function (dictEnum) {\n    var succ1 = succ(dictEnum);\n    var pred1 = pred(dictEnum);\n    var ordTuple = Data_Tuple.ordTuple(dictEnum.Ord0());\n    return function (dictBoundedEnum) {\n        var Bounded0 = dictBoundedEnum.Bounded0();\n        var bottom2 = Data_Bounded.bottom(Bounded0);\n        var Enum1 = dictBoundedEnum.Enum1();\n        var succ2 = succ(Enum1);\n        var top2 = Data_Bounded.top(Bounded0);\n        var pred2 = pred(Enum1);\n        var ordTuple1 = ordTuple(Enum1.Ord0());\n        return {\n            succ: function (v) {\n                return Data_Maybe.maybe(map(Data_Function.flip(Data_Tuple.Tuple.create)(bottom2))(succ1(v.value0)))((function () {\n                    var $183 = Data_Tuple.Tuple.create(v.value0);\n                    return function ($184) {\n                        return Data_Maybe.Just.create($183($184));\n                    };\n                })())(succ2(v.value1));\n            },\n            pred: function (v) {\n                return Data_Maybe.maybe(map(Data_Function.flip(Data_Tuple.Tuple.create)(top2))(pred1(v.value0)))((function () {\n                    var $185 = Data_Tuple.Tuple.create(v.value0);\n                    return function ($186) {\n                        return Data_Maybe.Just.create($185($186));\n                    };\n                })())(pred2(v.value1));\n            },\n            Ord0: function () {\n                return ordTuple1;\n            }\n        };\n    };\n};\nvar enumOrdering = {\n    succ: function (v) {\n        if (v instanceof Data_Ordering.LT) {\n            return new Data_Maybe.Just(Data_Ordering.EQ.value);\n        };\n        if (v instanceof Data_Ordering.EQ) {\n            return new Data_Maybe.Just(Data_Ordering.GT.value);\n        };\n        if (v instanceof Data_Ordering.GT) {\n            return Data_Maybe.Nothing.value;\n        };\n        throw new Error(\"Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): \" + [ v.constructor.name ]);\n    },\n    pred: function (v) {\n        if (v instanceof Data_Ordering.LT) {\n            return Data_Maybe.Nothing.value;\n        };\n        if (v instanceof Data_Ordering.EQ) {\n            return new Data_Maybe.Just(Data_Ordering.LT.value);\n        };\n        if (v instanceof Data_Ordering.GT) {\n            return new Data_Maybe.Just(Data_Ordering.EQ.value);\n        };\n        throw new Error(\"Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): \" + [ v.constructor.name ]);\n    },\n    Ord0: function () {\n        return Data_Ord.ordOrdering;\n    }\n};\nvar enumMaybe = function (dictBoundedEnum) {\n    var bottom2 = Data_Bounded.bottom(dictBoundedEnum.Bounded0());\n    var Enum1 = dictBoundedEnum.Enum1();\n    var succ1 = succ(Enum1);\n    var pred1 = pred(Enum1);\n    var ordMaybe = Data_Maybe.ordMaybe(Enum1.Ord0());\n    return {\n        succ: function (v) {\n            if (v instanceof Data_Maybe.Nothing) {\n                return new Data_Maybe.Just(new Data_Maybe.Just(bottom2));\n            };\n            if (v instanceof Data_Maybe.Just) {\n                return map(Data_Maybe.Just.create)(succ1(v.value0));\n            };\n            throw new Error(\"Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): \" + [ v.constructor.name ]);\n        },\n        pred: function (v) {\n            if (v instanceof Data_Maybe.Nothing) {\n                return Data_Maybe.Nothing.value;\n            };\n            if (v instanceof Data_Maybe.Just) {\n                return new Data_Maybe.Just(pred1(v.value0));\n            };\n            throw new Error(\"Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): \" + [ v.constructor.name ]);\n        },\n        Ord0: function () {\n            return ordMaybe;\n        }\n    };\n};\nvar enumInt = {\n    succ: function (n) {\n        var $153 = n < top;\n        if ($153) {\n            return new Data_Maybe.Just(n + 1 | 0);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    pred: function (n) {\n        var $154 = n > bottom;\n        if ($154) {\n            return new Data_Maybe.Just(n - 1 | 0);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    Ord0: function () {\n        return Data_Ord.ordInt;\n    }\n};\nvar enumFromTo = function (dictEnum) {\n    var Ord0 = dictEnum.Ord0();\n    var eq1 = Data_Eq.eq(Ord0.Eq0());\n    var lessThan1 = Data_Ord.lessThan(Ord0);\n    var succ1 = succ(dictEnum);\n    var lessThanOrEq1 = Data_Ord.lessThanOrEq(Ord0);\n    var pred1 = pred(dictEnum);\n    var greaterThanOrEq1 = Data_Ord.greaterThanOrEq(Ord0);\n    return function (dictUnfoldable1) {\n        var singleton = Data_Unfoldable1.singleton(dictUnfoldable1);\n        var unfoldr1 = Data_Unfoldable1.unfoldr1(dictUnfoldable1);\n        var go = function (step) {\n            return function (op) {\n                return function (to) {\n                    return function (a) {\n                        return new Data_Tuple.Tuple(a, bind(step(a))(function (a$prime) {\n                            return voidLeft(guard(op(a$prime)(to)))(a$prime);\n                        }));\n                    };\n                };\n            };\n        };\n        return function (v) {\n            return function (v1) {\n                if (eq1(v)(v1)) {\n                    return singleton(v);\n                };\n                if (lessThan1(v)(v1)) {\n                    return unfoldr1(go(succ1)(lessThanOrEq1)(v1))(v);\n                };\n                if (Data_Boolean.otherwise) {\n                    return unfoldr1(go(pred1)(greaterThanOrEq1)(v1))(v);\n                };\n                throw new Error(\"Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): \" + [ v.constructor.name, v1.constructor.name ]);\n            };\n        };\n    };\n};\nvar enumFromThenTo = function (dictUnfoldable) {\n    var unfoldr = Data_Unfoldable.unfoldr(dictUnfoldable);\n    return function (dictFunctor) {\n        var map1 = Data_Functor.map(dictFunctor);\n        return function (dictBoundedEnum) {\n            var fromEnum1 = fromEnum(dictBoundedEnum);\n            var toEnum1 = toEnum(dictBoundedEnum);\n            var go = function (step) {\n                return function (to) {\n                    return function (e) {\n                        if (e <= to) {\n                            return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));\n                        };\n                        if (Data_Boolean.otherwise) {\n                            return Data_Maybe.Nothing.value;\n                        };\n                        throw new Error(\"Failed pattern match at Data.Enum (line 217, column 5 - line 219, column 28): \" + [ step.constructor.name, to.constructor.name, e.constructor.name ]);\n                    };\n                };\n            };\n            return function (a) {\n                return function (b) {\n                    return function (c) {\n                        var c$prime = fromEnum1(c);\n                        var b$prime = fromEnum1(b);\n                        var a$prime = fromEnum1(a);\n                        return map1(function ($187) {\n                            return fromJust(toEnum1($187));\n                        })(unfoldr(go(b$prime - a$prime | 0)(c$prime))(a$prime));\n                    };\n                };\n            };\n        };\n    };\n};\nvar enumEither = function (dictBoundedEnum) {\n    var Enum1 = dictBoundedEnum.Enum1();\n    var succ1 = succ(Enum1);\n    var pred1 = pred(Enum1);\n    var top2 = Data_Bounded.top(dictBoundedEnum.Bounded0());\n    var ordEither = Data_Either.ordEither(Enum1.Ord0());\n    return function (dictBoundedEnum1) {\n        var bottom2 = Data_Bounded.bottom(dictBoundedEnum1.Bounded0());\n        var Enum11 = dictBoundedEnum1.Enum1();\n        var succ2 = succ(Enum11);\n        var pred2 = pred(Enum11);\n        var ordEither1 = ordEither(Enum11.Ord0());\n        return {\n            succ: function (v) {\n                if (v instanceof Data_Either.Left) {\n                    return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(bottom2)))(function ($188) {\n                        return Data_Maybe.Just.create(Data_Either.Left.create($188));\n                    })(succ1(v.value0));\n                };\n                if (v instanceof Data_Either.Right) {\n                    return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($189) {\n                        return Data_Maybe.Just.create(Data_Either.Right.create($189));\n                    })(succ2(v.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): \" + [ v.constructor.name ]);\n            },\n            pred: function (v) {\n                if (v instanceof Data_Either.Left) {\n                    return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($190) {\n                        return Data_Maybe.Just.create(Data_Either.Left.create($190));\n                    })(pred1(v.value0));\n                };\n                if (v instanceof Data_Either.Right) {\n                    return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(top2)))(function ($191) {\n                        return Data_Maybe.Just.create(Data_Either.Right.create($191));\n                    })(pred2(v.value0));\n                };\n                throw new Error(\"Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): \" + [ v.constructor.name ]);\n            },\n            Ord0: function () {\n                return ordEither1;\n            }\n        };\n    };\n};\nvar enumBoolean = {\n    succ: function (v) {\n        if (!v) {\n            return new Data_Maybe.Just(true);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    pred: function (v) {\n        if (v) {\n            return new Data_Maybe.Just(false);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    Ord0: function () {\n        return Data_Ord.ordBoolean;\n    }\n};\nvar downFromIncluding = function (dictEnum) {\n    var pred1 = pred(dictEnum);\n    return function (dictUnfoldable1) {\n        return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(apply(Data_Tuple.Tuple.create)(pred1));\n    };\n};\nvar diag = function (a) {\n    return new Data_Tuple.Tuple(a, a);\n};\nvar downFrom = function (dictEnum) {\n    var pred1 = pred(dictEnum);\n    return function (dictUnfoldable) {\n        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {\n            var $192 = map(diag);\n            return function ($193) {\n                return $192(pred1($193));\n            };\n        })());\n    };\n};\nvar upFrom = function (dictEnum) {\n    var succ1 = succ(dictEnum);\n    return function (dictUnfoldable) {\n        return Data_Unfoldable.unfoldr(dictUnfoldable)((function () {\n            var $194 = map(diag);\n            return function ($195) {\n                return $194(succ1($195));\n            };\n        })());\n    };\n};\nvar defaultToEnum = function (dictBounded) {\n    var bottom2 = Data_Bounded.bottom(dictBounded);\n    return function (dictEnum) {\n        var succ1 = succ(dictEnum);\n        return function (i$prime) {\n            var go = function ($copy_i) {\n                return function ($copy_x) {\n                    var $tco_var_i = $copy_i;\n                    var $tco_done = false;\n                    var $tco_result;\n                    function $tco_loop(i, x) {\n                        var $168 = i === 0;\n                        if ($168) {\n                            $tco_done = true;\n                            return new Data_Maybe.Just(x);\n                        };\n                        var v = succ1(x);\n                        if (v instanceof Data_Maybe.Just) {\n                            $tco_var_i = i - 1 | 0;\n                            $copy_x = v.value0;\n                            return;\n                        };\n                        if (v instanceof Data_Maybe.Nothing) {\n                            $tco_done = true;\n                            return Data_Maybe.Nothing.value;\n                        };\n                        throw new Error(\"Failed pattern match at Data.Enum (line 296, column 12 - line 298, column 33): \" + [ v.constructor.name ]);\n                    };\n                    while (!$tco_done) {\n                        $tco_result = $tco_loop($tco_var_i, $copy_x);\n                    };\n                    return $tco_result;\n                };\n            };\n            var $171 = i$prime < 0;\n            if ($171) {\n                return Data_Maybe.Nothing.value;\n            };\n            return go(i$prime)(bottom2);\n        };\n    };\n};\nvar defaultSucc = function (toEnum$prime) {\n    return function (fromEnum$prime) {\n        return function (a) {\n            return toEnum$prime(fromEnum$prime(a) + 1 | 0);\n        };\n    };\n};\nvar defaultPred = function (toEnum$prime) {\n    return function (fromEnum$prime) {\n        return function (a) {\n            return toEnum$prime(fromEnum$prime(a) - 1 | 0);\n        };\n    };\n};\nvar defaultFromEnum = function (dictEnum) {\n    var pred1 = pred(dictEnum);\n    var go = function ($copy_i) {\n        return function ($copy_x) {\n            var $tco_var_i = $copy_i;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(i, x) {\n                var v = pred1(x);\n                if (v instanceof Data_Maybe.Just) {\n                    $tco_var_i = i + 1 | 0;\n                    $copy_x = v.value0;\n                    return;\n                };\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return i;\n                };\n                throw new Error(\"Failed pattern match at Data.Enum (line 309, column 5 - line 311, column 19): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_i, $copy_x);\n            };\n            return $tco_result;\n        };\n    };\n    return go(0);\n};\nvar defaultCardinality = function (dictBounded) {\n    var bottom2 = Data_Bounded.bottom(dictBounded);\n    return function (dictEnum) {\n        var succ1 = succ(dictEnum);\n        var go = function ($copy_i) {\n            return function ($copy_x) {\n                var $tco_var_i = $copy_i;\n                var $tco_done = false;\n                var $tco_result;\n                function $tco_loop(i, x) {\n                    var v = succ1(x);\n                    if (v instanceof Data_Maybe.Just) {\n                        $tco_var_i = i + 1 | 0;\n                        $copy_x = v.value0;\n                        return;\n                    };\n                    if (v instanceof Data_Maybe.Nothing) {\n                        $tco_done = true;\n                        return i;\n                    };\n                    throw new Error(\"Failed pattern match at Data.Enum (line 276, column 5 - line 278, column 19): \" + [ v.constructor.name ]);\n                };\n                while (!$tco_done) {\n                    $tco_result = $tco_loop($tco_var_i, $copy_x);\n                };\n                return $tco_result;\n            };\n        };\n        return go(1)(bottom2);\n    };\n};\nvar charToEnum = function (v) {\n    if (v >= $foreign.toCharCode(bottom1) && v <= $foreign.toCharCode(top1)) {\n        return new Data_Maybe.Just($foreign.fromCharCode(v));\n    };\n    return Data_Maybe.Nothing.value;\n};\nvar enumChar = {\n    succ: /* #__PURE__ */ defaultSucc(charToEnum)($foreign.toCharCode),\n    pred: /* #__PURE__ */ defaultPred(charToEnum)($foreign.toCharCode),\n    Ord0: function () {\n        return Data_Ord.ordChar;\n    }\n};\nvar cardinality = function (dict) {\n    return dict.cardinality;\n};\nvar boundedEnumUnit = {\n    cardinality: 1,\n    toEnum: function (v) {\n        if (v === 0) {\n            return new Data_Maybe.Just(Data_Unit.unit);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    fromEnum: /* #__PURE__ */ Data_Function[\"const\"](0),\n    Bounded0: function () {\n        return Data_Bounded.boundedUnit;\n    },\n    Enum1: function () {\n        return enumUnit;\n    }\n};\nvar boundedEnumOrdering = {\n    cardinality: 3,\n    toEnum: function (v) {\n        if (v === 0) {\n            return new Data_Maybe.Just(Data_Ordering.LT.value);\n        };\n        if (v === 1) {\n            return new Data_Maybe.Just(Data_Ordering.EQ.value);\n        };\n        if (v === 2) {\n            return new Data_Maybe.Just(Data_Ordering.GT.value);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    fromEnum: function (v) {\n        if (v instanceof Data_Ordering.LT) {\n            return 0;\n        };\n        if (v instanceof Data_Ordering.EQ) {\n            return 1;\n        };\n        if (v instanceof Data_Ordering.GT) {\n            return 2;\n        };\n        throw new Error(\"Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): \" + [ v.constructor.name ]);\n    },\n    Bounded0: function () {\n        return Data_Bounded.boundedOrdering;\n    },\n    Enum1: function () {\n        return enumOrdering;\n    }\n};\nvar boundedEnumChar = /* #__PURE__ */ (function () {\n    return {\n        cardinality: $foreign.toCharCode(top1) - $foreign.toCharCode(bottom1) | 0,\n        toEnum: charToEnum,\n        fromEnum: $foreign.toCharCode,\n        Bounded0: function () {\n            return Data_Bounded.boundedChar;\n        },\n        Enum1: function () {\n            return enumChar;\n        }\n    };\n})();\nvar boundedEnumBoolean = {\n    cardinality: 2,\n    toEnum: function (v) {\n        if (v === 0) {\n            return new Data_Maybe.Just(false);\n        };\n        if (v === 1) {\n            return new Data_Maybe.Just(true);\n        };\n        return Data_Maybe.Nothing.value;\n    },\n    fromEnum: function (v) {\n        if (!v) {\n            return 0;\n        };\n        if (v) {\n            return 1;\n        };\n        throw new Error(\"Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): \" + [ v.constructor.name ]);\n    },\n    Bounded0: function () {\n        return Data_Bounded.boundedBoolean;\n    },\n    Enum1: function () {\n        return enumBoolean;\n    }\n};\nexport {\n    succ,\n    pred,\n    cardinality,\n    toEnum,\n    fromEnum,\n    toEnumWithDefaults,\n    Cardinality,\n    enumFromTo,\n    enumFromThenTo,\n    upFrom,\n    upFromIncluding,\n    downFrom,\n    downFromIncluding,\n    defaultSucc,\n    defaultPred,\n    defaultCardinality,\n    defaultToEnum,\n    defaultFromEnum,\n    enumBoolean,\n    enumInt,\n    enumChar,\n    enumUnit,\n    enumOrdering,\n    enumMaybe,\n    enumEither,\n    enumTuple,\n    boundedEnumBoolean,\n    boundedEnumChar,\n    boundedEnumUnit,\n    boundedEnumOrdering,\n    newtypeCardinality,\n    eqCardinality,\n    ordCardinality,\n    showCardinality\n};\n", "// module Data.Function.Uncurried\n\nexport const mkFn0 = function (fn) {\n  return function () {\n    return fn();\n  };\n};\n\nexport const mkFn2 = function (fn) {\n  /* jshint maxparams: 2 */\n  return function (a, b) {\n    return fn(a)(b);\n  };\n};\n\nexport const mkFn3 = function (fn) {\n  /* jshint maxparams: 3 */\n  return function (a, b, c) {\n    return fn(a)(b)(c);\n  };\n};\n\nexport const mkFn4 = function (fn) {\n  /* jshint maxparams: 4 */\n  return function (a, b, c, d) {\n    return fn(a)(b)(c)(d);\n  };\n};\n\nexport const mkFn5 = function (fn) {\n  /* jshint maxparams: 5 */\n  return function (a, b, c, d, e) {\n    return fn(a)(b)(c)(d)(e);\n  };\n};\n\nexport const mkFn6 = function (fn) {\n  /* jshint maxparams: 6 */\n  return function (a, b, c, d, e, f) {\n    return fn(a)(b)(c)(d)(e)(f);\n  };\n};\n\nexport const mkFn7 = function (fn) {\n  /* jshint maxparams: 7 */\n  return function (a, b, c, d, e, f, g) {\n    return fn(a)(b)(c)(d)(e)(f)(g);\n  };\n};\n\nexport const mkFn8 = function (fn) {\n  /* jshint maxparams: 8 */\n  return function (a, b, c, d, e, f, g, h) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h);\n  };\n};\n\nexport const mkFn9 = function (fn) {\n  /* jshint maxparams: 9 */\n  return function (a, b, c, d, e, f, g, h, i) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);\n  };\n};\n\nexport const mkFn10 = function (fn) {\n  /* jshint maxparams: 10 */\n  return function (a, b, c, d, e, f, g, h, i, j) {\n    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);\n  };\n};\n\nexport const runFn0 = function (fn) {\n  return fn();\n};\n\nexport const runFn2 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return fn(a, b);\n    };\n  };\n};\n\nexport const runFn3 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return fn(a, b, c);\n      };\n    };\n  };\n};\n\nexport const runFn4 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return fn(a, b, c, d);\n        };\n      };\n    };\n  };\n};\n\nexport const runFn5 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return fn(a, b, c, d, e);\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn6 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return fn(a, b, c, d, e, f);\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn7 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return fn(a, b, c, d, e, f, g);\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn8 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return fn(a, b, c, d, e, f, g, h);\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn9 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return function (i) {\n                    return fn(a, b, c, d, e, f, g, h, i);\n                  };\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const runFn10 = function (fn) {\n  return function (a) {\n    return function (b) {\n      return function (c) {\n        return function (d) {\n          return function (e) {\n            return function (f) {\n              return function (g) {\n                return function (h) {\n                  return function (i) {\n                    return function (j) {\n                      return fn(a, b, c, d, e, f, g, h, i, j);\n                    };\n                  };\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n};\n", "/* global Symbol */\n\nvar hasArrayFrom = typeof Array.from === \"function\";\nvar hasStringIterator =\n  typeof Symbol !== \"undefined\" &&\n  Symbol != null &&\n  typeof Symbol.iterator !== \"undefined\" &&\n  typeof String.prototype[Symbol.iterator] === \"function\";\nvar hasFromCodePoint = typeof String.prototype.fromCodePoint === \"function\";\nvar hasCodePointAt = typeof String.prototype.codePointAt === \"function\";\n\nexport const _unsafeCodePointAt0 = function (fallback) {\n  return hasCodePointAt\n    ? function (str) { return str.codePointAt(0); }\n    : fallback;\n};\n\nexport const _codePointAt = function (fallback) {\n  return function (Just) {\n    return function (Nothing) {\n      return function (unsafeCodePointAt0) {\n        return function (index) {\n          return function (str) {\n            var length = str.length;\n            if (index < 0 || index >= length) return Nothing;\n            if (hasStringIterator) {\n              var iter = str[Symbol.iterator]();\n              for (var i = index;; --i) {\n                var o = iter.next();\n                if (o.done) return Nothing;\n                if (i === 0) return Just(unsafeCodePointAt0(o.value));\n              }\n            }\n            return fallback(index)(str);\n          };\n        };\n      };\n    };\n  };\n};\n\nexport const _countPrefix = function (fallback) {\n  return function (unsafeCodePointAt0) {\n    if (hasStringIterator) {\n      return function (pred) {\n        return function (str) {\n          var iter = str[Symbol.iterator]();\n          for (var cpCount = 0; ; ++cpCount) {\n            var o = iter.next();\n            if (o.done) return cpCount;\n            var cp = unsafeCodePointAt0(o.value);\n            if (!pred(cp)) return cpCount;\n          }\n        };\n      };\n    }\n    return fallback;\n  };\n};\n\nexport const _fromCodePointArray = function (singleton) {\n  return hasFromCodePoint\n    ? function (cps) {\n      // Function.prototype.apply will fail for very large second parameters,\n      // so we don't use it for arrays with 10,000 or more entries.\n      if (cps.length < 10e3) {\n        return String.fromCodePoint.apply(String, cps);\n      }\n      return cps.map(singleton).join(\"\");\n    }\n    : function (cps) {\n      return cps.map(singleton).join(\"\");\n    };\n};\n\nexport const _singleton = function (fallback) {\n  return hasFromCodePoint ? String.fromCodePoint : fallback;\n};\n\nexport const _take = function (fallback) {\n  return function (n) {\n    if (hasStringIterator) {\n      return function (str) {\n        var accum = \"\";\n        var iter = str[Symbol.iterator]();\n        for (var i = 0; i < n; ++i) {\n          var o = iter.next();\n          if (o.done) return accum;\n          accum += o.value;\n        }\n        return accum;\n      };\n    }\n    return fallback(n);\n  };\n};\n\nexport const _toCodePointArray = function (fallback) {\n  return function (unsafeCodePointAt0) {\n    if (hasArrayFrom) {\n      return function (str) {\n        return Array.from(str, unsafeCodePointAt0);\n      };\n    }\n    return fallback;\n  };\n};\n", "export const fromCharArray = function (a) {\n  return a.join(\"\");\n};\n\nexport const toCharArray = function (s) {\n  return s.split(\"\");\n};\n\nexport const singleton = function (c) {\n  return c;\n};\n\nexport const _charAt = function (just) {\n  return function (nothing) {\n    return function (i) {\n      return function (s) {\n        return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;\n      };\n    };\n  };\n};\n\nexport const _toChar = function (just) {\n  return function (nothing) {\n    return function (s) {\n      return s.length === 1 ? just(s) : nothing;\n    };\n  };\n};\n\nexport const length = function (s) {\n  return s.length;\n};\n\nexport const countPrefix = function (p) {\n  return function (s) {\n    var i = 0;\n    while (i < s.length && p(s.charAt(i))) i++;\n    return i;\n  };\n};\n\nexport const _indexOf = function (just) {\n  return function (nothing) {\n    return function (x) {\n      return function (s) {\n        var i = s.indexOf(x);\n        return i === -1 ? nothing : just(i);\n      };\n    };\n  };\n};\n\nexport const _indexOfStartingAt = function (just) {\n  return function (nothing) {\n    return function (x) {\n      return function (startAt) {\n        return function (s) {\n          if (startAt < 0 || startAt > s.length) return nothing;\n          var i = s.indexOf(x, startAt);\n          return i === -1 ? nothing : just(i);\n        };\n      };\n    };\n  };\n};\n\nexport const _lastIndexOf = function (just) {\n  return function (nothing) {\n    return function (x) {\n      return function (s) {\n        var i = s.lastIndexOf(x);\n        return i === -1 ? nothing : just(i);\n      };\n    };\n  };\n};\n\nexport const _lastIndexOfStartingAt = function (just) {\n  return function (nothing) {\n    return function (x) {\n      return function (startAt) {\n        return function (s) {\n          var i = s.lastIndexOf(x, startAt);\n          return i === -1 ? nothing : just(i);\n        };\n      };\n    };\n  };\n};\n\nexport const take = function (n) {\n  return function (s) {\n    return s.substr(0, n);\n  };\n};\n\nexport const drop = function (n) {\n  return function (s) {\n    return s.substring(n);\n  };\n};\n\nexport const slice = function (b) {\n  return function (e) {\n    return function (s) {\n      return s.slice(b,e);\n    };\n  };\n};\n\nexport const splitAt = function (i) {\n  return function (s) {\n    return { before: s.substring(0, i), after: s.substring(i) };\n  };\n};\n", "export const charAt = function (i) {\n  return function (s) {\n    if (i >= 0 && i < s.length) return s.charAt(i);\n    throw new Error(\"Data.String.Unsafe.charAt: Invalid index.\");\n  };\n};\n\nexport const char = function (s) {\n  if (s.length === 1) return s.charAt(0);\n  throw new Error(\"Data.String.Unsafe.char: Expected string of length 1.\");\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_String_Unsafe from \"../Data.String.Unsafe/index.js\";\nvar uncons = function (v) {\n    if (v === \"\") {\n        return Data_Maybe.Nothing.value;\n    };\n    return new Data_Maybe.Just({\n        head: Data_String_Unsafe.charAt(0)(v),\n        tail: $foreign.drop(1)(v)\n    });\n};\nvar toChar = /* #__PURE__ */ (function () {\n    return $foreign[\"_toChar\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar takeWhile = function (p) {\n    return function (s) {\n        return $foreign.take($foreign.countPrefix(p)(s))(s);\n    };\n};\nvar takeRight = function (i) {\n    return function (s) {\n        return $foreign.drop($foreign.length(s) - i | 0)(s);\n    };\n};\nvar stripSuffix = function (v) {\n    return function (str) {\n        var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);\n        var $14 = v1.after === v;\n        if ($14) {\n            return new Data_Maybe.Just(v1.before);\n        };\n        return Data_Maybe.Nothing.value;\n    };\n};\nvar stripPrefix = function (v) {\n    return function (str) {\n        var v1 = $foreign.splitAt($foreign.length(v))(str);\n        var $20 = v1.before === v;\n        if ($20) {\n            return new Data_Maybe.Just(v1.after);\n        };\n        return Data_Maybe.Nothing.value;\n    };\n};\nvar lastIndexOf$prime = /* #__PURE__ */ (function () {\n    return $foreign[\"_lastIndexOfStartingAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar lastIndexOf = /* #__PURE__ */ (function () {\n    return $foreign[\"_lastIndexOf\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar indexOf$prime = /* #__PURE__ */ (function () {\n    return $foreign[\"_indexOfStartingAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar indexOf = /* #__PURE__ */ (function () {\n    return $foreign[\"_indexOf\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nvar dropWhile = function (p) {\n    return function (s) {\n        return $foreign.drop($foreign.countPrefix(p)(s))(s);\n    };\n};\nvar dropRight = function (i) {\n    return function (s) {\n        return $foreign.take($foreign.length(s) - i | 0)(s);\n    };\n};\nvar contains = function (pat) {\n    var $23 = indexOf(pat);\n    return function ($24) {\n        return Data_Maybe.isJust($23($24));\n    };\n};\nvar charAt = /* #__PURE__ */ (function () {\n    return $foreign[\"_charAt\"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);\n})();\nexport {\n    singleton,\n    fromCharArray,\n    toCharArray,\n    length,\n    countPrefix,\n    take,\n    drop,\n    slice,\n    splitAt\n} from \"./foreign.js\";\nexport {\n    stripPrefix,\n    stripSuffix,\n    contains,\n    charAt,\n    toChar,\n    uncons,\n    indexOf,\n    indexOf$prime,\n    lastIndexOf,\n    lastIndexOf$prime,\n    takeRight,\n    takeWhile,\n    dropRight,\n    dropWhile\n};\n", "// Generated by purs version 0.15.9\nimport * as $foreign from \"./foreign.js\";\nimport * as Data_Array from \"../Data.Array/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Bounded from \"../Data.Bounded/index.js\";\nimport * as Data_Enum from \"../Data.Enum/index.js\";\nimport * as Data_EuclideanRing from \"../Data.EuclideanRing/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Int from \"../Data.Int/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_String_CodeUnits from \"../Data.String.CodeUnits/index.js\";\nimport * as Data_String_Common from \"../Data.String.Common/index.js\";\nimport * as Data_String_Unsafe from \"../Data.String.Unsafe/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unfoldable from \"../Data.Unfoldable/index.js\";\nvar $runtime_lazy = function (name, moduleName, init) {\n    var state = 0;\n    var val;\n    return function (lineNumber) {\n        if (state === 2) return val;\n        if (state === 1) throw new ReferenceError(name + \" was needed before it finished initializing (module \" + moduleName + \", line \" + lineNumber + \")\", moduleName, lineNumber);\n        state = 1;\n        val = init();\n        state = 2;\n        return val;\n    };\n};\nvar fromEnum = /* #__PURE__ */ Data_Enum.fromEnum(Data_Enum.boundedEnumChar);\nvar map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);\nvar unfoldr = /* #__PURE__ */ Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray);\nvar div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);\nvar mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);\nvar compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordInt);\nvar CodePoint = function (x) {\n    return x;\n};\nvar unsurrogate = function (lead) {\n    return function (trail) {\n        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;\n    };\n};\nvar showCodePoint = {\n    show: function (v) {\n        return \"(CodePoint 0x\" + (Data_String_Common.toUpper(Data_Int.toStringAs(Data_Int.hexadecimal)(v)) + \")\");\n    }\n};\nvar isTrail = function (cu) {\n    return 56320 <= cu && cu <= 57343;\n};\nvar isLead = function (cu) {\n    return 55296 <= cu && cu <= 56319;\n};\nvar uncons = function (s) {\n    var v = Data_String_CodeUnits.length(s);\n    if (v === 0) {\n        return Data_Maybe.Nothing.value;\n    };\n    if (v === 1) {\n        return new Data_Maybe.Just({\n            head: fromEnum(Data_String_Unsafe.charAt(0)(s)),\n            tail: \"\"\n        });\n    };\n    var cu1 = fromEnum(Data_String_Unsafe.charAt(1)(s));\n    var cu0 = fromEnum(Data_String_Unsafe.charAt(0)(s));\n    var $43 = isLead(cu0) && isTrail(cu1);\n    if ($43) {\n        return new Data_Maybe.Just({\n            head: unsurrogate(cu0)(cu1),\n            tail: Data_String_CodeUnits.drop(2)(s)\n        });\n    };\n    return new Data_Maybe.Just({\n        head: cu0,\n        tail: Data_String_CodeUnits.drop(1)(s)\n    });\n};\nvar unconsButWithTuple = function (s) {\n    return map(function (v) {\n        return new Data_Tuple.Tuple(v.head, v.tail);\n    })(uncons(s));\n};\nvar toCodePointArrayFallback = function (s) {\n    return unfoldr(unconsButWithTuple)(s);\n};\nvar unsafeCodePointAt0Fallback = function (s) {\n    var cu0 = fromEnum(Data_String_Unsafe.charAt(0)(s));\n    var $47 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;\n    if ($47) {\n        var cu1 = fromEnum(Data_String_Unsafe.charAt(1)(s));\n        var $48 = isTrail(cu1);\n        if ($48) {\n            return unsurrogate(cu0)(cu1);\n        };\n        return cu0;\n    };\n    return cu0;\n};\nvar unsafeCodePointAt0 = /* #__PURE__ */ $foreign[\"_unsafeCodePointAt0\"](unsafeCodePointAt0Fallback);\nvar toCodePointArray = /* #__PURE__ */ $foreign[\"_toCodePointArray\"](toCodePointArrayFallback)(unsafeCodePointAt0);\nvar length = function ($74) {\n    return Data_Array.length(toCodePointArray($74));\n};\nvar lastIndexOf = function (p) {\n    return function (s) {\n        return map(function (i) {\n            return length(Data_String_CodeUnits.take(i)(s));\n        })(Data_String_CodeUnits.lastIndexOf(p)(s));\n    };\n};\nvar indexOf = function (p) {\n    return function (s) {\n        return map(function (i) {\n            return length(Data_String_CodeUnits.take(i)(s));\n        })(Data_String_CodeUnits.indexOf(p)(s));\n    };\n};\nvar fromCharCode = /* #__PURE__ */ (function () {\n    var $75 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));\n    return function ($76) {\n        return Data_String_CodeUnits.singleton($75($76));\n    };\n})();\nvar singletonFallback = function (v) {\n    if (v <= 65535) {\n        return fromCharCode(v);\n    };\n    var lead = div(v - 65536 | 0)(1024) + 55296 | 0;\n    var trail = mod(v - 65536 | 0)(1024) + 56320 | 0;\n    return fromCharCode(lead) + fromCharCode(trail);\n};\nvar fromCodePointArray = /* #__PURE__ */ $foreign[\"_fromCodePointArray\"](singletonFallback);\nvar singleton = /* #__PURE__ */ $foreign[\"_singleton\"](singletonFallback);\nvar takeFallback = function (v) {\n    return function (v1) {\n        if (v < 1) {\n            return \"\";\n        };\n        var v2 = uncons(v1);\n        if (v2 instanceof Data_Maybe.Just) {\n            return singleton(v2.value0.head) + takeFallback(v - 1 | 0)(v2.value0.tail);\n        };\n        return v1;\n    };\n};\nvar take = /* #__PURE__ */ $foreign[\"_take\"](takeFallback);\nvar lastIndexOf$prime = function (p) {\n    return function (i) {\n        return function (s) {\n            var i$prime = Data_String_CodeUnits.length(take(i)(s));\n            return map(function (k) {\n                return length(Data_String_CodeUnits.take(k)(s));\n            })(Data_String_CodeUnits[\"lastIndexOf$prime\"](p)(i$prime)(s));\n        };\n    };\n};\nvar splitAt = function (i) {\n    return function (s) {\n        var before = take(i)(s);\n        return {\n            before: before,\n            after: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(before))(s)\n        };\n    };\n};\nvar eqCodePoint = {\n    eq: function (x) {\n        return function (y) {\n            return x === y;\n        };\n    }\n};\nvar ordCodePoint = {\n    compare: function (x) {\n        return function (y) {\n            return compare(x)(y);\n        };\n    },\n    Eq0: function () {\n        return eqCodePoint;\n    }\n};\nvar drop = function (n) {\n    return function (s) {\n        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);\n    };\n};\nvar indexOf$prime = function (p) {\n    return function (i) {\n        return function (s) {\n            var s$prime = drop(i)(s);\n            return map(function (k) {\n                return i + length(Data_String_CodeUnits.take(k)(s$prime)) | 0;\n            })(Data_String_CodeUnits.indexOf(p)(s$prime));\n        };\n    };\n};\nvar countTail = function ($copy_p) {\n    return function ($copy_s) {\n        return function ($copy_accum) {\n            var $tco_var_p = $copy_p;\n            var $tco_var_s = $copy_s;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(p, s, accum) {\n                var v = uncons(s);\n                if (v instanceof Data_Maybe.Just) {\n                    var $61 = p(v.value0.head);\n                    if ($61) {\n                        $tco_var_p = p;\n                        $tco_var_s = v.value0.tail;\n                        $copy_accum = accum + 1 | 0;\n                        return;\n                    };\n                    $tco_done = true;\n                    return accum;\n                };\n                $tco_done = true;\n                return accum;\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);\n            };\n            return $tco_result;\n        };\n    };\n};\nvar countFallback = function (p) {\n    return function (s) {\n        return countTail(p)(s)(0);\n    };\n};\nvar countPrefix = /* #__PURE__ */ $foreign[\"_countPrefix\"](countFallback)(unsafeCodePointAt0);\nvar dropWhile = function (p) {\n    return function (s) {\n        return drop(countPrefix(p)(s))(s);\n    };\n};\nvar takeWhile = function (p) {\n    return function (s) {\n        return take(countPrefix(p)(s))(s);\n    };\n};\nvar codePointFromChar = function ($77) {\n    return CodePoint(fromEnum($77));\n};\nvar codePointAtFallback = function ($copy_n) {\n    return function ($copy_s) {\n        var $tco_var_n = $copy_n;\n        var $tco_done = false;\n        var $tco_result;\n        function $tco_loop(n, s) {\n            var v = uncons(s);\n            if (v instanceof Data_Maybe.Just) {\n                var $66 = n === 0;\n                if ($66) {\n                    $tco_done = true;\n                    return new Data_Maybe.Just(v.value0.head);\n                };\n                $tco_var_n = n - 1 | 0;\n                $copy_s = v.value0.tail;\n                return;\n            };\n            $tco_done = true;\n            return Data_Maybe.Nothing.value;\n        };\n        while (!$tco_done) {\n            $tco_result = $tco_loop($tco_var_n, $copy_s);\n        };\n        return $tco_result;\n    };\n};\nvar codePointAt = function (v) {\n    return function (v1) {\n        if (v < 0) {\n            return Data_Maybe.Nothing.value;\n        };\n        if (v === 0 && v1 === \"\") {\n            return Data_Maybe.Nothing.value;\n        };\n        if (v === 0) {\n            return new Data_Maybe.Just(unsafeCodePointAt0(v1));\n        };\n        return $foreign[\"_codePointAt\"](codePointAtFallback)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(unsafeCodePointAt0)(v)(v1);\n    };\n};\nvar boundedCodePoint = {\n    bottom: 0,\n    top: 1114111,\n    Ord0: function () {\n        return ordCodePoint;\n    }\n};\nvar boundedEnumCodePoint = /* #__PURE__ */ (function () {\n    return {\n        cardinality: 1114111 + 1 | 0,\n        fromEnum: function (v) {\n            return v;\n        },\n        toEnum: function (n) {\n            if (n >= 0 && n <= 1114111) {\n                return new Data_Maybe.Just(n);\n            };\n            if (Data_Boolean.otherwise) {\n                return Data_Maybe.Nothing.value;\n            };\n            throw new Error(\"Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): \" + [ n.constructor.name ]);\n        },\n        Bounded0: function () {\n            return boundedCodePoint;\n        },\n        Enum1: function () {\n            return $lazy_enumCodePoint(0);\n        }\n    };\n})();\nvar $lazy_enumCodePoint = /* #__PURE__ */ $runtime_lazy(\"enumCodePoint\", \"Data.String.CodePoints\", function () {\n    return {\n        succ: Data_Enum.defaultSucc(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),\n        pred: Data_Enum.defaultPred(Data_Enum.toEnum(boundedEnumCodePoint))(Data_Enum.fromEnum(boundedEnumCodePoint)),\n        Ord0: function () {\n            return ordCodePoint;\n        }\n    };\n});\nvar enumCodePoint = /* #__PURE__ */ $lazy_enumCodePoint(59);\nexport {\n    codePointFromChar,\n    singleton,\n    fromCodePointArray,\n    toCodePointArray,\n    codePointAt,\n    uncons,\n    length,\n    countPrefix,\n    indexOf,\n    indexOf$prime,\n    lastIndexOf,\n    lastIndexOf$prime,\n    take,\n    takeWhile,\n    drop,\n    dropWhile,\n    splitAt,\n    eqCodePoint,\n    ordCodePoint,\n    showCodePoint,\n    boundedCodePoint,\n    enumCodePoint,\n    boundedEnumCodePoint\n};\nexport {\n    contains,\n    stripPrefix,\n    stripSuffix\n} from \"../Data.String.CodeUnits/index.js\";\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Monad_Rec_Class from \"../Control.Monad.Rec.Class/index.js\";\nimport * as Data_Array from \"../Data.Array/index.js\";\nimport * as Data_Array_NonEmpty from \"../Data.Array.NonEmpty/index.js\";\nimport * as Data_Boolean from \"../Data.Boolean/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Enum from \"../Data.Enum/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_EuclideanRing from \"../Data.EuclideanRing/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Function_Uncurried from \"../Data.Function.Uncurried/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Int from \"../Data.Int/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Ord from \"../Data.Ord/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_String_CodePoints from \"../Data.String.CodePoints/index.js\";\nimport * as Data_String_CodeUnits from \"../Data.String.CodeUnits/index.js\";\nimport * as Data_String_Common from \"../Data.String.Common/index.js\";\nimport * as Data_String_Regex from \"../Data.String.Regex/index.js\";\nimport * as Data_Tuple from \"../Data.Tuple/index.js\";\nimport * as Data_Unit from \"../Data.Unit/index.js\";\nimport * as Parsing from \"../Parsing/index.js\";\nimport * as Parsing_Combinators from \"../Parsing.Combinators/index.js\";\nvar fromEnum = /* #__PURE__ */ Data_Enum.fromEnum(Data_String_CodePoints.boundedEnumCodePoint);\nvar mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);\nvar fromJust = /* #__PURE__ */ Data_Maybe.fromJust();\nvar toEnum = /* #__PURE__ */ Data_Enum.toEnum(Data_Enum.boundedEnumChar);\nvar eq1 = /* #__PURE__ */ Data_Eq.eq(Data_String_CodePoints.eqCodePoint);\nvar div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);\nvar max = /* #__PURE__ */ Data_Ord.max(Data_Ord.ordInt);\nvar min = /* #__PURE__ */ Data_Ord.min(Data_Ord.ordInt);\nvar show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);\nvar bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);\nvar pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);\nvar mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Either.functorEither);\nvar map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);\nvar show1 = /* #__PURE__ */ Data_Show.show(Data_Show.showString);\nvar show2 = /* #__PURE__ */ Data_Show.show(Data_Show.showChar);\nvar alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);\nvar tailRecM = /* #__PURE__ */ Control_Monad_Rec_Class.tailRecM(Parsing.monadRecParserT);\nvar updatePosSingle = function (v) {\n    return function (cp) {\n        return function (after) {\n            var v1 = fromEnum(cp);\n            if (v1 === 10) {\n                return {\n                    index: v.index + 1 | 0,\n                    line: v.line + 1 | 0,\n                    column: 1\n                };\n            };\n            if (v1 === 13) {\n                var v2 = Data_String_CodePoints.codePointAt(0)(after);\n                if (v2 instanceof Data_Maybe.Just && fromEnum(v2.value0) === 10) {\n                    return {\n                        index: v.index + 1 | 0,\n                        line: v.line,\n                        column: v.column\n                    };\n                };\n                return {\n                    index: v.index + 1 | 0,\n                    line: v.line + 1 | 0,\n                    column: 1\n                };\n            };\n            if (v1 === 9) {\n                return {\n                    index: v.index + 1 | 0,\n                    line: v.line,\n                    column: (v.column + 8 | 0) - mod(v.column - 1 | 0)(8) | 0\n                };\n            };\n            return {\n                index: v.index + 1 | 0,\n                line: v.line,\n                column: v.column + 1 | 0\n            };\n        };\n    };\n};\nvar updatePosString = function ($copy_pos) {\n    return function ($copy_before) {\n        return function ($copy_after) {\n            var $tco_var_pos = $copy_pos;\n            var $tco_var_before = $copy_before;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(pos, before, after) {\n                var v = Data_String_CodePoints.uncons(before);\n                if (v instanceof Data_Maybe.Nothing) {\n                    $tco_done = true;\n                    return pos;\n                };\n                if (v instanceof Data_Maybe.Just) {\n                    var newPos = (function () {\n                        if (Data_String_Common[\"null\"](v.value0.tail)) {\n                            return updatePosSingle(pos)(v.value0.head)(after);\n                        };\n                        if (Data_Boolean.otherwise) {\n                            return updatePosSingle(pos)(v.value0.head)(v.value0.tail);\n                        };\n                        throw new Error(\"Failed pattern match at Parsing.String (line 165, column 7 - line 167, column 52): \" + [  ]);\n                    })();\n                    $tco_var_pos = newPos;\n                    $tco_var_before = v.value0.tail;\n                    $copy_after = after;\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Parsing.String (line 161, column 36 - line 168, column 38): \" + [ v.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_pos, $tco_var_before, $copy_after);\n            };\n            return $tco_result;\n        };\n    };\n};\nvar satisfyCodePoint = function (f) {\n    return Data_Function_Uncurried.mkFn5(function (v) {\n        return function (v1) {\n            return function (v2) {\n                return function ($$throw) {\n                    return function (done) {\n                        var v3 = Data_String_CodePoints.uncons(v.value0);\n                        if (v3 instanceof Data_Maybe.Nothing) {\n                            return $$throw(v, new Parsing.ParseError(\"Unexpected EOF\", v.value1));\n                        };\n                        if (v3 instanceof Data_Maybe.Just) {\n                            var $76 = f(v3.value0.head);\n                            if ($76) {\n                                return done(new Parsing.ParseState(v3.value0.tail, updatePosSingle(v.value1)(v3.value0.head)(v3.value0.tail), true), v3.value0.head);\n                            };\n                            return $$throw(v, new Parsing.ParseError(\"Predicate unsatisfied\", v.value1));\n                        };\n                        throw new Error(\"Failed pattern match at Parsing.String (line 136, column 7 - line 143, column 73): \" + [ v3.constructor.name ]);\n                    };\n                };\n            };\n        };\n    });\n};\nvar satisfy = function (f) {\n    return Data_Function_Uncurried.mkFn5(function (v) {\n        return function (v1) {\n            return function (v2) {\n                return function ($$throw) {\n                    return function (done) {\n                        var v3 = Data_String_CodePoints.uncons(v.value0);\n                        if (v3 instanceof Data_Maybe.Nothing) {\n                            return $$throw(v, new Parsing.ParseError(\"Unexpected EOF\", v.value1));\n                        };\n                        if (v3 instanceof Data_Maybe.Just) {\n                            var cp = fromEnum(v3.value0.head);\n                            var $85 = cp < 0 || cp > 65535;\n                            if ($85) {\n                                return $$throw(v, new Parsing.ParseError(\"Expected Char\", v.value1));\n                            };\n                            var ch = fromJust(toEnum(cp));\n                            var $86 = f(ch);\n                            if ($86) {\n                                return done(new Parsing.ParseState(v3.value0.tail, updatePosSingle(v.value1)(v3.value0.head)(v3.value0.tail), true), ch);\n                            };\n                            return $$throw(v, new Parsing.ParseError(\"Predicate unsatisfied\", v.value1));\n                        };\n                        throw new Error(\"Failed pattern match at Parsing.String (line 114, column 7 - line 129, column 75): \" + [ v3.constructor.name ]);\n                    };\n                };\n            };\n        };\n    });\n};\nvar parseErrorHuman = function (input) {\n    return function (contextSize) {\n        return function (v) {\n            var v1 = (function () {\n                var go = function ($copy_posBegin) {\n                    return function ($copy_lineBegin) {\n                        return function ($copy_posEnd) {\n                            return function ($copy_lineEnd) {\n                                var $tco_var_posBegin = $copy_posBegin;\n                                var $tco_var_lineBegin = $copy_lineBegin;\n                                var $tco_var_posEnd = $copy_posEnd;\n                                var $tco_done = false;\n                                var $tco_result;\n                                function $tco_loop(posBegin, lineBegin, posEnd, lineEnd) {\n                                    var v2 = Data_String_CodePoints.uncons(lineEnd);\n                                    if (v2 instanceof Data_Maybe.Just && eq1(v2.value0.head)(Data_String_CodePoints.codePointFromChar(\"\\x0a\"))) {\n                                        var $97 = posEnd === v.value1.index;\n                                        if ($97) {\n                                            $tco_done = true;\n                                            return {\n                                                posBegin: posBegin,\n                                                posEnd: posEnd + 1 | 0,\n                                                lineBegin: lineBegin\n                                            };\n                                        };\n                                        var $98 = posEnd > v.value1.index;\n                                        if ($98) {\n                                            $tco_done = true;\n                                            return {\n                                                posBegin: posBegin,\n                                                posEnd: posEnd,\n                                                lineBegin: lineBegin\n                                            };\n                                        };\n                                        $tco_var_posBegin = posEnd + 1 | 0;\n                                        $tco_var_lineBegin = v2.value0.tail;\n                                        $tco_var_posEnd = posEnd + 1 | 0;\n                                        $copy_lineEnd = v2.value0.tail;\n                                        return;\n                                    };\n                                    if (v2 instanceof Data_Maybe.Just && eq1(v2.value0.head)(Data_String_CodePoints.codePointFromChar(\"\\x0d\"))) {\n                                        var $102 = posEnd === v.value1.index;\n                                        if ($102) {\n                                            $tco_done = true;\n                                            return {\n                                                posBegin: posBegin,\n                                                posEnd: posEnd + 1 | 0,\n                                                lineBegin: lineBegin\n                                            };\n                                        };\n                                        var $103 = posEnd > v.value1.index;\n                                        if ($103) {\n                                            $tco_done = true;\n                                            return {\n                                                posBegin: posBegin,\n                                                posEnd: posEnd,\n                                                lineBegin: lineBegin\n                                            };\n                                        };\n                                        $tco_var_posBegin = posEnd + 1 | 0;\n                                        $tco_var_lineBegin = v2.value0.tail;\n                                        $tco_var_posEnd = posEnd + 1 | 0;\n                                        $copy_lineEnd = v2.value0.tail;\n                                        return;\n                                    };\n                                    if (v2 instanceof Data_Maybe.Just) {\n                                        $tco_var_posBegin = posBegin;\n                                        $tco_var_lineBegin = lineBegin;\n                                        $tco_var_posEnd = posEnd + 1 | 0;\n                                        $copy_lineEnd = v2.value0.tail;\n                                        return;\n                                    };\n                                    $tco_done = true;\n                                    return {\n                                        posBegin: posBegin,\n                                        posEnd: posEnd,\n                                        lineBegin: lineBegin\n                                    };\n                                };\n                                while (!$tco_done) {\n                                    $tco_result = $tco_loop($tco_var_posBegin, $tco_var_lineBegin, $tco_var_posEnd, $copy_lineEnd);\n                                };\n                                return $tco_result;\n                            };\n                        };\n                    };\n                };\n                return go(0)(input)(0)(input);\n            })();\n            var lineSelect = Data_String_CodePoints.take(v1.posEnd - v1.posBegin | 0)(v1.lineBegin);\n            var lineLength = Data_String_CodePoints.length(lineSelect);\n            var lineIndex = v.value1.index - v1.posBegin | 0;\n            var bestPosBefore = lineIndex - div(contextSize)(2) | 0;\n            var bestPosAfter = (lineIndex + div(contextSize)(2) | 0) + (function () {\n                var $110 = Data_Int.odd(contextSize);\n                if ($110) {\n                    return 1;\n                };\n                return 0;\n            })() | 0;\n            var v2 = (function () {\n                var $111 = bestPosBefore >= 0;\n                if ($111) {\n                    var $112 = bestPosAfter <= lineLength;\n                    if ($112) {\n                        return new Data_Tuple.Tuple(bestPosBefore, bestPosAfter);\n                    };\n                    return new Data_Tuple.Tuple(max(0)(lineLength - contextSize | 0), lineLength);\n                };\n                return new Data_Tuple.Tuple(0, min(lineLength)(contextSize));\n            })();\n            var inputContext = Data_String_CodePoints.take(v2.value1 - v2.value0 | 0)(Data_String_CodePoints.drop(v2.value0)(lineSelect));\n            return [ v.value0 + (\" at position index:\" + (show(v.value1.index) + (\" (line:\" + (show(v.value1.line) + (\", column:\" + (show(v.value1.column) + \")\")))))), Data_String_Common.joinWith(\"\")(Data_Array.replicate(lineIndex - v2.value0 | 0)(\" \")) + \"\\u25bc\", inputContext ];\n        };\n    };\n};\nvar match = function (p) {\n    return bind(Parsing.getParserT)(function (v) {\n        return bind(p)(function (x) {\n            return bind(Parsing.getParserT)(function (v1) {\n                return pure(new Data_Tuple.Tuple(Data_String_CodeUnits.take(Data_String_CodeUnits.length(v.value0) - Data_String_CodeUnits.length(v1.value0) | 0)(v.value0), x));\n            });\n        });\n    });\n};\nvar eof = /* #__PURE__ */ Data_Function_Uncurried.mkFn5(function (v) {\n    return function (v1) {\n        return function (v2) {\n            return function ($$throw) {\n                return function (done) {\n                    var $133 = Data_String_Common[\"null\"](v.value0);\n                    if ($133) {\n                        return done(new Parsing.ParseState(v.value0, v.value1, true), Data_Unit.unit);\n                    };\n                    return $$throw(v, new Parsing.ParseError(\"Expected EOF\", v.value1));\n                };\n            };\n        };\n    };\n});\nvar consumeWith = function (f) {\n    return Data_Function_Uncurried.mkFn5(function (v) {\n        return function (v1) {\n            return function (v2) {\n                return function ($$throw) {\n                    return function (done) {\n                        var v3 = f(v.value0);\n                        if (v3 instanceof Data_Either.Left) {\n                            return $$throw(v, new Parsing.ParseError(v3.value0, v.value1));\n                        };\n                        if (v3 instanceof Data_Either.Right) {\n                            return done(new Parsing.ParseState(v3.value0.remainder, updatePosString(v.value1)(v3.value0.consumed)(v3.value0.remainder), !Data_String_Common[\"null\"](v3.value0.consumed)), v3.value0.value);\n                        };\n                        throw new Error(\"Failed pattern match at Parsing.String (line 286, column 7 - line 290, column 121): \" + [ v3.constructor.name ]);\n                    };\n                };\n            };\n        };\n    });\n};\nvar regex = function (pattern) {\n    return function (flags) {\n        return mapFlipped(Data_String_Regex.regex(\"^(\" + (pattern + \")\"))(flags))(function (regexobj) {\n            return consumeWith(function (input) {\n                var v = map(Data_Array_NonEmpty.head)(Data_String_Regex.match(regexobj)(input));\n                if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Just) {\n                    var remainder = Data_String_CodeUnits.drop(Data_String_CodeUnits.length(v.value0.value0))(input);\n                    return new Data_Either.Right({\n                        value: v.value0.value0,\n                        consumed: v.value0.value0,\n                        remainder: remainder\n                    });\n                };\n                return new Data_Either.Left(\"No Regex pattern match\");\n            });\n        });\n    };\n};\nvar rest = /* #__PURE__ */ consumeWith(function (consumed) {\n    return new Data_Either.Right({\n        value: consumed,\n        consumed: consumed,\n        remainder: \"\"\n    });\n});\nvar string = function (str) {\n    return consumeWith(function (input) {\n        var v = Data_String_CodeUnits.stripPrefix(str)(input);\n        if (v instanceof Data_Maybe.Just) {\n            return new Data_Either.Right({\n                value: str,\n                consumed: str,\n                remainder: v.value0\n            });\n        };\n        return new Data_Either.Left(\"Expected \" + show1(str));\n    });\n};\nvar takeN = function (n) {\n    return consumeWith(function (input) {\n        var v = Data_String_CodePoints.splitAt(n)(input);\n        var $153 = Data_String_CodePoints.length(v.before) === n;\n        if ($153) {\n            return new Data_Either.Right({\n                value: v.before,\n                consumed: v.before,\n                remainder: v.after\n            });\n        };\n        return new Data_Either.Left(\"Could not take \" + (show(n) + \" characters\"));\n    });\n};\nvar $$char = function (c) {\n    return Parsing_Combinators.withErrorMessage(satisfy(function (v) {\n        return v === c;\n    }))(show2(c));\n};\nvar anyCodePoint = /* #__PURE__ */ satisfyCodePoint(/* #__PURE__ */ Data_Function[\"const\"](true));\nvar anyTill = function (dictMonad) {\n    return function (p) {\n        var go = function (unit) {\n            return alt(bind(Parsing.getParserT)(function (v) {\n                return bind(Parsing_Combinators[\"try\"](p))(function (t) {\n                    return pure(new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v.value0, t)));\n                });\n            }))(bind(anyCodePoint)(function () {\n                return pure(new Control_Monad_Rec_Class.Loop(unit));\n            }));\n        };\n        return bind(Parsing.getParserT)(function (v) {\n            return bind(tailRecM(go)(Data_Unit.unit))(function (v1) {\n                return pure(new Data_Tuple.Tuple(Data_String_CodeUnits.take(Data_String_CodeUnits.length(v.value0) - Data_String_CodeUnits.length(v1.value0) | 0)(v.value0), v1.value1));\n            });\n        });\n    };\n};\nvar anyChar = /* #__PURE__ */ satisfy(/* #__PURE__ */ Data_Function[\"const\"](true));\nexport {\n    $$char as char,\n    string,\n    anyChar,\n    anyCodePoint,\n    satisfy,\n    satisfyCodePoint,\n    takeN,\n    rest,\n    eof,\n    match,\n    regex,\n    anyTill,\n    consumeWith,\n    parseErrorHuman\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Control_Bind from \"../Control.Bind/index.js\";\nimport * as Control_Category from \"../Control.Category/index.js\";\nimport * as Data_Array from \"../Data.Array/index.js\";\nimport * as Data_CodePoint_Unicode from \"../Data.CodePoint.Unicode/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Eq from \"../Data.Eq/index.js\";\nimport * as Data_Foldable from \"../Data.Foldable/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_Functor from \"../Data.Functor/index.js\";\nimport * as Data_Int from \"../Data.Int/index.js\";\nimport * as Data_Maybe from \"../Data.Maybe/index.js\";\nimport * as Data_Monoid from \"../Data.Monoid/index.js\";\nimport * as Data_Number from \"../Data.Number/index.js\";\nimport * as Data_Show from \"../Data.Show/index.js\";\nimport * as Data_String_CodePoints from \"../Data.String.CodePoints/index.js\";\nimport * as Data_String_CodeUnits from \"../Data.String.CodeUnits/index.js\";\nimport * as Data_String_Regex_Flags from \"../Data.String.Regex.Flags/index.js\";\nimport * as Parsing from \"../Parsing/index.js\";\nimport * as Parsing_Combinators from \"../Parsing.Combinators/index.js\";\nimport * as Parsing_String from \"../Parsing.String/index.js\";\nimport * as Partial_Unsafe from \"../Partial.Unsafe/index.js\";\nvar elem = /* #__PURE__ */ Data_Array.elem(Data_String_CodePoints.eqCodePoint);\nvar show = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(Data_Show.showString));\nvar map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);\nvar elem1 = /* #__PURE__ */ Data_Array.elem(Data_Eq.eqChar);\nvar show1 = /* #__PURE__ */ Data_Show.show(/* #__PURE__ */ Data_Show.showArray(Data_Show.showChar));\nvar identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);\nvar mempty = /* #__PURE__ */ Data_Monoid.mempty(Data_String_Regex_Flags.monoidRegexFlags);\nvar alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);\nvar applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);\nvar pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);\nvar bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);\nvar notElem = /* #__PURE__ */ Data_Array.notElem(Data_String_CodePoints.eqCodePoint);\nvar notElem1 = /* #__PURE__ */ Data_Array.notElem(Data_Eq.eqChar);\nvar takeWhile1 = function (predicate) {\n    return Parsing_String.consumeWith(function (s) {\n        var value = Data_String_CodePoints.takeWhile(predicate)(s);\n        var len = Data_String_CodeUnits.length(value);\n        var $27 = len > 0;\n        if ($27) {\n            return new Data_Either.Right({\n                consumed: value,\n                remainder: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(value))(s),\n                value: value\n            });\n        };\n        return new Data_Either.Left(\"Expected character satisfying predicate\");\n    });\n};\nvar takeWhile = function (predicate) {\n    return Parsing_String.consumeWith(function (s) {\n        var value = Data_String_CodePoints.takeWhile(predicate)(s);\n        return new Data_Either.Right({\n            consumed: value,\n            remainder: Data_String_CodeUnits.drop(Data_String_CodeUnits.length(value))(s),\n            value: value\n        });\n    });\n};\nvar whiteSpace = /* #__PURE__ */ takeWhile(Data_CodePoint_Unicode.isSpace);\nvar skipSpaces = /* #__PURE__ */ Data_Functor[\"void\"](Parsing.functorParserT)(whiteSpace);\nvar satisfyCP = function (p) {\n    return Parsing_String.satisfy(function ($32) {\n        return p(Data_String_CodePoints.codePointFromChar($32));\n    });\n};\nvar space = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isSpace))(\"space\");\nvar upper = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isUpper))(\"uppercase letter\");\nvar oneOfCodePoints = function (ss) {\n    return Parsing_Combinators.withLazyErrorMessage(Parsing_String.satisfyCodePoint(Data_Function.flip(elem)(ss)))(function (v) {\n        return \"one of \" + show(map(Data_String_CodePoints.singleton)(ss));\n    });\n};\nvar oneOf = function (ss) {\n    return Parsing_Combinators.withLazyErrorMessage(Parsing_String.satisfy(Data_Function.flip(elem1)(ss)))(function (v) {\n        return \"one of \" + show1(ss);\n    });\n};\nvar octDigit = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isOctDigit))(\"oct digit\");\nvar numberRegex = /* #__PURE__ */ Data_Either.either(Partial_Unsafe.unsafeCrashWith)(identity)(/* #__PURE__ */ Parsing_String.regex(\"[+-]?[0-9]*(\\\\.[0-9]*)?([eE][+-]?[0-9]*(\\\\.[0-9]*)?)?\")(mempty));\nvar number = /* #__PURE__ */ (function () {\n    return alt(Parsing_Combinators.choice(Data_Foldable.foldableArray)([ applySecond(Parsing_String.string(\"Infinity\"))(pure(Data_Number.infinity)), applySecond(Parsing_String.string(\"+Infinity\"))(pure(Data_Number.infinity)), applySecond(Parsing_String.string(\"-Infinity\"))(pure(-Data_Number.infinity)), applySecond(Parsing_String.string(\"NaN\"))(pure(Data_Number.nan)), Parsing_Combinators.tryRethrow(bind(numberRegex)(function (section) {\n        var v = Data_Number.fromString(section);\n        if (v instanceof Data_Maybe.Nothing) {\n            return Parsing.fail(\"Expected Number\");\n        };\n        if (v instanceof Data_Maybe.Just) {\n            return pure(v.value0);\n        };\n        throw new Error(\"Failed pattern match at Parsing.String.Basic (line 118, column 9 - line 120, column 27): \" + [ v.constructor.name ]);\n    })) ]))(Parsing.fail(\"Expected Number\"));\n})();\nvar noneOfCodePoints = function (ss) {\n    return Parsing_Combinators.withLazyErrorMessage(Parsing_String.satisfyCodePoint(Data_Function.flip(notElem)(ss)))(function (v) {\n        return \"none of \" + show(map(Data_String_CodePoints.singleton)(ss));\n    });\n};\nvar noneOf = function (ss) {\n    return Parsing_Combinators.withLazyErrorMessage(Parsing_String.satisfy(Data_Function.flip(notElem1)(ss)))(function (v) {\n        return \"none of \" + show1(ss);\n    });\n};\nvar lower = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isLower))(\"lowercase letter\");\nvar letter = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isAlpha))(\"letter\");\nvar intDecimalRegex = /* #__PURE__ */ Data_Either.either(Partial_Unsafe.unsafeCrashWith)(identity)(/* #__PURE__ */ Parsing_String.regex(\"[+-]?[0-9]+\")(mempty));\nvar intDecimal = /* #__PURE__ */ Parsing_Combinators.tryRethrow(/* #__PURE__ */ bind(/* #__PURE__ */ alt(intDecimalRegex)(/* #__PURE__ */ Parsing.fail(\"Expected Int\")))(function (section) {\n    var v = Data_Int.fromString(section);\n    if (v instanceof Data_Maybe.Nothing) {\n        return Parsing.fail(\"Expected Int\");\n    };\n    if (v instanceof Data_Maybe.Just) {\n        return pure(v.value0);\n    };\n    throw new Error(\"Failed pattern match at Parsing.String.Basic (line 140, column 3 - line 142, column 21): \" + [ v.constructor.name ]);\n}));\nvar hexDigit = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isHexDigit))(\"hex digit\");\nvar digit = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isDecDigit))(\"digit\");\nvar alphaNum = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ satisfyCP(Data_CodePoint_Unicode.isAlphaNum))(\"letter or digit\");\nexport {\n    digit,\n    hexDigit,\n    octDigit,\n    letter,\n    space,\n    lower,\n    upper,\n    alphaNum,\n    intDecimal,\n    number,\n    takeWhile,\n    takeWhile1,\n    whiteSpace,\n    skipSpaces,\n    oneOf,\n    oneOfCodePoints,\n    noneOf,\n    noneOfCodePoints\n};\n", "// Generated by purs version 0.15.9\nimport * as Control_Alt from \"../Control.Alt/index.js\";\nimport * as Control_Applicative from \"../Control.Applicative/index.js\";\nimport * as Control_Apply from \"../Control.Apply/index.js\";\nimport * as Data_Bifunctor from \"../Data.Bifunctor/index.js\";\nimport * as Data_Either from \"../Data.Either/index.js\";\nimport * as Data_Function from \"../Data.Function/index.js\";\nimport * as Data_String_Common from \"../Data.String.Common/index.js\";\nimport * as Parsing from \"../Parsing/index.js\";\nimport * as Parsing_Combinators from \"../Parsing.Combinators/index.js\";\nimport * as Parsing_String from \"../Parsing.String/index.js\";\nimport * as Parsing_String_Basic from \"../Parsing.String.Basic/index.js\";\nvar applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);\nvar pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);\nvar alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);\nvar pTrueShorthand = /* #__PURE__ */ applySecond(/* #__PURE__ */ applySecond(/* #__PURE__ */ Parsing_String_Basic.oneOf([ \"t\", \"y\", \"1\" ]))(Parsing_String.eof))(/* #__PURE__ */ pure(true));\nvar pTrueLonghand = /* #__PURE__ */ applySecond(/* #__PURE__ */ applySecond(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String.string(\"on\"))(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String.string(\"true\"))(/* #__PURE__ */ Parsing_String.string(\"yes\"))))(Parsing_String.eof))(/* #__PURE__ */ pure(true));\nvar pFalseShorthand = /* #__PURE__ */ applySecond(/* #__PURE__ */ applySecond(/* #__PURE__ */ Parsing_String_Basic.oneOf([ \"f\", \"n\", \"0\" ]))(Parsing_String.eof))(/* #__PURE__ */ pure(false));\nvar pFalseLonghand = /* #__PURE__ */ applySecond(/* #__PURE__ */ applySecond(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String.string(\"off\"))(/* #__PURE__ */ alt(/* #__PURE__ */ Parsing_String.string(\"false\"))(/* #__PURE__ */ Parsing_String.string(\"no\"))))(Parsing_String.eof))(/* #__PURE__ */ pure(false));\nvar parser = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ Parsing_Combinators[\"try\"](/* #__PURE__ */ alt(pTrueLonghand)(/* #__PURE__ */ alt(pFalseLonghand)(/* #__PURE__ */ alt(pTrueShorthand)(pFalseShorthand)))))(\"one of [ 't', 'y', '1', 'f', 'n', '0', 'on', 'true', 'yes', 'off', 'false', 'no' ]\");\nvar parse_ = /* #__PURE__ */ (function () {\n    var $5 = Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither)(Parsing.parseErrorMessage);\n    var $6 = Data_Function.flip(Parsing.runParser)(parser);\n    return function ($7) {\n        return $5($6(Data_String_Common.toLower(Data_String_Common.trim($7))));\n    };\n})();\nvar isRight_ = Data_Either.isRight;\nexport {\n    isRight_,\n    parse_\n};\n"],
  "mappings": "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",
  "names": ["identity", "map", "identity", "eq", "LT", "GT", "EQ", "empty", "Nothing", "Just", "Left", "Right", "Tuple", "identity", "Loop", "Done", "defer", "unsafeCoerce", "unsafeCoerce", "coerce", "coerce", "apply", "map", "pure", "top", "unwrap", "ParseState", "ParseError", "More", "Lift", "Stop", "defer", "bindFlipped", "throwError", "map", "tailRecM", "step", "map", "unwrap", "message", "throwError", "bindFlipped", "alt", "defer", "alt", "defer", "lift", "Cons", "head", "tail", "foldr", "compare", "from", "sortByImpl", "compare", "from", "findIndex", "findIndex", "elem", "head", "tail", "apply", "map", "last", "Just", "Nothing", "unsafeCodePointAt0", "index", "length", "length", "drop", "splitAt", "splitAt", "length", "name", "init", "state", "fromEnum", "compare", "uncons", "length", "fromEnum", "drop", "fromEnum", "length", "compare", "uncons", "fromEnum", "mod", "fromJust", "toEnum", "fromEnum", "mod", "uncons", "uncons", "fromEnum", "fromJust", "toEnum", "elem", "show1", "oneOf", "show1", "applySecond", "pure", "alt", "oneOf"]
}
